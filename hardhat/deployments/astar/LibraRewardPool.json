{
  "address": "0xA795dDe6556315b9534Ed2d984d2fE8050ca3cA6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_libra",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolStartTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_lastRewardTime",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochEndTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochLibraPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochTotalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fromTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toTime",
          "type": "uint256"
        }
      ],
      "name": "getGeneratedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "libra",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingLIBRA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accLibraPerShare",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isStarted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b3720ed356e821ffc320497012f478d76e17492c5d0354da97e0f7685ec1f83",
  "receipt": {
    "to": null,
    "from": "0xB8be57502Ff91CC20BF172FA2dDeef8de117ed59",
    "contractAddress": "0xA795dDe6556315b9534Ed2d984d2fE8050ca3cA6",
    "transactionIndex": 86,
    "gasUsed": "1754688",
    "logsBloom": "0x
    "blockHash": "0x58d47aa94d8ab4031f5aa661833f8e5844c4bb130635c93e7e00bb552387e127",
    "transactionHash": "0x7b3720ed356e821ffc320497012f478d76e17492c5d0354da97e0f7685ec1f83",
    "logs": [],
    "blockNumber": 1052853,
    "cumulativeGasUsed": "17673116",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00EEe2C2aA1a7CD0017c4C040EbE07bf0535D65F",
    1653059126
  ],
  "numDeployments": 2,
  "solcInputHash": "493bb397ef1553f5ada0f74a3cf1e3b0",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_libra\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_lastRewardTime\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochEndTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochLibraPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toTime\",\"type\":\"uint256\"}],\"name\":\"getGeneratedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libra\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingLIBRA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accLibraPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/distribution/LibraRewardPool.sol\":\"LibraRewardPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/distribution/LibraRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// Note that this pool has no minter key of LIBRA (rewards).\\n// Instead, the governance will call TOLIBRAMB distributeReward method and send reward to this pool at the beginning.\\ncontract LibraRewardPool {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // governance\\n    address public operator;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 token; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. LIBRAs to distribute in the pool.\\n        uint256 lastRewardTime; // Last time that LIBRAs distribution occurred.\\n        uint256 accLibraPerShare; // Accumulated LIBRAs per share, times 1e18. See below.\\n        bool isStarted; // if lastRewardTime has passed\\n    }\\n\\n    IERC20 public libra;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The time when LIBRA mining starts.\\n    uint256 public poolStartTime;\\n\\n    uint256[] public epochTotalRewards = [80000 ether, 60000 ether];\\n\\n    // Time when each epoch ends.\\n    uint256[3] public epochEndTimes;\\n\\n    // Reward per second for each of 2 epochs (last item is equal to 0 - for sanity).\\n    uint256[3] public epochLibraPerSecond;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 amount);\\n\\n    constructor(address _libra, uint256 _poolStartTime) public {\\n        require(block.timestamp < _poolStartTime, \\\"late\\\");\\n        if (_libra != address(0)) libra = IERC20(_libra);\\n\\n        poolStartTime = _poolStartTime;\\n\\n        epochEndTimes[0] = poolStartTime + 4 days; // Day 2-5\\n        epochEndTimes[1] = epochEndTimes[0] + 5 days; // Day 6-10\\n\\n        epochLibraPerSecond[0] = epochTotalRewards[0].div(4 days);\\n        epochLibraPerSecond[1] = epochTotalRewards[1].div(5 days);\\n\\n        epochLibraPerSecond[2] = 0;\\n        operator = msg.sender;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"LibraRewardPool: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    function checkPoolDuplicate(IERC20 _token) internal view {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            require(poolInfo[pid].token != _token, \\\"LibraRewardPool: existing pool?\\\");\\n        }\\n    }\\n\\n    // Add a new token to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _token,\\n        bool _withUpdate,\\n        uint256 _lastRewardTime\\n    ) public onlyOperator {\\n        checkPoolDuplicate(_token);\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        if (block.timestamp < poolStartTime) {\\n            // chef is sleeping\\n            if (_lastRewardTime == 0) {\\n                _lastRewardTime = poolStartTime;\\n            } else {\\n                if (_lastRewardTime < poolStartTime) {\\n                    _lastRewardTime = poolStartTime;\\n                }\\n            }\\n        } else {\\n            // chef is cooking\\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\\n                _lastRewardTime = block.timestamp;\\n            }\\n        }\\n        bool _isStarted = (_lastRewardTime <= poolStartTime) || (_lastRewardTime <= block.timestamp);\\n        poolInfo.push(PoolInfo({token: _token, allocPoint: _allocPoint, lastRewardTime: _lastRewardTime, accLibraPerShare: 0, isStarted: _isStarted}));\\n        if (_isStarted) {\\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        }\\n    }\\n\\n    // Update the given pool's LIBRA allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\\n        massUpdatePools();\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.isStarted) {\\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(_allocPoint);\\n        }\\n        pool.allocPoint = _allocPoint;\\n    }\\n\\n    // Return accumulate rewards over the given _fromTime to _toTime.\\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime) public view returns (uint256) {\\n        for (uint8 epochId = 2; epochId >= 1; --epochId) {\\n            if (_toTime >= epochEndTimes[epochId - 1]) {\\n                if (_fromTime >= epochEndTimes[epochId - 1]) {\\n                    return _toTime.sub(_fromTime).mul(epochLibraPerSecond[epochId]);\\n                }\\n\\n                uint256 _generatedReward = _toTime.sub(epochEndTimes[epochId - 1]).mul(epochLibraPerSecond[epochId]);\\n                if (epochId == 1) {\\n                    return _generatedReward.add(epochEndTimes[0].sub(_fromTime).mul(epochLibraPerSecond[0]));\\n                }\\n                for (epochId = epochId - 1; epochId >= 1; --epochId) {\\n                    if (_fromTime >= epochEndTimes[epochId - 1]) {\\n                        return _generatedReward.add(epochEndTimes[epochId].sub(_fromTime).mul(epochLibraPerSecond[epochId]));\\n                    }\\n                    _generatedReward = _generatedReward.add(epochEndTimes[epochId].sub(epochEndTimes[epochId - 1]).mul(epochLibraPerSecond[epochId]));\\n                }\\n                return _generatedReward.add(epochEndTimes[0].sub(_fromTime).mul(epochLibraPerSecond[0]));\\n            }\\n        }\\n        return _toTime.sub(_fromTime).mul(epochLibraPerSecond[0]);\\n    }\\n\\n    // View function to see pending LIBRAs on frontend.\\n    function pendingLIBRA(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accLibraPerShare = pool.accLibraPerShare;\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\\n            uint256 _libraReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\\n            accLibraPerShare = accLibraPerShare.add(_libraReward.mul(1e18).div(tokenSupply));\\n        }\\n        return user.amount.mul(accLibraPerShare).div(1e18).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (tokenSupply == 0) {\\n            pool.lastRewardTime = block.timestamp;\\n            return;\\n        }\\n        if (!pool.isStarted) {\\n            pool.isStarted = true;\\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\\n        }\\n        if (totalAllocPoint > 0) {\\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\\n            uint256 _libraReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\\n            pool.accLibraPerShare = pool.accLibraPerShare.add(_libraReward.mul(1e18).div(tokenSupply));\\n        }\\n        pool.lastRewardTime = block.timestamp;\\n    }\\n\\n    // Deposit LP tokens.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 _pending = user.amount.mul(pool.accLibraPerShare).div(1e18).sub(user.rewardDebt);\\n            if (_pending > 0) {\\n                safeLibraTransfer(_sender, _pending);\\n                emit RewardPaid(_sender, _pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.token.safeTransferFrom(_sender, address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accLibraPerShare).div(1e18);\\n        emit Deposit(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 _pending = user.amount.mul(pool.accLibraPerShare).div(1e18).sub(user.rewardDebt);\\n        if (_pending > 0) {\\n            safeLibraTransfer(_sender, _pending);\\n            emit RewardPaid(_sender, _pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.token.safeTransfer(_sender, _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accLibraPerShare).div(1e18);\\n        emit Withdraw(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 _amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.token.safeTransfer(msg.sender, _amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Safe libra transfer function, just in case if rounding error causes pool to not have enough LIBRAs.\\n    function safeLibraTransfer(address _to, uint256 _amount) internal {\\n        uint256 _libraBal = libra.balanceOf(address(this));\\n        if (_libraBal > 0) {\\n            if (_amount > _libraBal) {\\n                libra.safeTransfer(_to, _libraBal);\\n            } else {\\n                libra.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 amount,\\n        address to\\n    ) external onlyOperator {\\n        if (block.timestamp < epochEndTimes[1] + 30 days) {\\n            // do not allow to drain token if less than 30 days after farming\\n            require(_token != libra, \\\"!libra\\\");\\n            uint256 length = poolInfo.length;\\n            for (uint256 pid = 0; pid < length; ++pid) {\\n                PoolInfo storage pool = poolInfo[pid];\\n                require(_token != pool.token, \\\"!pool.token\\\");\\n            }\\n        }\\n        _token.safeTransfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xb85f048bd887fe2ae943fa05f424a6a059502c18ff064bea273b233ac7962cde\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600060045560c06040526910f0cf064dd5920000006080908152690cb49b44ba602d80000060a05262000037906006906002620001d2565b503480156200004557600080fd5b5060405162001ce238038062001ce2833981810160405260408110156200006b57600080fd5b508051602090910151428111620000b2576040805162461bcd60e51b815260206004808301919091526024820152636c61746560e01b604482015290519081900360640190fd5b6001600160a01b03821615620000de57600180546001600160a01b0319166001600160a01b0384161790555b600581905562054600808201600755620bdd808201600855600680546200012a9291906000906200010b57fe5b90600052602060002001546200016960201b620012eb1790919060201c565b600a55600680546200014791620697809160019081106200010b57fe5b600b5550506000600c81905580546001600160a01b0319163317905562000244565b6000808211620001c0576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381620001ca57fe5b049392505050565b8280548282559060005260206000209081019282156200021b579160200282015b828111156200021b57825182906001600160501b0316905591602001919060010190620001f3565b50620002299291506200022d565b5090565b5b808211156200022957600081556001016200022e565b611a8e80620002546000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063570ca735116100cd5780639a25cefc11610081578063b3ab15fb11610066578063b3ab15fb146103db578063b89e73c114610401578063e2bbb1581461041e5761016c565b80639a25cefc146103b6578063aed3ba6b146103d35761016c565b8063630b5ba1116100b2578063630b5ba11461032f57806393f1a40b1461033757806396805e541461037c5761016c565b8063570ca735146103035780635f96dc11146103275761016c565b80632e8c98121161012457806351eb05a61161010957806351eb05a6146102935780635312ea8e146102b057806354575af4146102cd5761016c565b80632e8c981214610244578063441a3e70146102705761016c565b80631ab06ee5116101555780631ab06ee5146101df578063231f0c6a146102045780632326f746146102275761016c565b80631526fe271461017157806317caf6f1146101c5575b600080fd5b61018e6004803603602081101561018757600080fd5b5035610441565b604080516001600160a01b039096168652602086019490945284840192909252606084015215156080830152519081900360a00190f35b6101cd61048c565b60408051918252519081900360200190f35b610202600480360360408110156101f557600080fd5b5080359060200135610492565b005b6101cd6004803603604081101561021a57600080fd5b5080359060200135610540565b6101cd6004803603602081101561023d57600080fd5b503561073b565b6101cd6004803603604081101561025a57600080fd5b50803590602001356001600160a01b031661074f565b6102026004803603604081101561028657600080fd5b50803590602001356108d0565b610202600480360360208110156102a957600080fd5b5035610a8c565b610202600480360360208110156102c657600080fd5b5035610c21565b610202600480360360608110156102e357600080fd5b506001600160a01b03813581169160208101359160409091013516610cbd565b61030b610e2f565b604080516001600160a01b039092168252519081900360200190f35b6101cd610e3e565b610202610e44565b6103636004803603604081101561034d57600080fd5b50803590602001356001600160a01b0316610e67565b6040805192835260208301919091528051918290030190f35b6102026004803603608081101561039257600080fd5b508035906001600160a01b0360208201351690604081013515159060600135610e8b565b6101cd600480360360208110156103cc57600080fd5b50356110be565b61030b6110dc565b610202600480360360208110156103f157600080fd5b50356001600160a01b03166110eb565b6101cd6004803603602081101561041757600080fd5b503561116e565b6102026004803603604081101561043457600080fd5b508035906020013561117b565b6002818154811061044e57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b60045481565b6000546001600160a01b031633146104db5760405162461bcd60e51b815260040180806020018281038252602b815260200180611a04602b913960400191505060405180910390fd5b6104e3610e44565b6000600283815481106104f257fe5b60009182526020909120600590910201600481015490915060ff1615610539576105358261052f836001015460045461135290919063ffffffff16565b906113af565b6004555b6001015550565b600060025b60018160ff16106107205760076001820360ff166003811061056357fe5b015483106106f95760076001820360ff166003811061057e57fe5b015484106105b3576105ab600a8260ff166003811061059957fe5b01546105a58587611352565b90611409565b915050610735565b60006105e9600a8360ff16600381106105c857fe5b01546105a560076001860360ff16600381106105e057fe5b01548790611352565b90508160ff16600114156106255761061c610615600a60005b01546105a588600760005b015490611352565b82906113af565b92505050610735565b6001820391505b60018260ff16106106ea5760076001830360ff166003811061064a57fe5b0154851061067e5761061c610615600a8460ff166003811061066857fe5b01546105a58860078760ff166003811061060d57fe5b6106be610615600a8460ff166003811061069457fe5b01546105a560076001870360ff16600381106106ac57fe5b015460078760ff166003811061060d57fe5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191905061062c565b61061c610615600a6000610602565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610545565b50600a54610732906105a58486611352565b90505b92915050565b600a816003811061074857fe5b0154905081565b6000806002848154811061075f57fe5b60009182526020808320878452600380835260408086206001600160a01b03808b168852908552818720600590960290930191820154825482517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015292519398509596909590949316926370a0823192602480840193829003018186803b1580156107f057600080fd5b505afa158015610804573d6000803e3d6000fd5b505050506040513d602081101561081a57600080fd5b505160028501549091504211801561083157508015155b15610894576000610846856002015442610540565b9050600061086d60045461086788600101548561140990919063ffffffff16565b906112eb565b905061088f6108888461086784670de0b6b3a7640000611409565b85906113af565b935050505b6108c583600101546108bf670de0b6b3a764000061086786886000015461140990919063ffffffff16565b90611352565b979650505050505050565b60003390506000600284815481106108e457fe5b600091825260208083208784526003825260408085206001600160a01b0388168652909252922080546005909202909201925084111561096b576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b61097485610a8c565b60006109a582600101546108bf670de0b6b3a76400006108678760030154876000015461140990919063ffffffff16565b905080156109f7576109b78482611462565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b8415610a21578154610a099086611352565b82558254610a21906001600160a01b03168587611531565b60038301548254610a3f91670de0b6b3a76400009161086791611409565b600183015560408051868152905187916001600160a01b038716917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505050505050565b600060028281548110610a9b57fe5b9060005260206000209060050201905080600201544211610abc5750610c1e565b8054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610b1f57600080fd5b505afa158015610b33573d6000803e3d6000fd5b505050506040513d6020811015610b4957600080fd5b5051905080610b5f575042600290910155610c1e565b600482015460ff16610bae57600480830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558301549054610baa916113af565b6004555b60045415610c15576000610bc6836002015442610540565b90506000610be760045461086786600101548561140990919063ffffffff16565b9050610c0d610c028461086784670de0b6b3a7640000611409565b6003860154906113af565b600385015550505b50426002909101555b50565b600060028281548110610c3057fe5b600091825260208083208584526003825260408085203380875293528420805485825560018201959095556005909302018054909450919291610c80916001600160a01b03919091169083611531565b604080518281529051859133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350505050565b6000546001600160a01b03163314610d065760405162461bcd60e51b815260040180806020018281038252602b815260200180611a04602b913960400191505060405180910390fd5b60085462278d0001421015610e16576001546001600160a01b0384811691161415610d78576040805162461bcd60e51b815260206004820152600660248201527f216c696272610000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60025460005b81811015610e1357600060028281548110610d9557fe5b6000918252602090912060059091020180549091506001600160a01b0387811691161415610e0a576040805162461bcd60e51b815260206004820152600b60248201527f21706f6f6c2e746f6b656e000000000000000000000000000000000000000000604482015290519081900360640190fd5b50600101610d7e565b50505b610e2a6001600160a01b0384168284611531565b505050565b6000546001600160a01b031681565b60055481565b60025460005b81811015610e6357610e5b81610a8c565b600101610e4a565b5050565b60036020908152600092835260408084209091529082529020805460019091015482565b6000546001600160a01b03163314610ed45760405162461bcd60e51b815260040180806020018281038252602b815260200180611a04602b913960400191505060405180910390fd5b610edd836115b1565b8115610eeb57610eeb610e44565b600554421015610f175780610f035750600554610f12565b600554811015610f1257506005545b610f2b565b801580610f2357504281105b15610f2b5750425b600060055482111580610f3e5750428211155b6040805160a0810182526001600160a01b03878116825260208201898152928201868152600060608401818152861580156080870190815260028054600181018255945295517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600590940293840180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919096161790945594517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad082015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad184015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad290920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016921515929092179091559091506110b7576004546110b390866113af565b6004555b5050505050565b600681815481106110cb57fe5b600091825260209091200154905081565b6001546001600160a01b031681565b6000546001600160a01b031633146111345760405162461bcd60e51b815260040180806020018281038252602b815260200180611a04602b913960400191505060405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6007816003811061074857fe5b600033905060006002848154811061118f57fe5b600091825260208083208784526003825260408085206001600160a01b03881686529092529220600590910290910191506111c985610a8c565b80541561125557600061120182600101546108bf670de0b6b3a76400006108678760030154876000015461140990919063ffffffff16565b90508015611253576112138482611462565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b505b8315611281578154611272906001600160a01b031684308761164b565b805461127e90856113af565b81555b6003820154815461129f91670de0b6b3a76400009161086791611409565b600182015560408051858152905186916001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b6000808211611341576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161134a57fe5b049392505050565b6000828211156113a9576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015610732576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008261141857506000610735565b8282028284828161142557fe5b04146107325760405162461bcd60e51b81526004018080602001828103825260218152602001806119e36021913960400191505060405180910390fd5b600154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156114c657600080fd5b505afa1580156114da573d6000803e3d6000fd5b505050506040513d60208110156114f057600080fd5b505190508015610e2a578082111561151e57600154611519906001600160a01b03168483611531565b610e2a565b600154610e2a906001600160a01b031684845b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e2a9084906116d9565b60025460005b81811015610e2a57826001600160a01b0316600282815481106115d657fe5b60009182526020909120600590910201546001600160a01b03161415611643576040805162461bcd60e51b815260206004820152601f60248201527f4c69627261526577617264506f6f6c3a206578697374696e6720706f6f6c3f00604482015290519081900360640190fd5b6001016115b7565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526116d39085906116d9565b50505050565b606061172e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661178a9092919063ffffffff16565b805190915015610e2a5780806020019051602081101561174d57600080fd5b5051610e2a5760405162461bcd60e51b815260040180806020018281038252602a815260200180611a2f602a913960400191505060405180910390fd5b606061179984846000856117a3565b90505b9392505050565b6060824710156117e45760405162461bcd60e51b81526004018080602001828103825260268152602001806119bd6026913960400191505060405180910390fd5b6117ed85611912565b61183e576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061189b57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161185e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146118fd576040519150601f19603f3d011682016040523d82523d6000602084013e611902565b606091505b50915091506108c5828286611918565b3b151590565b6060831561192757508161179c565b8251156119375782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611981578181015183820152602001611969565b50505050905090810190601f1680156119ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774c69627261526577617264506f6f6c3a2063616c6c6572206973206e6f7420746865206f70657261746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220b798862bcd0f29452e02416abc6bf9a65a482220443f4ecf1ed09431f2bf3d1264736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c8063570ca735116100cd5780639a25cefc11610081578063b3ab15fb11610066578063b3ab15fb146103db578063b89e73c114610401578063e2bbb1581461041e5761016c565b80639a25cefc146103b6578063aed3ba6b146103d35761016c565b8063630b5ba1116100b2578063630b5ba11461032f57806393f1a40b1461033757806396805e541461037c5761016c565b8063570ca735146103035780635f96dc11146103275761016c565b80632e8c98121161012457806351eb05a61161010957806351eb05a6146102935780635312ea8e146102b057806354575af4146102cd5761016c565b80632e8c981214610244578063441a3e70146102705761016c565b80631ab06ee5116101555780631ab06ee5146101df578063231f0c6a146102045780632326f746146102275761016c565b80631526fe271461017157806317caf6f1146101c5575b600080fd5b61018e6004803603602081101561018757600080fd5b5035610441565b604080516001600160a01b039096168652602086019490945284840192909252606084015215156080830152519081900360a00190f35b6101cd61048c565b60408051918252519081900360200190f35b610202600480360360408110156101f557600080fd5b5080359060200135610492565b005b6101cd6004803603604081101561021a57600080fd5b5080359060200135610540565b6101cd6004803603602081101561023d57600080fd5b503561073b565b6101cd6004803603604081101561025a57600080fd5b50803590602001356001600160a01b031661074f565b6102026004803603604081101561028657600080fd5b50803590602001356108d0565b610202600480360360208110156102a957600080fd5b5035610a8c565b610202600480360360208110156102c657600080fd5b5035610c21565b610202600480360360608110156102e357600080fd5b506001600160a01b03813581169160208101359160409091013516610cbd565b61030b610e2f565b604080516001600160a01b039092168252519081900360200190f35b6101cd610e3e565b610202610e44565b6103636004803603604081101561034d57600080fd5b50803590602001356001600160a01b0316610e67565b6040805192835260208301919091528051918290030190f35b6102026004803603608081101561039257600080fd5b508035906001600160a01b0360208201351690604081013515159060600135610e8b565b6101cd600480360360208110156103cc57600080fd5b50356110be565b61030b6110dc565b610202600480360360208110156103f157600080fd5b50356001600160a01b03166110eb565b6101cd6004803603602081101561041757600080fd5b503561116e565b6102026004803603604081101561043457600080fd5b508035906020013561117b565b6002818154811061044e57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b60045481565b6000546001600160a01b031633146104db5760405162461bcd60e51b815260040180806020018281038252602b815260200180611a04602b913960400191505060405180910390fd5b6104e3610e44565b6000600283815481106104f257fe5b60009182526020909120600590910201600481015490915060ff1615610539576105358261052f836001015460045461135290919063ffffffff16565b906113af565b6004555b6001015550565b600060025b60018160ff16106107205760076001820360ff166003811061056357fe5b015483106106f95760076001820360ff166003811061057e57fe5b015484106105b3576105ab600a8260ff166003811061059957fe5b01546105a58587611352565b90611409565b915050610735565b60006105e9600a8360ff16600381106105c857fe5b01546105a560076001860360ff16600381106105e057fe5b01548790611352565b90508160ff16600114156106255761061c610615600a60005b01546105a588600760005b015490611352565b82906113af565b92505050610735565b6001820391505b60018260ff16106106ea5760076001830360ff166003811061064a57fe5b0154851061067e5761061c610615600a8460ff166003811061066857fe5b01546105a58860078760ff166003811061060d57fe5b6106be610615600a8460ff166003811061069457fe5b01546105a560076001870360ff16600381106106ac57fe5b015460078760ff166003811061060d57fe5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191905061062c565b61061c610615600a6000610602565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610545565b50600a54610732906105a58486611352565b90505b92915050565b600a816003811061074857fe5b0154905081565b6000806002848154811061075f57fe5b60009182526020808320878452600380835260408086206001600160a01b03808b168852908552818720600590960290930191820154825482517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015292519398509596909590949316926370a0823192602480840193829003018186803b1580156107f057600080fd5b505afa158015610804573d6000803e3d6000fd5b505050506040513d602081101561081a57600080fd5b505160028501549091504211801561083157508015155b15610894576000610846856002015442610540565b9050600061086d60045461086788600101548561140990919063ffffffff16565b906112eb565b905061088f6108888461086784670de0b6b3a7640000611409565b85906113af565b935050505b6108c583600101546108bf670de0b6b3a764000061086786886000015461140990919063ffffffff16565b90611352565b979650505050505050565b60003390506000600284815481106108e457fe5b600091825260208083208784526003825260408085206001600160a01b0388168652909252922080546005909202909201925084111561096b576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b61097485610a8c565b60006109a582600101546108bf670de0b6b3a76400006108678760030154876000015461140990919063ffffffff16565b905080156109f7576109b78482611462565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b8415610a21578154610a099086611352565b82558254610a21906001600160a01b03168587611531565b60038301548254610a3f91670de0b6b3a76400009161086791611409565b600183015560408051868152905187916001600160a01b038716917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505050505050565b600060028281548110610a9b57fe5b9060005260206000209060050201905080600201544211610abc5750610c1e565b8054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610b1f57600080fd5b505afa158015610b33573d6000803e3d6000fd5b505050506040513d6020811015610b4957600080fd5b5051905080610b5f575042600290910155610c1e565b600482015460ff16610bae57600480830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558301549054610baa916113af565b6004555b60045415610c15576000610bc6836002015442610540565b90506000610be760045461086786600101548561140990919063ffffffff16565b9050610c0d610c028461086784670de0b6b3a7640000611409565b6003860154906113af565b600385015550505b50426002909101555b50565b600060028281548110610c3057fe5b600091825260208083208584526003825260408085203380875293528420805485825560018201959095556005909302018054909450919291610c80916001600160a01b03919091169083611531565b604080518281529051859133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350505050565b6000546001600160a01b03163314610d065760405162461bcd60e51b815260040180806020018281038252602b815260200180611a04602b913960400191505060405180910390fd5b60085462278d0001421015610e16576001546001600160a01b0384811691161415610d78576040805162461bcd60e51b815260206004820152600660248201527f216c696272610000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60025460005b81811015610e1357600060028281548110610d9557fe5b6000918252602090912060059091020180549091506001600160a01b0387811691161415610e0a576040805162461bcd60e51b815260206004820152600b60248201527f21706f6f6c2e746f6b656e000000000000000000000000000000000000000000604482015290519081900360640190fd5b50600101610d7e565b50505b610e2a6001600160a01b0384168284611531565b505050565b6000546001600160a01b031681565b60055481565b60025460005b81811015610e6357610e5b81610a8c565b600101610e4a565b5050565b60036020908152600092835260408084209091529082529020805460019091015482565b6000546001600160a01b03163314610ed45760405162461bcd60e51b815260040180806020018281038252602b815260200180611a04602b913960400191505060405180910390fd5b610edd836115b1565b8115610eeb57610eeb610e44565b600554421015610f175780610f035750600554610f12565b600554811015610f1257506005545b610f2b565b801580610f2357504281105b15610f2b5750425b600060055482111580610f3e5750428211155b6040805160a0810182526001600160a01b03878116825260208201898152928201868152600060608401818152861580156080870190815260028054600181018255945295517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600590940293840180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919096161790945594517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad082015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad184015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad290920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016921515929092179091559091506110b7576004546110b390866113af565b6004555b5050505050565b600681815481106110cb57fe5b600091825260209091200154905081565b6001546001600160a01b031681565b6000546001600160a01b031633146111345760405162461bcd60e51b815260040180806020018281038252602b815260200180611a04602b913960400191505060405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6007816003811061074857fe5b600033905060006002848154811061118f57fe5b600091825260208083208784526003825260408085206001600160a01b03881686529092529220600590910290910191506111c985610a8c565b80541561125557600061120182600101546108bf670de0b6b3a76400006108678760030154876000015461140990919063ffffffff16565b90508015611253576112138482611462565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b505b8315611281578154611272906001600160a01b031684308761164b565b805461127e90856113af565b81555b6003820154815461129f91670de0b6b3a76400009161086791611409565b600182015560408051858152905186916001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b6000808211611341576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161134a57fe5b049392505050565b6000828211156113a9576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015610732576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008261141857506000610735565b8282028284828161142557fe5b04146107325760405162461bcd60e51b81526004018080602001828103825260218152602001806119e36021913960400191505060405180910390fd5b600154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156114c657600080fd5b505afa1580156114da573d6000803e3d6000fd5b505050506040513d60208110156114f057600080fd5b505190508015610e2a578082111561151e57600154611519906001600160a01b03168483611531565b610e2a565b600154610e2a906001600160a01b031684845b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e2a9084906116d9565b60025460005b81811015610e2a57826001600160a01b0316600282815481106115d657fe5b60009182526020909120600590910201546001600160a01b03161415611643576040805162461bcd60e51b815260206004820152601f60248201527f4c69627261526577617264506f6f6c3a206578697374696e6720706f6f6c3f00604482015290519081900360640190fd5b6001016115b7565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526116d39085906116d9565b50505050565b606061172e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661178a9092919063ffffffff16565b805190915015610e2a5780806020019051602081101561174d57600080fd5b5051610e2a5760405162461bcd60e51b815260040180806020018281038252602a815260200180611a2f602a913960400191505060405180910390fd5b606061179984846000856117a3565b90505b9392505050565b6060824710156117e45760405162461bcd60e51b81526004018080602001828103825260268152602001806119bd6026913960400191505060405180910390fd5b6117ed85611912565b61183e576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061189b57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161185e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146118fd576040519150601f19603f3d011682016040523d82523d6000602084013e611902565b606091505b50915091506108c5828286611918565b3b151590565b6060831561192757508161179c565b8251156119375782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611981578181015183820152602001611969565b50505050905090810190601f1680156119ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774c69627261526577617264506f6f6c3a2063616c6c6572206973206e6f7420746865206f70657261746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220b798862bcd0f29452e02416abc6bf9a65a482220443f4ecf1ed09431f2bf3d1264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7451,
        "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
        "label": "operator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7469,
        "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
        "label": "libra",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1180"
      },
      {
        "astId": 7472,
        "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
        "label": "poolInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(PoolInfo)7467_storage)dyn_storage"
      },
      {
        "astId": 7478,
        "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
        "label": "userInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7456_storage))"
      },
      {
        "astId": 7481,
        "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7483,
        "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
        "label": "poolStartTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7489,
        "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
        "label": "epochTotalRewards",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7493,
        "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
        "label": "epochEndTimes",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)3_storage"
      },
      {
        "astId": 7497,
        "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
        "label": "epochLibraPerSecond",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)3_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)7467_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)7467_storage",
        "encoding": "dynamic_array",
        "label": "struct LibraRewardPool.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1180": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)7456_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibraRewardPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)7456_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7456_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct LibraRewardPool.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)7456_storage)"
      },
      "t_struct(PoolInfo)7467_storage": {
        "encoding": "inplace",
        "label": "struct LibraRewardPool.PoolInfo",
        "members": [
          {
            "astId": 7458,
            "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1180"
          },
          {
            "astId": 7460,
            "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7462,
            "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7464,
            "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
            "label": "accLibraPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7466,
            "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
            "label": "isStarted",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)7456_storage": {
        "encoding": "inplace",
        "label": "struct LibraRewardPool.UserInfo",
        "members": [
          {
            "astId": 7453,
            "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7455,
            "contract": "contracts/distribution/LibraRewardPool.sol:LibraRewardPool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}