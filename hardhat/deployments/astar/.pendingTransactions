{
  "0x65ee98beaced86ea35fd2dd65a107849c4a0b8c1fe7d756f6500616f226b4f86": {
    "name": "Treasury",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Treasury",
      "sourceName": "contracts/Treasury.sol",
      "abi": [
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "seigniorage",
              "type": "uint256"
            }
          ],
          "name": "BoardroomFunded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "libraAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "bondAmount",
              "type": "uint256"
            }
          ],
          "name": "BoughtBonds",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "bondAmount",
              "type": "uint256"
            }
          ],
          "name": "BurnedBonds",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "seigniorage",
              "type": "uint256"
            }
          ],
          "name": "DaoFundFunded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "seigniorage",
              "type": "uint256"
            }
          ],
          "name": "DevFundFunded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "executor",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "at",
              "type": "uint256"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "seigniorage",
              "type": "uint256"
            }
          ],
          "name": "InsuranceFundFunded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "libraAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "bondAmount",
              "type": "uint256"
            }
          ],
          "name": "RedeemedBonds",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "seigniorage",
              "type": "uint256"
            }
          ],
          "name": "TreasuryFunded",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "PERIOD",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "allocateSeigniorage",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "boardroom",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "boardroomAllocateSeigniorage",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            }
          ],
          "name": "boardroomGovernanceRecoverUnsupported",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_withdrawLockupEpochs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_rewardLockupEpochs",
              "type": "uint256"
            }
          ],
          "name": "boardroomSetLockUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address"
            }
          ],
          "name": "boardroomSetOperator",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "bondDepletionFloorPercent",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "bondSupplyExpansionPercent",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "bootstrapEpochs",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "bootstrapSupplyExpansionPercent",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_libraAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetPrice",
              "type": "uint256"
            }
          ],
          "name": "buyBonds",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "daoFund",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "daoFundSharedPercent",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "devFund",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "devFundSharedPercent",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "discountPercent",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "epoch",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "epochSupplyContractionLeft",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "excludedFromTotalSupply",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getBondDiscountRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "_rate",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getBondPremiumRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "_rate",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getBurnableLibraLeft",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "_burnableLibraLeft",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getLibraCirculatingSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getLibraPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "libraPrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getLibraUpdatedPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "_libraPrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getRedeemableBonds",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "_redeemableBonds",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getReserve",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            }
          ],
          "name": "governanceRecoverUnsupported",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_libra",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_lbond",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_lshare",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_libraOracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_boardroom",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_genesisPool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_startTime",
              "type": "uint256"
            }
          ],
          "name": "initialize",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "initialized",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "insuranceFund",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "insuranceFundSharedPercent",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "isInitialized",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lbond",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "libra",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "libraOracle",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "libraPriceCeiling",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "libraPriceOne",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lshare",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "maxDebtRatioPercent",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "maxDiscountRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "maxExpansionTiers",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "maxPremiumRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "maxSupplyContractionPercent",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "maxSupplyExpansionPercent",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "mintingFactorForPayingDebt",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "nextEpochPoint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "operator",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "premiumPercent",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "premiumThreshold",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "previousEpochLibraPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_bondAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetPrice",
              "type": "uint256"
            }
          ],
          "name": "redeemBonds",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "seigniorageExpansionFloorPercent",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "seigniorageSaved",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_boardroom",
              "type": "address"
            }
          ],
          "name": "setBoardroom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_bondDepletionFloorPercent",
              "type": "uint256"
            }
          ],
          "name": "setBondDepletionFloorPercent",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_bondSupplyExpansionPercent",
              "type": "uint256"
            }
          ],
          "name": "setBondSupplyExpansionPercent",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_bootstrapEpochs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_bootstrapSupplyExpansionPercent",
              "type": "uint256"
            }
          ],
          "name": "setBootstrap",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_discountPercent",
              "type": "uint256"
            }
          ],
          "name": "setDiscountPercent",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_daoFund",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_daoFundSharedPercent",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_devFund",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_devFundSharedPercent",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_insuranceFund",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_insuranceFundSharedPercent",
              "type": "uint256"
            }
          ],
          "name": "setExtraFunds",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_libraOracle",
              "type": "address"
            }
          ],
          "name": "setLibraOracle",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_libraPriceCeiling",
              "type": "uint256"
            }
          ],
          "name": "setLibraPriceCeiling",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_maxDebtRatioPercent",
              "type": "uint256"
            }
          ],
          "name": "setMaxDebtRatioPercent",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_maxDiscountRate",
              "type": "uint256"
            }
          ],
          "name": "setMaxDiscountRate",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "_index",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256"
            }
          ],
          "name": "setMaxExpansionTiersEntry",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_maxPremiumRate",
              "type": "uint256"
            }
          ],
          "name": "setMaxPremiumRate",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_maxSupplyContractionPercent",
              "type": "uint256"
            }
          ],
          "name": "setMaxSupplyContractionPercent",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_maxSupplyExpansionPercent",
              "type": "uint256"
            }
          ],
          "name": "setMaxSupplyExpansionPercents",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_mintingFactorForPayingDebt",
              "type": "uint256"
            }
          ],
          "name": "setMintingFactorForPayingDebt",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address"
            }
          ],
          "name": "setOperator",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_premiumPercent",
              "type": "uint256"
            }
          ],
          "name": "setPremiumPercent",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_premiumThreshold",
              "type": "uint256"
            }
          ],
          "name": "setPremiumThreshold",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "_index",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256"
            }
          ],
          "name": "setSupplyTiersEntry",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "startTime",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "supplyTiers",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "",
      "deployedBytecode": "",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "evm": {
        "bytecode": {
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH1 0x0 PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x4 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4DCF DUP1 PUSH2 0x37 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x514 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x82CAD838 GT PUSH2 0x2A1 JUMPI DUP1 PUSH4 0xB4D1D795 GT PUSH2 0x16B JUMPI DUP1 PUSH4 0xD98F2495 GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xF245245A GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xF921EB33 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xF921EB33 EQ PUSH2 0xAEA JUMPI DUP1 PUSH4 0xFCB6F008 EQ PUSH2 0xB07 JUMPI DUP1 PUSH4 0xFEC3A601 EQ PUSH2 0xB0F JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xF245245A EQ PUSH2 0xAAA JUMPI DUP1 PUSH4 0xF8CD4D72 EQ PUSH2 0xAC7 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xDFE2F9EE GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xDFE2F9EE EQ PUSH2 0xA92 JUMPI DUP1 PUSH4 0xE90B2454 EQ PUSH2 0xA9A JUMPI DUP1 PUSH4 0xF14698DE EQ PUSH2 0xAA2 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xD98F2495 EQ PUSH2 0xA82 JUMPI DUP1 PUSH4 0xDA3ED419 EQ PUSH2 0xA8A JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xC5967C26 GT PUSH2 0x13A JUMPI DUP1 PUSH4 0xC8F987F3 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0xC8F987F3 EQ PUSH2 0xA37 JUMPI DUP1 PUSH4 0xCECCE38E EQ PUSH2 0xA3F JUMPI DUP1 PUSH4 0xD4B14944 EQ PUSH2 0xA5C JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xC5967C26 EQ PUSH2 0xA27 JUMPI DUP1 PUSH4 0xC8412D02 EQ PUSH2 0xA2F JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xB4D1D795 EQ PUSH2 0xA07 JUMPI DUP1 PUSH4 0xB7902303 EQ PUSH2 0xA0F JUMPI DUP1 PUSH4 0xB8A878F9 EQ PUSH2 0xA17 JUMPI DUP1 PUSH4 0xBD20F9AF EQ PUSH2 0xA1F JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x99820025 GT PUSH2 0x219 JUMPI DUP1 PUSH4 0xAED3BA6B GT PUSH2 0x1CD JUMPI DUP1 PUSH4 0xB3AB15FB GT PUSH2 0x1B2 JUMPI DUP1 PUSH4 0xB3AB15FB EQ PUSH2 0x9B3 JUMPI DUP1 PUSH4 0xB3FFC777 EQ PUSH2 0x9D9 JUMPI DUP1 PUSH4 0xB40D7365 EQ PUSH2 0x9FF JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xAED3BA6B EQ PUSH2 0x985 JUMPI DUP1 PUSH4 0xB06CE14A EQ PUSH2 0x98D JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xA0487EEA GT PUSH2 0x1FE JUMPI DUP1 PUSH4 0xA0487EEA EQ PUSH2 0x915 JUMPI DUP1 PUSH4 0xA204452B EQ PUSH2 0x932 JUMPI DUP1 PUSH4 0xA3EC30FE EQ PUSH2 0x94F JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x99820025 EQ PUSH2 0x8F0 JUMPI DUP1 PUSH4 0x9F7BE325 EQ PUSH2 0x90D JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x8D934F74 GT PUSH2 0x270 JUMPI DUP1 PUSH4 0x91BBFED5 GT PUSH2 0x255 JUMPI DUP1 PUSH4 0x91BBFED5 EQ PUSH2 0x88A JUMPI DUP1 PUSH4 0x940E6064 EQ PUSH2 0x8AD JUMPI DUP1 PUSH4 0x98B762A1 EQ PUSH2 0x8D3 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x8D934F74 EQ PUSH2 0x87A JUMPI DUP1 PUSH4 0x900CF0CF EQ PUSH2 0x882 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x82CAD838 EQ PUSH2 0x830 JUMPI DUP1 PUSH4 0x860C3177 EQ PUSH2 0x84D JUMPI DUP1 PUSH4 0x874106CC EQ PUSH2 0x855 JUMPI DUP1 PUSH4 0x8C664DB6 EQ PUSH2 0x85D JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x4013A08E GT PUSH2 0x3E2 JUMPI DUP1 PUSH4 0x58A69833 GT PUSH2 0x35A JUMPI DUP1 PUSH4 0x5B756179 GT PUSH2 0x30E JUMPI DUP1 PUSH4 0x72C054F9 GT PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x72C054F9 EQ PUSH2 0x818 JUMPI DUP1 PUSH4 0x78E97925 EQ PUSH2 0x820 JUMPI DUP1 PUSH4 0x81D11EAF EQ PUSH2 0x828 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x5B756179 EQ PUSH2 0x808 JUMPI DUP1 PUSH4 0x5E02C51E EQ PUSH2 0x810 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x59BF5D39 GT PUSH2 0x33F JUMPI DUP1 PUSH4 0x59BF5D39 EQ PUSH2 0x7F0 JUMPI DUP1 PUSH4 0x5A0FC79C EQ PUSH2 0x7F8 JUMPI DUP1 PUSH4 0x5B023168 EQ PUSH2 0x800 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x58A69833 EQ PUSH2 0x7AD JUMPI DUP1 PUSH4 0x591663E1 EQ PUSH2 0x7D3 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x499F3F19 GT PUSH2 0x3B1 JUMPI DUP1 PUSH4 0x54F04A11 GT PUSH2 0x396 JUMPI DUP1 PUSH4 0x54F04A11 EQ PUSH2 0x77A JUMPI DUP1 PUSH4 0x55EBDEEF EQ PUSH2 0x79D JUMPI DUP1 PUSH4 0x570CA735 EQ PUSH2 0x7A5 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x499F3F19 EQ PUSH2 0x727 JUMPI DUP1 PUSH4 0x54575AF4 EQ PUSH2 0x744 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x4013A08E EQ PUSH2 0x6D6 JUMPI DUP1 PUSH4 0x40AF7BA5 EQ PUSH2 0x6DE JUMPI DUP1 PUSH4 0x42679903 EQ PUSH2 0x6FB JUMPI DUP1 PUSH4 0x4390D2A8 EQ PUSH2 0x703 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x154EC2DB GT PUSH2 0x490 JUMPI DUP1 PUSH4 0x22F832CD GT PUSH2 0x444 JUMPI DUP1 PUSH4 0x2E9C7B65 GT PUSH2 0x429 JUMPI DUP1 PUSH4 0x2E9C7B65 EQ PUSH2 0x6BE JUMPI DUP1 PUSH4 0x349AA30A EQ PUSH2 0x6C6 JUMPI DUP1 PUSH4 0x392E53CD EQ PUSH2 0x6CE JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x22F832CD EQ PUSH2 0x6AE JUMPI DUP1 PUSH4 0x29EF1919 EQ PUSH2 0x6B6 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x16F5FF17 GT PUSH2 0x475 JUMPI DUP1 PUSH4 0x16F5FF17 EQ PUSH2 0x656 JUMPI DUP1 PUSH4 0x196DD862 EQ PUSH2 0x65E JUMPI DUP1 PUSH4 0x1B0FB35F EQ PUSH2 0x666 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x154EC2DB EQ PUSH2 0x61D JUMPI DUP1 PUSH4 0x158EF93E EQ PUSH2 0x63A JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xCF60175 GT PUSH2 0x4E7 JUMPI DUP1 PUSH4 0xF25CDE5 GT PUSH2 0x4CC JUMPI DUP1 PUSH4 0xF25CDE5 EQ PUSH2 0x59C JUMPI DUP1 PUSH4 0x118EBBF9 EQ PUSH2 0x5A4 JUMPI DUP1 PUSH4 0x1460E390 EQ PUSH2 0x5C7 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xCF60175 EQ PUSH2 0x58C JUMPI DUP1 PUSH4 0xDB7EB0B EQ PUSH2 0x594 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x1A93783 EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0x3BE7E76 EQ PUSH2 0x538 JUMPI DUP1 PUSH4 0x4E5C7B1 EQ PUSH2 0x552 JUMPI DUP1 PUSH4 0xB5BCEC7 EQ PUSH2 0x56F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xB17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x540 PUSH2 0xBE1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xBE7 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x585 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xCB6 JUMP JUMPDEST PUSH2 0x540 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x540 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x540 PUSH2 0xEA6 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xEAC JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x5DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x80 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0xA0 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0xC0 ADD CALLDATALOAD PUSH2 0x153F JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x633 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x18F5 JUMP JUMPDEST PUSH2 0x642 PUSH2 0x199A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x540 PUSH2 0x19BB JUMP JUMPDEST PUSH2 0x540 PUSH2 0x1AAF JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x67C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x80 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0xA0 ADD CALLDATALOAD PUSH2 0x1C28 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x1EE9 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x1EEF JUMP JUMPDEST PUSH2 0x540 PUSH2 0x1EF5 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x1EFB JUMP JUMPDEST PUSH2 0x642 PUSH2 0x1F01 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x1F22 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1F28 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0x70B PUSH2 0x1FD3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1FE2 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x75A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x207F JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x220C JUMP JUMPDEST PUSH2 0x540 PUSH2 0x298B JUMP JUMPDEST PUSH2 0x70B PUSH2 0x2991 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x29A0 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x2A18 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x2ACB JUMP JUMPDEST PUSH2 0x540 PUSH2 0x2AD1 JUMP JUMPDEST PUSH2 0x70B PUSH2 0x2AD7 JUMP JUMPDEST PUSH2 0x536 PUSH2 0x2AE6 JUMP JUMPDEST PUSH2 0x70B PUSH2 0x31CE JUMP JUMPDEST PUSH2 0x540 PUSH2 0x31DD JUMP JUMPDEST PUSH2 0x540 PUSH2 0x32AE JUMP JUMPDEST PUSH2 0x540 PUSH2 0x32B4 JUMP JUMPDEST PUSH2 0x70B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x846 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x32BA JUMP JUMPDEST PUSH2 0x540 PUSH2 0x32E1 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x32E7 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x873 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x32ED JUMP JUMPDEST PUSH2 0x70B PUSH2 0x33A0 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x33AF JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x33B5 JUMP JUMPDEST PUSH2 0x642 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x34AD JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x35C9 JUMP JUMPDEST PUSH2 0x540 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x906 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3617 JUMP JUMPDEST PUSH2 0x70B PUSH2 0x3635 JUMP JUMPDEST PUSH2 0x540 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x92B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3644 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x948 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3651 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x369F JUMP JUMPDEST PUSH2 0x70B PUSH2 0x377B JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x378A JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x383A JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x38B2 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x392A JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3A31 JUMP JUMPDEST PUSH2 0x70B PUSH2 0x3A37 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3A46 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3A4C JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3AC7 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3AF1 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3AF7 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3AFD JUMP JUMPDEST PUSH2 0x642 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x3BAF JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3CB2 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3CB8 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3CBE JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3CC4 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3CCA JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xAC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3CD0 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xADD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x3D1E JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3DF0 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3EBB JUMP JUMPDEST PUSH2 0x70B PUSH2 0x3EC1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB60 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x97FFE1D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x97FFE1D7 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBDA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x22 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC30 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC SLOAD DUP2 LT ISZERO PUSH2 0xC71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B00 PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x96 DUP2 GT ISZERO PUSH2 0xCB1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B2B PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1C SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCFF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA DUP2 LT ISZERO DUP1 ISZERO PUSH2 0xD12 JUMPI POP PUSH2 0x3E8 DUP2 GT ISZERO JUMPDEST PUSH2 0xD4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C47 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x10 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD5D PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP PUSH1 0xB SLOAD DUP2 GT PUSH2 0xE00 JUMPI PUSH1 0x1B SLOAD PUSH2 0xD79 JUMPI PUSH1 0xB SLOAD SWAP2 POP PUSH2 0xE00 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA2 DUP3 PUSH2 0xD9C PUSH8 0xDE0B6B3A7640000 PUSH1 0xB SLOAD PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x3F30 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDCD PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x1B SLOAD PUSH2 0xDC7 PUSH1 0xB SLOAD DUP8 PUSH2 0x3F97 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x3ED0 JUMP JUMPDEST PUSH1 0xB SLOAD SWAP1 SWAP2 POP PUSH2 0xDDD SWAP1 DUP3 PUSH2 0x3FF4 JUMP JUMPDEST SWAP4 POP PUSH1 0x0 PUSH1 0x19 SLOAD GT DUP1 ISZERO PUSH2 0xDF2 JUMPI POP PUSH1 0x19 SLOAD DUP5 GT JUMPDEST ISZERO PUSH2 0xDFD JUMPI PUSH1 0x19 SLOAD SWAP4 POP JUMPDEST POP POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE0F PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP PUSH1 0xC SLOAD DUP2 GT ISZERO PUSH2 0xE00 JUMPI PUSH1 0x0 PUSH2 0xE39 PUSH1 0x64 PUSH2 0xD9C PUSH1 0x1C SLOAD PUSH1 0xB SLOAD PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT PUSH2 0xE9B JUMPI PUSH1 0x0 PUSH2 0xE65 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x1D SLOAD PUSH2 0xDC7 PUSH1 0xB SLOAD DUP9 PUSH2 0x3F97 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xB SLOAD SWAP1 SWAP2 POP PUSH2 0xE75 SWAP1 DUP3 PUSH2 0x3FF4 JUMP JUMPDEST SWAP4 POP PUSH1 0x0 PUSH1 0x1A SLOAD GT DUP1 ISZERO PUSH2 0xE8A JUMPI POP PUSH1 0x1A SLOAD DUP5 GT JUMPDEST ISZERO PUSH2 0xE95 JUMPI PUSH1 0x1A SLOAD SWAP4 POP JUMPDEST POP PUSH2 0xEA1 JUMP JUMPDEST PUSH1 0xB SLOAD SWAP3 POP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH2 0xEB4 PUSH2 0x404E JUMP JUMPDEST ISZERO PUSH2 0xEF0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4CE6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEF8 PUSH2 0x406D JUMP JUMPDEST ISZERO PUSH2 0xF34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4CE6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD TIMESTAMP LT ISZERO PUSH2 0xF8B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A206E6F7420737461727465642079657400000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xFF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x1087 JUMPI POP PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1050 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1064 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x107A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x1109 JUMPI POP PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x10FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x118B JUMPI POP PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1168 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x117E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x11DC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A206E656564206D6F7265207065726D697373696F6E0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x121B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4A9B PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1225 PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x127B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A204C49425241207072696365206D6F7665640000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xC SLOAD DUP2 GT PUSH2 0x12BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x33 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B9A PUSH1 0x33 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12C5 PUSH2 0xE04 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x131C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A20696E76616C696420626F6E6420726174650000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1334 PUSH8 0xDE0B6B3A7640000 PUSH2 0xD9C DUP8 DUP6 PUSH2 0x3ED0 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD SWAP3 SWAP4 POP DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x139D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT ISZERO PUSH2 0x1406 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B75 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x141E PUSH2 0x1415 PUSH1 0xD SLOAD DUP4 PUSH2 0x408C JUMP JUMPDEST PUSH1 0xD SLOAD SWAP1 PUSH2 0x3F97 JUMP JUMPDEST PUSH1 0xD SSTORE PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x79CC679000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x79CC6790 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x148D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x6 SLOAD PUSH2 0x14BD SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP CALLER DUP4 PUSH2 0x40A2 JUMP JUMPDEST PUSH2 0x14C5 PUSH2 0x4122 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE DUP2 MLOAD CALLER SWAP3 PUSH32 0x51E0D16595CABC591E64DA08E45BB223577E5B9A39CD947B4DDC3472B2DD8878 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP NUMBER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 ORIGIN DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE CALLER DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x15AF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A20616C726561647920696E697469616C697A6564000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x7 DUP1 SLOAD DUP3 AND DUP10 DUP5 AND OR SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD DUP3 AND DUP9 DUP5 AND OR SWAP1 SSTORE PUSH1 0xA DUP1 SLOAD DUP3 AND DUP8 DUP5 AND OR SWAP1 SSTORE PUSH1 0x9 DUP1 SLOAD SWAP1 SWAP2 AND SWAP2 DUP6 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH8 0xDE0B6B3A7640000 PUSH1 0xB DUP2 SWAP1 SSTORE PUSH2 0x1637 SWAP1 PUSH1 0x64 SWAP1 PUSH2 0xD9C SWAP1 PUSH1 0x65 PUSH2 0x3ED0 JUMP JUMPDEST PUSH1 0xC SSTORE PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD DUP3 MSTORE SWAP2 DUP3 MSTORE PUSH10 0x69E10DE76676D0800000 PUSH1 0x20 DUP4 ADD MSTORE PUSH10 0xD3C21BCECCEDA1000000 SWAP1 DUP3 ADD MSTORE PUSH11 0x13DA329B6336471800000 PUSH1 0x60 DUP3 ADD MSTORE PUSH11 0x1A784379D99DB42000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH11 0x422CA8B0A00A425000000 PUSH1 0xA0 DUP3 ADD MSTORE PUSH11 0x84595161401484A000000 PUSH1 0xC0 DUP3 ADD MSTORE PUSH11 0x108B2A2C28029094000000 PUSH1 0xE0 DUP3 ADD MSTORE PUSH11 0x295BE96E64066972000000 PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x1733 SWAP1 PUSH1 0xE SWAP1 PUSH1 0x9 PUSH2 0x49EE JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD DUP3 MSTORE PUSH2 0x1C2 DUP2 MSTORE PUSH2 0x190 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x15E SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x12C PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xFA PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xC8 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x96 PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7D PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x64 PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x1790 SWAP1 PUSH1 0xF SWAP1 PUSH1 0x9 PUSH2 0x4A44 JUMP JUMPDEST POP PUSH2 0x190 PUSH1 0x10 SSTORE PUSH2 0x2710 PUSH1 0x11 SSTORE PUSH2 0xDAC PUSH1 0x12 DUP2 SWAP1 SSTORE PUSH2 0x12C PUSH1 0x13 SSTORE PUSH1 0x14 SSTORE PUSH2 0x1F4 PUSH1 0x15 DUP2 SWAP1 SSTORE PUSH1 0x6E PUSH1 0x1C SSTORE PUSH2 0x1B58 PUSH1 0x1D SSTORE PUSH1 0xC PUSH1 0x16 SSTORE PUSH1 0x17 SSTORE PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x182D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1841 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1857 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0xD SSTORE PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH21 0x10000000000000000000000000000000000000000 OR AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP1 MLOAD NUMBER DUP2 MSTORE SWAP1 MLOAD PUSH32 0x25FF68DD81B34665B5BA7E553EE5511BF6812E12ADB4A7E2C0D9E26B3099CE79 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x193E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4E20 DUP2 GT ISZERO PUSH2 0x1995 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5F646973636F756E7450657263656E74206973206F7665722032303025000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1B SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x6808A12800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH8 0xDE0B6B3A7640000 PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP4 SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0x6808A128 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1A5B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 JUMPDEST PUSH2 0x1A96 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x37 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4AC9 PUSH1 0x37 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH18 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x18160DDD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP4 SWAP2 DUP4 SWAP2 PUSH4 0x18160DDD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B25 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1B3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF DUP3 AND LT ISZERO PUSH2 0x1C15 JUMPI PUSH2 0x1C0B DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0x5 DUP5 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x1B72 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BEC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1C02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD DUP4 SWAP1 PUSH2 0x3FF4 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1B43 JUMP JUMPDEST POP PUSH2 0x1C20 DUP3 DUP3 PUSH2 0x3F97 JUMP JUMPDEST SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1C71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x1CCE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7A65726F00000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xBB8 DUP6 GT ISZERO PUSH2 0x1D25 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F7574206F662072616E67650000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1D82 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7A65726F00000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x3E8 DUP4 GT ISZERO PUSH2 0x1DD9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F7574206F662072616E67650000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1E36 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7A65726F00000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x3E8 DUP2 GT ISZERO PUSH2 0x1E8D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F7574206F662072616E67650000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1F DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x20 SWAP6 SWAP1 SWAP6 SSTORE PUSH1 0x21 DUP1 SLOAD DUP7 AND SWAP5 DUP8 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE PUSH1 0x22 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x23 DUP1 SLOAD SWAP1 SWAP4 AND SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE PUSH1 0x24 SSTORE JUMP JUMPDEST PUSH1 0x12 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1B SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1A SLOAD DUP2 JUMP JUMPDEST PUSH1 0x15 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1E SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1F71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4E20 DUP2 GT ISZERO PUSH2 0x1FC8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5F7072656D69756D50657263656E74206973206F766572203230302500000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1D SSTORE JUMP JUMPDEST PUSH1 0x18 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x21 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x202B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2710 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x203F JUMPI POP PUSH2 0x4E20 DUP2 GT ISZERO JUMPDEST PUSH2 0x207A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C1E PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1E SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x20C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x212B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6C69627261000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x2190 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x626F6E6400000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x21F3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7368617265000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2207 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP3 DUP5 PUSH2 0x40A2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2214 PUSH2 0x404E JUMP JUMPDEST ISZERO PUSH2 0x2250 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4CE6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2258 PUSH2 0x406D JUMP JUMPDEST ISZERO PUSH2 0x2294 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4CE6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD TIMESTAMP LT ISZERO PUSH2 0x22EB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A206E6F7420737461727465642079657400000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x232F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2343 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x23E7 JUMPI POP PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x23C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x23DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x2469 JUMPI POP PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2446 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x245C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x24EB JUMPI POP PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x24DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x253C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A206E656564206D6F7265207065726D697373696F6E0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x257B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4BEE PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2585 PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x25DB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A204C49425241207072696365206D6F7665640000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xB SLOAD DUP2 LT PUSH2 0x261B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x33 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B9A PUSH1 0x33 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD DUP4 GT ISZERO PUSH2 0x265C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4D42 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2666 PUSH2 0xD52 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x26BD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A20696E76616C696420626F6E6420726174650000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x26D5 PUSH8 0xDE0B6B3A7640000 PUSH2 0xD9C DUP8 DUP6 PUSH2 0x3ED0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26E1 PUSH2 0x1AAF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2769 DUP4 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2737 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x274B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 PUSH2 0x3FF4 JUMP JUMPDEST SWAP1 POP PUSH2 0x2786 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x14 SLOAD DUP6 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x27DA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F766572206D6178206465627420726174696F00000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x79CC679000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP11 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x79CC6790 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2846 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x285A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 POP PUSH4 0x40C10F19 SWAP3 POP PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x28DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x28F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x4 SLOAD PUSH2 0x2904 SWAP1 DUP9 PUSH2 0x3F97 JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH2 0x290F PUSH2 0x4122 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE DUP2 MLOAD CALLER SWAP3 PUSH32 0x73017F1B70789E2E66759EEB3C7EC11F59E6EEDB55D921CFAEC5410DD42A4799 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP NUMBER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 ORIGIN DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE CALLER DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x29E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2A61 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3E8 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x2A75 JUMPI POP PUSH2 0x2710 DUP2 GT ISZERO JUMPDEST PUSH2 0x2AC6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F7574206F662072616E67650000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x14 SSTORE JUMP JUMPDEST PUSH1 0xD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2AEE PUSH2 0x404E JUMP JUMPDEST ISZERO PUSH2 0x2B2A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4CE6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2B32 PUSH2 0x406D JUMP JUMPDEST ISZERO PUSH2 0x2B6E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4CE6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD TIMESTAMP LT ISZERO PUSH2 0x2BC5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A206E6F7420737461727465642079657400000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2BCD PUSH2 0x3AC7 JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0x2C21 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A206E6F74206F70656E6564207965740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2C8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x2D1D JUMPI POP PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CFA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2D10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x2D9F JUMPI POP PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D7C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2D92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x2E21 JUMPI POP PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2DEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2DFE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2E14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x2E72 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A206E656564206D6F7265207065726D697373696F6E0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2E7A PUSH2 0x4122 JUMP JUMPDEST PUSH2 0x2E82 PUSH2 0x3A4C JUMP JUMPDEST PUSH1 0x18 SSTORE PUSH1 0xD SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2E9D SWAP1 PUSH2 0x2E97 PUSH2 0x1AAF JUMP JUMPDEST SWAP1 PUSH2 0x3F97 JUMP JUMPDEST SWAP1 POP PUSH1 0x16 SLOAD PUSH1 0x3 SLOAD LT ISZERO PUSH2 0x2ED3 JUMPI PUSH2 0x2ECE PUSH2 0x2EC9 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x17 SLOAD DUP6 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4186 JUMP JUMPDEST PUSH2 0x3152 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x18 SLOAD GT ISZERO PUSH2 0x3152 JUMPI PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x18160DDD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x18160DDD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2F67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0xB SLOAD PUSH1 0x18 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x2F7E SWAP2 PUSH2 0x3F97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2F98 PUSH6 0x5AF3107A4000 PUSH2 0xDC7 DUP9 PUSH2 0x452D JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0x2FA6 JUMPI DUP1 SWAP4 POP JUMPDEST PUSH2 0x2FC1 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x11 SLOAD DUP9 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xD SLOAD LT PUSH2 0x2FE6 JUMPI PUSH2 0x2FDF PUSH8 0xDE0B6B3A7640000 PUSH2 0xD9C DUP9 DUP8 PUSH2 0x3ED0 JUMP JUMPDEST SWAP2 POP PUSH2 0x3052 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FFE PUSH8 0xDE0B6B3A7640000 PUSH2 0xD9C DUP10 DUP9 PUSH2 0x3ED0 JUMP JUMPDEST SWAP1 POP PUSH2 0x301B PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x12 SLOAD DUP5 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP PUSH2 0x3027 DUP2 DUP5 PUSH2 0x3F97 JUMP JUMPDEST PUSH1 0x1E SLOAD SWAP1 SWAP5 POP ISZERO PUSH2 0x3050 JUMPI PUSH2 0x304D PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x1E SLOAD DUP8 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST DUP2 ISZERO PUSH2 0x3061 JUMPI PUSH2 0x3061 DUP3 PUSH2 0x4186 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x314C JUMPI PUSH1 0xD SLOAD PUSH2 0x3074 SWAP1 DUP5 PUSH2 0x3FF4 JUMP JUMPDEST PUSH1 0xD SSTORE PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x40C10F19 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x30F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x310E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD TIMESTAMP DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xF705142BF09F04297640495DDF7C59B7FD6F51894C5AEA9602D631CF05F0EFC2 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 JUMPDEST POP POP POP POP POP JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x3161 SWAP1 PUSH1 0x1 PUSH2 0x3FF4 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH1 0xC SLOAD PUSH2 0x316F PUSH2 0x3A4C JUMP JUMPDEST GT PUSH2 0x318D JUMPI PUSH2 0x3188 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x13 SLOAD PUSH2 0xDC7 PUSH2 0x1AAF JUMP JUMPDEST PUSH2 0x3190 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x4 SSTORE NUMBER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 ORIGIN DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE CALLER DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x31E8 PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP PUSH1 0xC SLOAD DUP2 GT ISZERO PUSH2 0xE00 JUMPI PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x326C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x3290 PUSH2 0xE04 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xDFD JUMPI PUSH2 0x1C20 DUP2 PUSH2 0xD9C DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0x3ED0 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x11 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x32C7 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x24 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x17 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3336 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F4 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x334A JUMPI POP PUSH2 0x2710 DUP2 GT ISZERO JUMPDEST PUSH2 0x339B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F7574206F662072616E67650000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x11 SSTORE JUMP JUMPDEST PUSH1 0x1F SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x33FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x78 DUP3 GT ISZERO PUSH2 0x3454 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5F626F6F74737472617045706F6368733A206F7574206F662072616E67650000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x3467 JUMPI POP PUSH2 0x3E8 DUP2 GT ISZERO JUMPDEST PUSH2 0x34A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4D6C PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x16 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x17 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x34F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 DUP4 PUSH1 0xFF AND LT PUSH2 0x353B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C6F PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP4 AND ISZERO PUSH2 0x356D JUMPI PUSH1 0xE PUSH1 0x1 DUP5 SUB PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x3557 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP3 GT PUSH2 0x356D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 DUP4 PUSH1 0xFF AND LT ISZERO PUSH2 0x35A2 JUMPI PUSH1 0xE DUP4 PUSH1 0x1 ADD PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x358C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP3 LT PUSH2 0x35A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0xE DUP5 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x35B3 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SSTORE POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3612 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x19 SSTORE JUMP JUMPDEST PUSH1 0xE DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3624 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xF DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3624 JUMPI INVALID JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x369A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1A SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x36E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x54575AF400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE DUP5 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x54575AF4 SWAP2 PUSH1 0x64 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x375E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3772 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x37D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xB3AB15FB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xB3AB15FB SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3883 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x38FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3935 PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP PUSH1 0xB SLOAD DUP2 GT PUSH2 0xE00 JUMPI PUSH1 0x0 PUSH2 0x394A PUSH2 0x1AAF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3969 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x14 SLOAD DUP6 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x39BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x39CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x39E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3A2A JUMPI PUSH1 0x0 PUSH2 0x39FD DUP4 DUP4 PUSH2 0x3F97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3A17 PUSH8 0xDE0B6B3A7640000 PUSH2 0xD9C DUP5 DUP10 PUSH2 0x3ED0 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A25 PUSH1 0x4 SLOAD DUP3 PUSH2 0x408C JUMP JUMPDEST SWAP7 POP POP POP JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x5460 DUP2 JUMP JUMPDEST PUSH1 0x23 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x19 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x3DDAC95300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH8 0xDE0B6B3A7640000 PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP4 SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0x3DDAC953 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3AEC PUSH2 0x3AE3 PUSH2 0x5460 PUSH1 0x3 SLOAD PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 PUSH2 0x3FF4 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1D SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1C SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3B46 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x3B59 JUMPI POP PUSH2 0x5DC DUP2 GT ISZERO JUMPDEST PUSH2 0x3BAA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F7574206F662072616E67650000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x13 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3BFB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 DUP4 PUSH1 0xFF AND LT PUSH2 0x3C3D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C6F PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x3C50 JUMPI POP PUSH2 0x3E8 DUP3 GT ISZERO JUMPDEST PUSH2 0x3CA1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5F76616C75653A206F7574206F662072616E6765000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0xF DUP5 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x35B3 JUMPI INVALID JUMPDEST PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x14 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x13 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x16 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3D19 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x15 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3D67 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x2FFAAA0900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x2FFAAA09 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3DE8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3E39 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB SLOAD DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x3E65 JUMPI POP PUSH2 0x3E61 PUSH1 0x64 PUSH2 0xD9C PUSH1 0x78 PUSH1 0xB SLOAD PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 GT ISZERO JUMPDEST PUSH2 0x3EB6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F7574206F662072616E67650000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xC SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3EDF JUMPI POP PUSH1 0x0 PUSH2 0x35C3 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x3EEC JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3F29 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4BCD PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x3F86 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x3F8F JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x3FEE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x3F29 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST NUMBER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 ORIGIN DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST NUMBER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x409B JUMPI DUP2 PUSH2 0x3F29 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x2207 SWAP1 DUP5 SWAP1 PUSH2 0x45A8 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA2E62045 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x4183 JUMPI POP PUSH1 0x1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x40C10F19 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4207 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x421D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x20 SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x4321 JUMPI PUSH2 0x4245 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x20 SLOAD DUP6 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1F SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD SWAP4 SWAP5 POP SWAP2 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x42CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x42E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD TIMESTAMP DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xCB3F34AAA3445B461E6DA5492DC89E5C257A59FA598131F3B6BBC97A3638E409 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 JUMPDEST PUSH1 0x22 SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x4423 JUMPI PUSH2 0x4347 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x22 SLOAD DUP7 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x21 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD SWAP4 SWAP5 POP SWAP2 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x43BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x43CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x43E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD TIMESTAMP DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xDC8B715B18523E58B7FD0DA53259DFA91EFD91DF4A854D94B136E3333A3B9395 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 JUMPDEST PUSH2 0x4431 DUP2 PUSH2 0x2E97 DUP6 DUP6 PUSH2 0x3F97 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x6 SLOAD SWAP2 SWAP5 POP PUSH2 0x4452 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND PUSH1 0x0 PUSH2 0x4659 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x6 SLOAD PUSH2 0x446F SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND DUP6 PUSH2 0x4659 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x97FFE1D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x97FFE1D7 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x44D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x44E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD TIMESTAMP DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x3CA7276AB7799BF73FB79D27FF0610CD7049574F2508EF8445162833D439AEA SWAP5 POP SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP2 POP LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 JUMPDEST PUSH1 0xE DUP2 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x4542 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP4 LT PUSH2 0x4577 JUMPI PUSH1 0xF DUP2 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x4563 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x10 SSTORE PUSH2 0x459E JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD PUSH2 0x4532 JUMP JUMPDEST POP POP PUSH1 0x10 SLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x45FD DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x47B3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x2207 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x461C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x2207 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4CBC PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x46F8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 DUP6 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x46CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x46DE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x46F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD ISZERO JUMPDEST PUSH2 0x4733 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x36 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4D0C PUSH1 0x36 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x2207 SWAP1 DUP5 SWAP1 PUSH2 0x45A8 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x47C2 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x47CA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x480B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B4F PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4814 DUP6 PUSH2 0x4944 JUMP JUMPDEST PUSH2 0x4865 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x48C2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x4885 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4924 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4929 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x4939 DUP3 DUP3 DUP7 PUSH2 0x494A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x4959 JUMPI POP DUP2 PUSH2 0x3F29 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x4969 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x49B3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x499B JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x49E0 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x4A38 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x4A38 JUMPI DUP3 MLOAD DUP3 SWAP1 PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x4A0E JUMP JUMPDEST POP PUSH2 0xE00 SWAP3 SWAP2 POP PUSH2 0x4A85 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x4A38 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x4A38 JUMPI DUP3 MLOAD DUP3 SWAP1 PUSH2 0xFFFF AND SWAP1 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x4A64 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xE00 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x4A86 JUMP INVALID SLOAD PUSH19 0x6561737572793A2063616E6E6F742072656465 PUSH6 0x6D20626F6E64 PUSH20 0x2077697468207A65726F20616D6F756E74547265 PUSH2 0x7375 PUSH19 0x793A206661696C656420746F20636F6E73756C PUSH21 0x204C494252412070726963652066726F6D20746865 KECCAK256 PUSH16 0x7261636C655F7072656D69756D546872 PUSH6 0x73686F6C6420 PUSH6 0x786365656473 KECCAK256 PUSH13 0x6962726150726963654365696C PUSH10 0x6E675F7072656D69756D SLOAD PUSH9 0x726573686F6C642069 PUSH20 0x20686967686572207468616E20312E3541646472 PUSH6 0x73733A20696E PUSH20 0x756666696369656E742062616C616E636520666F PUSH19 0x2063616C6C54726561737572793A2074726561 PUSH20 0x75727920686173206E6F206D6F72652062756467 PUSH6 0x745472656173 PUSH22 0x72793A206C696272615072696365206E6F7420656C69 PUSH8 0x69626C6520666F72 KECCAK256 PUSH3 0x6F6E64 KECCAK256 PUSH17 0x75726368617365536166654D6174683A20 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F7754726561737572793A KECCAK256 PUSH4 0x616E6E6F PUSH21 0x20707572636861736520626F6E6473207769746820 PUSH27 0x65726F20616D6F756E745F6D696E74696E67466163746F72466F72 POP PUSH2 0x7969 PUSH15 0x67446562743A206F7574206F662072 PUSH2 0x6E67 PUSH6 0x5F6D61785375 PUSH17 0x706C79457870616E73696F6E5065726365 PUSH15 0x743A206F7574206F662072616E6765 0x49 PUSH15 0x6465782068617320746F206265206C PUSH16 0x776572207468616E20636F756E74206F PUSH7 0x20746965727354 PUSH19 0x6561737572793A2063616C6C6572206973206E PUSH16 0x7420746865206F70657261746F725361 PUSH7 0x6545524332303A KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564436F6E747261637447756172643A KECCAK256 PUSH16 0x6E6520626C6F636B2C206F6E65206675 PUSH15 0x6374696F6E5361666545524332303A KECCAK256 PUSH2 0x7070 PUSH19 0x6F76652066726F6D206E6F6E2D7A65726F2074 PUSH16 0x206E6F6E2D7A65726F20616C6C6F7761 PUSH15 0x636554726561737572793A206E6F74 KECCAK256 PUSH6 0x6E6F75676820 PUSH3 0x6F6E64 KECCAK256 PUSH13 0x65667420746F20707572636861 PUSH20 0x655F626F6F747374726170537570706C79457870 PUSH2 0x6E73 PUSH10 0x6F6E50657263656E743A KECCAK256 PUSH16 0x7574206F662072616E6765A264697066 PUSH20 0x58221220970D28956329B4FA24B2CD0DA8D75081 DUP3 0xB9 BALANCE 0xD4 SMOD INVALID EXP 0xB6 ADD SGT DIFFICULTY DIV 0xCD DUP8 GAS SWAP15 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
          "sourceMap": "593:22980:16:-:0;;;936:31;;;-1:-1:-1;;;;936:31:16;;;962:5;1017:24;;;;1047:45;;593:22980;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106105145760003560e01c806382cad838116102a1578063b4d1d7951161016b578063d98f2495116100e3578063f245245a11610097578063f921eb331161007c578063f921eb3314610aea578063fcb6f00814610b07578063fec3a60114610b0f57610514565b8063f245245a14610aaa578063f8cd4d7214610ac757610514565b8063dfe2f9ee116100c8578063dfe2f9ee14610a92578063e90b245414610a9a578063f14698de14610aa257610514565b8063d98f249514610a82578063da3ed41914610a8a57610514565b8063c5967c261161013a578063c8f987f31161011f578063c8f987f314610a37578063cecce38e14610a3f578063d4b1494414610a5c57610514565b8063c5967c2614610a27578063c8412d0214610a2f57610514565b8063b4d1d79514610a07578063b790230314610a0f578063b8a878f914610a17578063bd20f9af14610a1f57610514565b80639982002511610219578063aed3ba6b116101cd578063b3ab15fb116101b2578063b3ab15fb146109b3578063b3ffc777146109d9578063b40d7365146109ff57610514565b8063aed3ba6b14610985578063b06ce14a1461098d57610514565b8063a0487eea116101fe578063a0487eea14610915578063a204452b14610932578063a3ec30fe1461094f57610514565b806399820025146108f05780639f7be3251461090d57610514565b80638d934f741161027057806391bbfed51161025557806391bbfed51461088a578063940e6064146108ad57806398b762a1146108d357610514565b80638d934f741461087a578063900cf0cf1461088257610514565b806382cad83814610830578063860c31771461084d578063874106cc146108555780638c664db61461085d57610514565b80634013a08e116103e257806358a698331161035a5780635b7561791161030e57806372c054f9116102f357806372c054f91461081857806378e979251461082057806381d11eaf1461082857610514565b80635b756179146108085780635e02c51e1461081057610514565b806359bf5d391161033f57806359bf5d39146107f05780635a0fc79c146107f85780635b0231681461080057610514565b806358a69833146107ad578063591663e1146107d357610514565b8063499f3f19116103b157806354f04a111161039657806354f04a111461077a57806355ebdeef1461079d578063570ca735146107a557610514565b8063499f3f191461072757806354575af41461074457610514565b80634013a08e146106d657806340af7ba5146106de57806342679903146106fb5780634390d2a81461070357610514565b8063154ec2db1161049057806322f832cd116104445780632e9c7b65116104295780632e9c7b65146106be578063349aa30a146106c6578063392e53cd146106ce57610514565b806322f832cd146106ae57806329ef1919146106b657610514565b806316f5ff171161047557806316f5ff1714610656578063196dd8621461065e5780631b0fb35f1461066657610514565b8063154ec2db1461061d578063158ef93e1461063a57610514565b80630cf60175116104e75780630f25cde5116104cc5780630f25cde51461059c578063118ebbf9146105a45780631460e390146105c757610514565b80630cf601751461058c5780630db7eb0b1461059457610514565b806301a937831461051957806303be7e761461053857806304e5c7b1146105525780630b5bcec71461056f575b600080fd5b6105366004803603602081101561052f57600080fd5b5035610b17565b005b610540610be1565b60408051918252519081900360200190f35b6105366004803603602081101561056857600080fd5b5035610be7565b6105366004803603602081101561058557600080fd5b5035610cb6565b610540610d52565b610540610e04565b610540610ea6565b610536600480360360408110156105ba57600080fd5b5080359060200135610eac565b610536600480360360e08110156105dd57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a08101359091169060c0013561153f565b6105366004803603602081101561063357600080fd5b50356118f5565b61064261199a565b604080519115158252519081900360200190f35b6105406119bb565b610540611aaf565b610536600480360360c081101561067c57600080fd5b506001600160a01b03813581169160208101359160408201358116916060810135916080820135169060a00135611c28565b610540611ee9565b610540611eef565b610540611ef5565b610540611efb565b610642611f01565b610540611f22565b610536600480360360208110156106f457600080fd5b5035611f28565b610540611fcd565b61070b611fd3565b604080516001600160a01b039092168252519081900360200190f35b6105366004803603602081101561073d57600080fd5b5035611fe2565b6105366004803603606081101561075a57600080fd5b506001600160a01b0381358116916020810135916040909101351661207f565b6105366004803603604081101561079057600080fd5b508035906020013561220c565b61054061298b565b61070b612991565b610536600480360360208110156107c357600080fd5b50356001600160a01b03166129a0565b610536600480360360208110156107e957600080fd5b5035612a18565b610540612acb565b610540612ad1565b61070b612ad7565b610536612ae6565b61070b6131ce565b6105406131dd565b6105406132ae565b6105406132b4565b61070b6004803603602081101561084657600080fd5b50356132ba565b6105406132e1565b6105406132e7565b6105366004803603602081101561087357600080fd5b50356132ed565b61070b6133a0565b6105406133af565b610536600480360360408110156108a057600080fd5b50803590602001356133b5565b610642600480360360408110156108c357600080fd5b5060ff81351690602001356134ad565b610536600480360360208110156108e957600080fd5b50356135c9565b6105406004803603602081101561090657600080fd5b5035613617565b61070b613635565b6105406004803603602081101561092b57600080fd5b5035613644565b6105366004803603602081101561094857600080fd5b5035613651565b6105366004803603606081101561096557600080fd5b506001600160a01b0381358116916020810135916040909101351661369f565b61070b61377b565b610536600480360360208110156109a357600080fd5b50356001600160a01b031661378a565b610536600480360360208110156109c957600080fd5b50356001600160a01b031661383a565b610536600480360360208110156109ef57600080fd5b50356001600160a01b03166138b2565b61054061392a565b610540613a31565b61070b613a37565b610540613a46565b610540613a4c565b610540613ac7565b610540613af1565b610540613af7565b61053660048036036020811015610a5557600080fd5b5035613afd565b61064260048036036040811015610a7257600080fd5b5060ff8135169060200135613baf565b610540613cb2565b610540613cb8565b610540613cbe565b610540613cc4565b610540613cca565b61053660048036036020811015610ac057600080fd5b5035613cd0565b61053660048036036040811015610add57600080fd5b5080359060200135613d1e565b61053660048036036020811015610b0057600080fd5b5035613df0565b610540613ebb565b61070b613ec1565b6001546001600160a01b03163314610b605760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b600954604080517f97ffe1d70000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b158015610bc657600080fd5b505af1158015610bda573d6000803e3d6000fd5b5050505050565b60225481565b6001546001600160a01b03163314610c305760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b600c54811015610c715760405162461bcd60e51b815260040180806020018281038252602b815260200180614b00602b913960400191505060405180910390fd5b6096811115610cb15760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2b6024913960400191505060405180910390fd5b601c55565b6001546001600160a01b03163314610cff5760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b600a8110158015610d1257506103e88111155b610d4d5760405162461bcd60e51b8152600401808060200182810382526028815260200180614c476028913960400191505060405180910390fd5b601055565b600080610d5d613a4c565b9050600b548111610e0057601b54610d7957600b549150610e00565b6000610da282610d9c670de0b6b3a7640000600b54613ed090919063ffffffff16565b90613f30565b90506000610dcd612710610d9c601b54610dc7600b5487613f9790919063ffffffff16565b90613ed0565b600b54909150610ddd9082613ff4565b93506000601954118015610df2575060195484115b15610dfd5760195493505b50505b5090565b600080610e0f613a4c565b9050600c54811115610e00576000610e396064610d9c601c54600b54613ed090919063ffffffff16565b9050808210610e9b576000610e65612710610d9c601d54610dc7600b5488613f9790919063ffffffff16565b600b54909150610e759082613ff4565b93506000601a54118015610e8a5750601a5484115b15610e9557601a5493505b50610ea1565b600b5492505b505090565b600b5481565b610eb461404e565b15610ef05760405162461bcd60e51b8152600401808060200182810382526026815260200180614ce66026913960400191505060405180910390fd5b610ef861406d565b15610f345760405162461bcd60e51b8152600401808060200182810382526026815260200180614ce66026913960400191505060405180910390fd5b600254421015610f8b576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015610fcf57600080fd5b505afa158015610fe3573d6000803e3d6000fd5b505050506040513d6020811015610ff957600080fd5b50516001600160a01b031614801561108757506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561105057600080fd5b505afa158015611064573d6000803e3d6000fd5b505050506040513d602081101561107a57600080fd5b50516001600160a01b0316145b801561110957506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156110d257600080fd5b505afa1580156110e6573d6000803e3d6000fd5b505050506040513d60208110156110fc57600080fd5b50516001600160a01b0316145b801561118b57506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561115457600080fd5b505afa158015611168573d6000803e3d6000fd5b505050506040513d602081101561117e57600080fd5b50516001600160a01b0316145b6111dc576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b6000821161121b5760405162461bcd60e51b815260040180806020018281038252602e815260200180614a9b602e913960400191505060405180910390fd5b6000611225613a4c565b905081811461127b576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a204c49425241207072696365206d6f7665640000000000604482015290519081900360640190fd5b600c5481116112bb5760405162461bcd60e51b8152600401808060200182810382526033815260200180614b9a6033913960400191505060405180910390fd5b60006112c5610e04565b90506000811161131c576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b6000611334670de0b6b3a7640000610d9c8785613ed0565b600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935083926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561139d57600080fd5b505afa1580156113b1573d6000803e3d6000fd5b505050506040513d60208110156113c757600080fd5b505110156114065760405162461bcd60e51b8152600401808060200182810382526025815260200180614b756025913960400191505060405180910390fd5b61141e611415600d548361408c565b600d5490613f97565b600d55600754604080517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810188905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b15801561148d57600080fd5b505af11580156114a1573d6000803e3d6000fd5b50506006546114bd92506001600160a01b0316905033836140a2565b6114c5614122565b6040805182815260208101879052815133927f51e0d16595cabc591e64da08e45bb223577e5b9a39cd947b4ddc3472b2dd8878928290030190a25050436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055505050565b60015474010000000000000000000000000000000000000000900460ff16156115af576040805162461bcd60e51b815260206004820152601d60248201527f54726561737572793a20616c726561647920696e697469616c697a6564000000604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038a811691909117909255600780548216898416179055600880548216888416179055600a80548216878416179055600980549091169185169190911790556002819055670de0b6b3a7640000600b81905561163790606490610d9c906065613ed0565b600c556005805460018101825560009182527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03851617905560408051610120810182529182526969e10de76676d0800000602083015269d3c21bcecceda1000000908201526a013da329b633647180000060608201526a01a784379d99db4200000060808201526a0422ca8b0a00a42500000060a08201526a084595161401484a00000060c08201526a108b2a2c2802909400000060e08201526a295be96e6406697200000061010082015261173390600e9060096149ee565b5060408051610120810182526101c28152610190602082015261015e9181019190915261012c606082015260fa608082015260c860a0820152609660c0820152607d60e0820152606461010082015261179090600f906009614a44565b50610190601055612710601155610dac601281905561012c6013556014556101f46015819055606e601c55611b58601d55600c601655601755600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561182d57600080fd5b505afa158015611841573d6000803e3d6000fd5b505050506040513d602081101561185757600080fd5b5051600d556001805473ffffffffffffffffffffffffffffffffffffffff197fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909116740100000000000000000000000000000000000000001716339081179091556040805143815290517f25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce799181900360200190a250505050505050565b6001546001600160a01b0316331461193e5760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b614e20811115611995576040805162461bcd60e51b815260206004820152601d60248201527f5f646973636f756e7450657263656e74206973206f7665722032303025000000604482015290519081900360640190fd5b601b55565b60015474010000000000000000000000000000000000000000900460ff1681565b600a54600654604080517f6808a1280000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691636808a12891604480820192602092909190829003018186803b158015611a3657600080fd5b505afa925050508015611a5b57506040513d6020811015611a5657600080fd5b505160015b611a965760405162461bcd60e51b8152600401808060200182810382526037815260200180614ac96037913960400191505060405180910390fd5b71ffffffffffffffffffffffffffffffffffff16905090565b600654604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691839183916318160ddd916004808301926020929190829003018186803b158015611b1157600080fd5b505afa158015611b25573d6000803e3d6000fd5b505050506040513d6020811015611b3b57600080fd5b505190506000805b60055460ff82161015611c1557611c0b846001600160a01b03166370a0823160058460ff1681548110611b7257fe5b60009182526020918290200154604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b158015611bd857600080fd5b505afa158015611bec573d6000803e3d6000fd5b505050506040513d6020811015611c0257600080fd5b50518390613ff4565b9150600101611b43565b50611c208282613f97565b935050505090565b6001546001600160a01b03163314611c715760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b6001600160a01b038616611cce576040805162461bcd60e51b8152602060048083019190915260248201527f7a65726f00000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610bb8851115611d25576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038416611d82576040805162461bcd60e51b8152602060048083019190915260248201527f7a65726f00000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6103e8831115611dd9576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038216611e36576040805162461bcd60e51b8152602060048083019190915260248201527f7a65726f00000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6103e8811115611e8d576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b601f805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039889161790915560209590955560218054861694871694909417909355602291909155602380549093169316929092179055602455565b60125481565b601b5481565b601a5481565b60155481565b60015474010000000000000000000000000000000000000000900460ff1690565b601e5481565b6001546001600160a01b03163314611f715760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b614e20811115611fc8576040805162461bcd60e51b815260206004820152601c60248201527f5f7072656d69756d50657263656e74206973206f766572203230302500000000604482015290519081900360640190fd5b601d55565b60185481565b6021546001600160a01b031681565b6001546001600160a01b0316331461202b5760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b612710811015801561203f5750614e208111155b61207a5760405162461bcd60e51b8152600401808060200182810382526029815260200180614c1e6029913960400191505060405180910390fd5b601e55565b6001546001600160a01b031633146120c85760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b6006546001600160a01b038481169116141561212b576040805162461bcd60e51b815260206004820152600560248201527f6c69627261000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6007546001600160a01b0384811691161415612190576040805162461bcd60e51b8152602060048083019190915260248201527f626f6e6400000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6008546001600160a01b03848116911614156121f3576040805162461bcd60e51b815260206004820152600560248201527f7368617265000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6122076001600160a01b03841682846140a2565b505050565b61221461404e565b156122505760405162461bcd60e51b8152600401808060200182810382526026815260200180614ce66026913960400191505060405180910390fd5b61225861406d565b156122945760405162461bcd60e51b8152600401808060200182810382526026815260200180614ce66026913960400191505060405180910390fd5b6002544210156122eb576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561232f57600080fd5b505afa158015612343573d6000803e3d6000fd5b505050506040513d602081101561235957600080fd5b50516001600160a01b03161480156123e757506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156123b057600080fd5b505afa1580156123c4573d6000803e3d6000fd5b505050506040513d60208110156123da57600080fd5b50516001600160a01b0316145b801561246957506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561243257600080fd5b505afa158015612446573d6000803e3d6000fd5b505050506040513d602081101561245c57600080fd5b50516001600160a01b0316145b80156124eb57506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156124b457600080fd5b505afa1580156124c8573d6000803e3d6000fd5b505050506040513d60208110156124de57600080fd5b50516001600160a01b0316145b61253c576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b6000821161257b5760405162461bcd60e51b8152600401808060200182810382526030815260200180614bee6030913960400191505060405180910390fd5b6000612585613a4c565b90508181146125db576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a204c49425241207072696365206d6f7665640000000000604482015290519081900360640190fd5b600b54811061261b5760405162461bcd60e51b8152600401808060200182810382526033815260200180614b9a6033913960400191505060405180910390fd5b60045483111561265c5760405162461bcd60e51b815260040180806020018281038252602a815260200180614d42602a913960400191505060405180910390fd5b6000612666610d52565b9050600081116126bd576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b60006126d5670de0b6b3a7640000610d9c8785613ed0565b905060006126e1611aaf565b9050600061276983600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561273757600080fd5b505afa15801561274b573d6000803e3d6000fd5b505050506040513d602081101561276157600080fd5b505190613ff4565b9050612786612710610d9c60145485613ed090919063ffffffff16565b8111156127da576040805162461bcd60e51b815260206004820152601360248201527f6f766572206d6178206465627420726174696f00000000000000000000000000604482015290519081900360640190fd5b600654604080517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018a905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b15801561284657600080fd5b505af115801561285a573d6000803e3d6000fd5b5050600754604080517f40c10f190000000000000000000000000000000000000000000000000000000081523360048201526024810188905290516001600160a01b0390921693506340c10f1992506044808201926020929091908290030181600087803b1580156128cb57600080fd5b505af11580156128df573d6000803e3d6000fd5b505050506040513d60208110156128f557600080fd5b50506004546129049088613f97565b60045561290f614122565b6040805188815260208101859052815133927f73017f1b70789e2e66759eeb3c7ec11f59e6eedb55d921cfaec5410dd42a4799928290030190a25050436000908152602081815260408083203284529091528082208054600160ff19918216811790925533845291909220805490911690911790555050505050565b60205481565b6001546001600160a01b031681565b6001546001600160a01b031633146129e95760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b600a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b03163314612a615760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b6103e88110158015612a7557506127108111155b612ac6576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b601455565b600d5490565b600d5481565b6008546001600160a01b031681565b612aee61404e565b15612b2a5760405162461bcd60e51b8152600401808060200182810382526026815260200180614ce66026913960400191505060405180910390fd5b612b3261406d565b15612b6e5760405162461bcd60e51b8152600401808060200182810382526026815260200180614ce66026913960400191505060405180910390fd5b600254421015612bc5576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b612bcd613ac7565b421015612c21576040805162461bcd60e51b815260206004820152601860248201527f54726561737572793a206e6f74206f70656e6564207965740000000000000000604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015612c6557600080fd5b505afa158015612c79573d6000803e3d6000fd5b505050506040513d6020811015612c8f57600080fd5b50516001600160a01b0316148015612d1d57506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015612ce657600080fd5b505afa158015612cfa573d6000803e3d6000fd5b505050506040513d6020811015612d1057600080fd5b50516001600160a01b0316145b8015612d9f57506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015612d6857600080fd5b505afa158015612d7c573d6000803e3d6000fd5b505050506040513d6020811015612d9257600080fd5b50516001600160a01b0316145b8015612e2157506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015612dea57600080fd5b505afa158015612dfe573d6000803e3d6000fd5b505050506040513d6020811015612e1457600080fd5b50516001600160a01b0316145b612e72576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b612e7a614122565b612e82613a4c565b601855600d54600090612e9d90612e97611aaf565b90613f97565b90506016546003541015612ed357612ece612ec9612710610d9c60175485613ed090919063ffffffff16565b614186565b613152565b600c54601854111561315257600754604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015612f3d57600080fd5b505afa158015612f51573d6000803e3d6000fd5b505050506040513d6020811015612f6757600080fd5b5051600b54601854919250600091612f7e91613f97565b90506000806000612f98655af3107a4000610dc78861452d565b905080841115612fa6578093505b612fc1612710610d9c60115488613ed090919063ffffffff16565b600d5410612fe657612fdf670de0b6b3a7640000610d9c8887613ed0565b9150613052565b6000612ffe670de0b6b3a7640000610d9c8988613ed0565b905061301b612710610d9c60125484613ed090919063ffffffff16565b92506130278184613f97565b601e54909450156130505761304d612710610d9c601e5487613ed090919063ffffffff16565b93505b505b81156130615761306182614186565b821561314c57600d546130749084613ff4565b600d55600654604080517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810186905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b1580156130e457600080fd5b505af11580156130f8573d6000803e3d6000fd5b505050506040513d602081101561310e57600080fd5b5050604080514281526020810185905281517ff705142bf09f04297640495ddf7c59b7fd6f51894c5aea9602d631cf05f0efc2929181900390910190a15b50505050505b50600354613161906001613ff4565b600355600c5461316f613a4c565b1161318d57613188612710610d9c601354610dc7611aaf565b613190565b60005b600455436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b6009546001600160a01b031681565b6000806131e8613a4c565b9050600c54811115610e0057600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561325857600080fd5b505afa15801561326c573d6000803e3d6000fd5b505050506040513d602081101561328257600080fd5b505190506000613290610e04565b90508015610dfd57611c2081610d9c84670de0b6b3a7640000613ed0565b60025481565b60115481565b600581815481106132c757fe5b6000918252602090912001546001600160a01b0316905081565b60245481565b60175481565b6001546001600160a01b031633146133365760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b6101f4811015801561334a57506127108111155b61339b576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b601155565b601f546001600160a01b031681565b60035481565b6001546001600160a01b031633146133fe5760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b6078821115613454576040805162461bcd60e51b815260206004820152601e60248201527f5f626f6f74737472617045706f6368733a206f7574206f662072616e67650000604482015290519081900360640190fd5b6064811015801561346757506103e88111155b6134a25760405162461bcd60e51b815260040180806020018281038252602e815260200180614d6c602e913960400191505060405180910390fd5b601691909155601755565b6001546000906001600160a01b031633146134f95760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b60098360ff161061353b5760405162461bcd60e51b8152600401808060200182810382526029815260200180614c6f6029913960400191505060405180910390fd5b60ff83161561356d57600e6001840360ff168154811061355757fe5b9060005260206000200154821161356d57600080fd5b60088360ff1610156135a257600e8360010160ff168154811061358c57fe5b906000526020600020015482106135a257600080fd5b81600e8460ff16815481106135b357fe5b6000918252602090912001555060015b92915050565b6001546001600160a01b031633146136125760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b601955565b600e818154811061362457fe5b600091825260209091200154905081565b600a546001600160a01b031681565b600f818154811061362457fe5b6001546001600160a01b0316331461369a5760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b601a55565b6001546001600160a01b031633146136e85760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b600954604080517f54575af40000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018690528481166044830152915191909216916354575af491606480830192600092919082900301818387803b15801561375e57600080fd5b505af1158015613772573d6000803e3d6000fd5b50505050505050565b6006546001600160a01b031681565b6001546001600160a01b031633146137d35760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b600954604080517fb3ab15fb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529151919092169163b3ab15fb91602480830192600092919082900301818387803b158015610bc657600080fd5b6001546001600160a01b031633146138835760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b031633146138fb5760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600080613935613a4c565b9050600b548111610e0057600061394a611aaf565b90506000613969612710610d9c60145485613ed090919063ffffffff16565b90506000600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156139bb57600080fd5b505afa1580156139cf573d6000803e3d6000fd5b505050506040513d60208110156139e557600080fd5b5051905080821115613a2a5760006139fd8383613f97565b90506000613a17670de0b6b3a7640000610d9c8489613ed0565b9050613a256004548261408c565b965050505b5050505090565b61546081565b6023546001600160a01b031681565b60195481565b600a54600654604080517f3ddac9530000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691633ddac95391604480820192602092909190829003018186803b158015611a3657600080fd5b6000613aec613ae3615460600354613ed090919063ffffffff16565b60025490613ff4565b905090565b601d5481565b601c5481565b6001546001600160a01b03163314613b465760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b60648110158015613b5957506105dc8111155b613baa576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b601355565b6001546000906001600160a01b03163314613bfb5760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b60098360ff1610613c3d5760405162461bcd60e51b8152600401808060200182810382526029815260200180614c6f6029913960400191505060405180910390fd5b600a8210158015613c5057506103e88211155b613ca1576040805162461bcd60e51b815260206004820152601460248201527f5f76616c75653a206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b81600f8460ff16815481106135b357fe5b60105481565b60145481565b600c5481565b60135481565b60165481565b6001546001600160a01b03163314613d195760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b601555565b6001546001600160a01b03163314613d675760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b600954604080517f2ffaaa09000000000000000000000000000000000000000000000000000000008152600481018590526024810184905290516001600160a01b0390921691632ffaaa099160448082019260009290919082900301818387803b158015613dd457600080fd5b505af1158015613de8573d6000803e3d6000fd5b505050505050565b6001546001600160a01b03163314613e395760405162461bcd60e51b8152600401808060200182810382526024815260200180614c986024913960400191505060405180910390fd5b600b548110158015613e655750613e616064610d9c6078600b54613ed090919063ffffffff16565b8111155b613eb6576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b600c55565b60045481565b6007546001600160a01b031681565b600082613edf575060006135c3565b82820282848281613eec57fe5b0414613f295760405162461bcd60e51b8152600401808060200182810382526021815260200180614bcd6021913960400191505060405180910390fd5b9392505050565b6000808211613f86576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613f8f57fe5b049392505050565b600082821115613fee576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015613f29576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b4360009081526020818152604080832032845290915290205460ff1690565b4360009081526020818152604080832033845290915290205460ff1690565b600081831061409b5781613f29565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526122079084906145a8565b600a60009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561417257600080fd5b505af1925050508015614183575060015b50565b600654604080517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810184905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b1580156141f357600080fd5b505af1158015614207573d6000803e3d6000fd5b505050506040513d602081101561421d57600080fd5b50506020546000901561432157614245612710610d9c60205485613ed090919063ffffffff16565b600654601f54604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b1580156142b957600080fd5b505af11580156142cd573d6000803e3d6000fd5b505050506040513d60208110156142e357600080fd5b5050604080514281526020810183905281517fcb3f34aaa3445b461e6da5492dc89e5c257a59fa598131f3b6bbc97a3638e409929181900390910190a15b6022546000901561442357614347612710610d9c60225486613ed090919063ffffffff16565b600654602154604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b1580156143bb57600080fd5b505af11580156143cf573d6000803e3d6000fd5b505050506040513d60208110156143e557600080fd5b5050604080514281526020810183905281517fdc8b715b18523e58b7fd0da53259dfa91efd91df4a854d94b136e3333a3b9395929181900390910190a15b61443181612e978585613f97565b600954600654919450614452916001600160a01b0390811691166000614659565b60095460065461446f916001600160a01b03918216911685614659565b600954604080517f97ffe1d70000000000000000000000000000000000000000000000000000000081526004810186905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b1580156144d557600080fd5b505af11580156144e9573d6000803e3d6000fd5b5050604080514281526020810187905281517f03ca7276ab7799bf73fb79d27ff0610cd7049574f2508ef8445162833d439aea9450908190039091019150a1505050565b600060085b600e8160ff168154811061454257fe5b9060005260206000200154831061457757600f8160ff168154811061456357fe5b60009182526020909120015460105561459e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01614532565b5050601054919050565b60606145fd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166147b39092919063ffffffff16565b8051909150156122075780806020019051602081101561461c57600080fd5b50516122075760405162461bcd60e51b815260040180806020018281038252602a815260200180614cbc602a913960400191505060405180910390fd5b8015806146f85750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156146ca57600080fd5b505afa1580156146de573d6000803e3d6000fd5b505050506040513d60208110156146f457600080fd5b5051155b6147335760405162461bcd60e51b8152600401808060200182810382526036815260200180614d0c6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526122079084906145a8565b60606147c284846000856147ca565b949350505050565b60608247101561480b5760405162461bcd60e51b8152600401808060200182810382526026815260200180614b4f6026913960400191505060405180910390fd5b61481485614944565b614865576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106148c257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614885565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614924576040519150601f19603f3d011682016040523d82523d6000602084013e614929565b606091505b509150915061493982828661494a565b979650505050505050565b3b151590565b60608315614959575081613f29565b8251156149695782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156149b357818101518382015260200161499b565b50505050905090810190601f1680156149e05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215614a38579160200282015b82811115614a3857825182906affffffffffffffffffffff16905591602001919060010190614a0e565b50610e00929150614a85565b828054828255906000526020600020908101928215614a38579160200282015b82811115614a38578251829061ffff16905591602001919060010190614a64565b5b80821115610e005760008155600101614a8656fe54726561737572793a2063616e6e6f742072656465656d20626f6e64732077697468207a65726f20616d6f756e7454726561737572793a206661696c656420746f20636f6e73756c74204c494252412070726963652066726f6d20746865206f7261636c655f7072656d69756d5468726573686f6c642065786365656473206c6962726150726963654365696c696e675f7072656d69756d5468726573686f6c6420697320686967686572207468616e20312e35416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c54726561737572793a20747265617375727920686173206e6f206d6f72652062756467657454726561737572793a206c696272615072696365206e6f7420656c696769626c6520666f7220626f6e64207075726368617365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754726561737572793a2063616e6e6f7420707572636861736520626f6e64732077697468207a65726f20616d6f756e745f6d696e74696e67466163746f72466f72506179696e67446562743a206f7574206f662072616e67655f6d6178537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765496e6465782068617320746f206265206c6f776572207468616e20636f756e74206f6620746965727354726561737572793a2063616c6c6572206973206e6f7420746865206f70657261746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e636554726561737572793a206e6f7420656e6f75676820626f6e64206c65667420746f2070757263686173655f626f6f747374726170537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765a2646970667358221220970d28956329b4fa24b2cd0da8d7508182b931d407fe0ab601134404cd875a9e64736f6c634300060c0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x514 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x82CAD838 GT PUSH2 0x2A1 JUMPI DUP1 PUSH4 0xB4D1D795 GT PUSH2 0x16B JUMPI DUP1 PUSH4 0xD98F2495 GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xF245245A GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xF921EB33 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xF921EB33 EQ PUSH2 0xAEA JUMPI DUP1 PUSH4 0xFCB6F008 EQ PUSH2 0xB07 JUMPI DUP1 PUSH4 0xFEC3A601 EQ PUSH2 0xB0F JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xF245245A EQ PUSH2 0xAAA JUMPI DUP1 PUSH4 0xF8CD4D72 EQ PUSH2 0xAC7 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xDFE2F9EE GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xDFE2F9EE EQ PUSH2 0xA92 JUMPI DUP1 PUSH4 0xE90B2454 EQ PUSH2 0xA9A JUMPI DUP1 PUSH4 0xF14698DE EQ PUSH2 0xAA2 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xD98F2495 EQ PUSH2 0xA82 JUMPI DUP1 PUSH4 0xDA3ED419 EQ PUSH2 0xA8A JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xC5967C26 GT PUSH2 0x13A JUMPI DUP1 PUSH4 0xC8F987F3 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0xC8F987F3 EQ PUSH2 0xA37 JUMPI DUP1 PUSH4 0xCECCE38E EQ PUSH2 0xA3F JUMPI DUP1 PUSH4 0xD4B14944 EQ PUSH2 0xA5C JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xC5967C26 EQ PUSH2 0xA27 JUMPI DUP1 PUSH4 0xC8412D02 EQ PUSH2 0xA2F JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xB4D1D795 EQ PUSH2 0xA07 JUMPI DUP1 PUSH4 0xB7902303 EQ PUSH2 0xA0F JUMPI DUP1 PUSH4 0xB8A878F9 EQ PUSH2 0xA17 JUMPI DUP1 PUSH4 0xBD20F9AF EQ PUSH2 0xA1F JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x99820025 GT PUSH2 0x219 JUMPI DUP1 PUSH4 0xAED3BA6B GT PUSH2 0x1CD JUMPI DUP1 PUSH4 0xB3AB15FB GT PUSH2 0x1B2 JUMPI DUP1 PUSH4 0xB3AB15FB EQ PUSH2 0x9B3 JUMPI DUP1 PUSH4 0xB3FFC777 EQ PUSH2 0x9D9 JUMPI DUP1 PUSH4 0xB40D7365 EQ PUSH2 0x9FF JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xAED3BA6B EQ PUSH2 0x985 JUMPI DUP1 PUSH4 0xB06CE14A EQ PUSH2 0x98D JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xA0487EEA GT PUSH2 0x1FE JUMPI DUP1 PUSH4 0xA0487EEA EQ PUSH2 0x915 JUMPI DUP1 PUSH4 0xA204452B EQ PUSH2 0x932 JUMPI DUP1 PUSH4 0xA3EC30FE EQ PUSH2 0x94F JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x99820025 EQ PUSH2 0x8F0 JUMPI DUP1 PUSH4 0x9F7BE325 EQ PUSH2 0x90D JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x8D934F74 GT PUSH2 0x270 JUMPI DUP1 PUSH4 0x91BBFED5 GT PUSH2 0x255 JUMPI DUP1 PUSH4 0x91BBFED5 EQ PUSH2 0x88A JUMPI DUP1 PUSH4 0x940E6064 EQ PUSH2 0x8AD JUMPI DUP1 PUSH4 0x98B762A1 EQ PUSH2 0x8D3 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x8D934F74 EQ PUSH2 0x87A JUMPI DUP1 PUSH4 0x900CF0CF EQ PUSH2 0x882 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x82CAD838 EQ PUSH2 0x830 JUMPI DUP1 PUSH4 0x860C3177 EQ PUSH2 0x84D JUMPI DUP1 PUSH4 0x874106CC EQ PUSH2 0x855 JUMPI DUP1 PUSH4 0x8C664DB6 EQ PUSH2 0x85D JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x4013A08E GT PUSH2 0x3E2 JUMPI DUP1 PUSH4 0x58A69833 GT PUSH2 0x35A JUMPI DUP1 PUSH4 0x5B756179 GT PUSH2 0x30E JUMPI DUP1 PUSH4 0x72C054F9 GT PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x72C054F9 EQ PUSH2 0x818 JUMPI DUP1 PUSH4 0x78E97925 EQ PUSH2 0x820 JUMPI DUP1 PUSH4 0x81D11EAF EQ PUSH2 0x828 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x5B756179 EQ PUSH2 0x808 JUMPI DUP1 PUSH4 0x5E02C51E EQ PUSH2 0x810 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x59BF5D39 GT PUSH2 0x33F JUMPI DUP1 PUSH4 0x59BF5D39 EQ PUSH2 0x7F0 JUMPI DUP1 PUSH4 0x5A0FC79C EQ PUSH2 0x7F8 JUMPI DUP1 PUSH4 0x5B023168 EQ PUSH2 0x800 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x58A69833 EQ PUSH2 0x7AD JUMPI DUP1 PUSH4 0x591663E1 EQ PUSH2 0x7D3 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x499F3F19 GT PUSH2 0x3B1 JUMPI DUP1 PUSH4 0x54F04A11 GT PUSH2 0x396 JUMPI DUP1 PUSH4 0x54F04A11 EQ PUSH2 0x77A JUMPI DUP1 PUSH4 0x55EBDEEF EQ PUSH2 0x79D JUMPI DUP1 PUSH4 0x570CA735 EQ PUSH2 0x7A5 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x499F3F19 EQ PUSH2 0x727 JUMPI DUP1 PUSH4 0x54575AF4 EQ PUSH2 0x744 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x4013A08E EQ PUSH2 0x6D6 JUMPI DUP1 PUSH4 0x40AF7BA5 EQ PUSH2 0x6DE JUMPI DUP1 PUSH4 0x42679903 EQ PUSH2 0x6FB JUMPI DUP1 PUSH4 0x4390D2A8 EQ PUSH2 0x703 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x154EC2DB GT PUSH2 0x490 JUMPI DUP1 PUSH4 0x22F832CD GT PUSH2 0x444 JUMPI DUP1 PUSH4 0x2E9C7B65 GT PUSH2 0x429 JUMPI DUP1 PUSH4 0x2E9C7B65 EQ PUSH2 0x6BE JUMPI DUP1 PUSH4 0x349AA30A EQ PUSH2 0x6C6 JUMPI DUP1 PUSH4 0x392E53CD EQ PUSH2 0x6CE JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x22F832CD EQ PUSH2 0x6AE JUMPI DUP1 PUSH4 0x29EF1919 EQ PUSH2 0x6B6 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x16F5FF17 GT PUSH2 0x475 JUMPI DUP1 PUSH4 0x16F5FF17 EQ PUSH2 0x656 JUMPI DUP1 PUSH4 0x196DD862 EQ PUSH2 0x65E JUMPI DUP1 PUSH4 0x1B0FB35F EQ PUSH2 0x666 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x154EC2DB EQ PUSH2 0x61D JUMPI DUP1 PUSH4 0x158EF93E EQ PUSH2 0x63A JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xCF60175 GT PUSH2 0x4E7 JUMPI DUP1 PUSH4 0xF25CDE5 GT PUSH2 0x4CC JUMPI DUP1 PUSH4 0xF25CDE5 EQ PUSH2 0x59C JUMPI DUP1 PUSH4 0x118EBBF9 EQ PUSH2 0x5A4 JUMPI DUP1 PUSH4 0x1460E390 EQ PUSH2 0x5C7 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0xCF60175 EQ PUSH2 0x58C JUMPI DUP1 PUSH4 0xDB7EB0B EQ PUSH2 0x594 JUMPI PUSH2 0x514 JUMP JUMPDEST DUP1 PUSH4 0x1A93783 EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0x3BE7E76 EQ PUSH2 0x538 JUMPI DUP1 PUSH4 0x4E5C7B1 EQ PUSH2 0x552 JUMPI DUP1 PUSH4 0xB5BCEC7 EQ PUSH2 0x56F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xB17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x540 PUSH2 0xBE1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xBE7 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x585 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xCB6 JUMP JUMPDEST PUSH2 0x540 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x540 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x540 PUSH2 0xEA6 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xEAC JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x5DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x80 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0xA0 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0xC0 ADD CALLDATALOAD PUSH2 0x153F JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x633 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x18F5 JUMP JUMPDEST PUSH2 0x642 PUSH2 0x199A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x540 PUSH2 0x19BB JUMP JUMPDEST PUSH2 0x540 PUSH2 0x1AAF JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x67C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x80 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0xA0 ADD CALLDATALOAD PUSH2 0x1C28 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x1EE9 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x1EEF JUMP JUMPDEST PUSH2 0x540 PUSH2 0x1EF5 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x1EFB JUMP JUMPDEST PUSH2 0x642 PUSH2 0x1F01 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x1F22 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1F28 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0x70B PUSH2 0x1FD3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1FE2 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x75A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x207F JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x220C JUMP JUMPDEST PUSH2 0x540 PUSH2 0x298B JUMP JUMPDEST PUSH2 0x70B PUSH2 0x2991 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x29A0 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x2A18 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x2ACB JUMP JUMPDEST PUSH2 0x540 PUSH2 0x2AD1 JUMP JUMPDEST PUSH2 0x70B PUSH2 0x2AD7 JUMP JUMPDEST PUSH2 0x536 PUSH2 0x2AE6 JUMP JUMPDEST PUSH2 0x70B PUSH2 0x31CE JUMP JUMPDEST PUSH2 0x540 PUSH2 0x31DD JUMP JUMPDEST PUSH2 0x540 PUSH2 0x32AE JUMP JUMPDEST PUSH2 0x540 PUSH2 0x32B4 JUMP JUMPDEST PUSH2 0x70B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x846 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x32BA JUMP JUMPDEST PUSH2 0x540 PUSH2 0x32E1 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x32E7 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x873 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x32ED JUMP JUMPDEST PUSH2 0x70B PUSH2 0x33A0 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x33AF JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x33B5 JUMP JUMPDEST PUSH2 0x642 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x34AD JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x35C9 JUMP JUMPDEST PUSH2 0x540 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x906 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3617 JUMP JUMPDEST PUSH2 0x70B PUSH2 0x3635 JUMP JUMPDEST PUSH2 0x540 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x92B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3644 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x948 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3651 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x369F JUMP JUMPDEST PUSH2 0x70B PUSH2 0x377B JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x378A JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x383A JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x38B2 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x392A JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3A31 JUMP JUMPDEST PUSH2 0x70B PUSH2 0x3A37 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3A46 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3A4C JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3AC7 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3AF1 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3AF7 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3AFD JUMP JUMPDEST PUSH2 0x642 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x3BAF JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3CB2 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3CB8 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3CBE JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3CC4 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3CCA JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xAC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3CD0 JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xADD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x3D1E JUMP JUMPDEST PUSH2 0x536 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3DF0 JUMP JUMPDEST PUSH2 0x540 PUSH2 0x3EBB JUMP JUMPDEST PUSH2 0x70B PUSH2 0x3EC1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB60 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x97FFE1D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x97FFE1D7 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBDA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x22 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC30 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC SLOAD DUP2 LT ISZERO PUSH2 0xC71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B00 PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x96 DUP2 GT ISZERO PUSH2 0xCB1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B2B PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1C SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCFF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA DUP2 LT ISZERO DUP1 ISZERO PUSH2 0xD12 JUMPI POP PUSH2 0x3E8 DUP2 GT ISZERO JUMPDEST PUSH2 0xD4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C47 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x10 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD5D PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP PUSH1 0xB SLOAD DUP2 GT PUSH2 0xE00 JUMPI PUSH1 0x1B SLOAD PUSH2 0xD79 JUMPI PUSH1 0xB SLOAD SWAP2 POP PUSH2 0xE00 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA2 DUP3 PUSH2 0xD9C PUSH8 0xDE0B6B3A7640000 PUSH1 0xB SLOAD PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x3F30 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDCD PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x1B SLOAD PUSH2 0xDC7 PUSH1 0xB SLOAD DUP8 PUSH2 0x3F97 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x3ED0 JUMP JUMPDEST PUSH1 0xB SLOAD SWAP1 SWAP2 POP PUSH2 0xDDD SWAP1 DUP3 PUSH2 0x3FF4 JUMP JUMPDEST SWAP4 POP PUSH1 0x0 PUSH1 0x19 SLOAD GT DUP1 ISZERO PUSH2 0xDF2 JUMPI POP PUSH1 0x19 SLOAD DUP5 GT JUMPDEST ISZERO PUSH2 0xDFD JUMPI PUSH1 0x19 SLOAD SWAP4 POP JUMPDEST POP POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE0F PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP PUSH1 0xC SLOAD DUP2 GT ISZERO PUSH2 0xE00 JUMPI PUSH1 0x0 PUSH2 0xE39 PUSH1 0x64 PUSH2 0xD9C PUSH1 0x1C SLOAD PUSH1 0xB SLOAD PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT PUSH2 0xE9B JUMPI PUSH1 0x0 PUSH2 0xE65 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x1D SLOAD PUSH2 0xDC7 PUSH1 0xB SLOAD DUP9 PUSH2 0x3F97 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xB SLOAD SWAP1 SWAP2 POP PUSH2 0xE75 SWAP1 DUP3 PUSH2 0x3FF4 JUMP JUMPDEST SWAP4 POP PUSH1 0x0 PUSH1 0x1A SLOAD GT DUP1 ISZERO PUSH2 0xE8A JUMPI POP PUSH1 0x1A SLOAD DUP5 GT JUMPDEST ISZERO PUSH2 0xE95 JUMPI PUSH1 0x1A SLOAD SWAP4 POP JUMPDEST POP PUSH2 0xEA1 JUMP JUMPDEST PUSH1 0xB SLOAD SWAP3 POP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH2 0xEB4 PUSH2 0x404E JUMP JUMPDEST ISZERO PUSH2 0xEF0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4CE6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEF8 PUSH2 0x406D JUMP JUMPDEST ISZERO PUSH2 0xF34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4CE6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD TIMESTAMP LT ISZERO PUSH2 0xF8B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A206E6F7420737461727465642079657400000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xFF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x1087 JUMPI POP PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1050 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1064 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x107A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x1109 JUMPI POP PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x10FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x118B JUMPI POP PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1168 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x117E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x11DC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A206E656564206D6F7265207065726D697373696F6E0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x121B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4A9B PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1225 PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x127B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A204C49425241207072696365206D6F7665640000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xC SLOAD DUP2 GT PUSH2 0x12BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x33 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B9A PUSH1 0x33 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12C5 PUSH2 0xE04 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x131C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A20696E76616C696420626F6E6420726174650000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1334 PUSH8 0xDE0B6B3A7640000 PUSH2 0xD9C DUP8 DUP6 PUSH2 0x3ED0 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD SWAP3 SWAP4 POP DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x139D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT ISZERO PUSH2 0x1406 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B75 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x141E PUSH2 0x1415 PUSH1 0xD SLOAD DUP4 PUSH2 0x408C JUMP JUMPDEST PUSH1 0xD SLOAD SWAP1 PUSH2 0x3F97 JUMP JUMPDEST PUSH1 0xD SSTORE PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x79CC679000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x79CC6790 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x148D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x6 SLOAD PUSH2 0x14BD SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP CALLER DUP4 PUSH2 0x40A2 JUMP JUMPDEST PUSH2 0x14C5 PUSH2 0x4122 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE DUP2 MLOAD CALLER SWAP3 PUSH32 0x51E0D16595CABC591E64DA08E45BB223577E5B9A39CD947B4DDC3472B2DD8878 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP NUMBER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 ORIGIN DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE CALLER DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x15AF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A20616C726561647920696E697469616C697A6564000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x7 DUP1 SLOAD DUP3 AND DUP10 DUP5 AND OR SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD DUP3 AND DUP9 DUP5 AND OR SWAP1 SSTORE PUSH1 0xA DUP1 SLOAD DUP3 AND DUP8 DUP5 AND OR SWAP1 SSTORE PUSH1 0x9 DUP1 SLOAD SWAP1 SWAP2 AND SWAP2 DUP6 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH8 0xDE0B6B3A7640000 PUSH1 0xB DUP2 SWAP1 SSTORE PUSH2 0x1637 SWAP1 PUSH1 0x64 SWAP1 PUSH2 0xD9C SWAP1 PUSH1 0x65 PUSH2 0x3ED0 JUMP JUMPDEST PUSH1 0xC SSTORE PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD DUP3 MSTORE SWAP2 DUP3 MSTORE PUSH10 0x69E10DE76676D0800000 PUSH1 0x20 DUP4 ADD MSTORE PUSH10 0xD3C21BCECCEDA1000000 SWAP1 DUP3 ADD MSTORE PUSH11 0x13DA329B6336471800000 PUSH1 0x60 DUP3 ADD MSTORE PUSH11 0x1A784379D99DB42000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH11 0x422CA8B0A00A425000000 PUSH1 0xA0 DUP3 ADD MSTORE PUSH11 0x84595161401484A000000 PUSH1 0xC0 DUP3 ADD MSTORE PUSH11 0x108B2A2C28029094000000 PUSH1 0xE0 DUP3 ADD MSTORE PUSH11 0x295BE96E64066972000000 PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x1733 SWAP1 PUSH1 0xE SWAP1 PUSH1 0x9 PUSH2 0x49EE JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD DUP3 MSTORE PUSH2 0x1C2 DUP2 MSTORE PUSH2 0x190 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x15E SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x12C PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xFA PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xC8 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x96 PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x7D PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x64 PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x1790 SWAP1 PUSH1 0xF SWAP1 PUSH1 0x9 PUSH2 0x4A44 JUMP JUMPDEST POP PUSH2 0x190 PUSH1 0x10 SSTORE PUSH2 0x2710 PUSH1 0x11 SSTORE PUSH2 0xDAC PUSH1 0x12 DUP2 SWAP1 SSTORE PUSH2 0x12C PUSH1 0x13 SSTORE PUSH1 0x14 SSTORE PUSH2 0x1F4 PUSH1 0x15 DUP2 SWAP1 SSTORE PUSH1 0x6E PUSH1 0x1C SSTORE PUSH2 0x1B58 PUSH1 0x1D SSTORE PUSH1 0xC PUSH1 0x16 SSTORE PUSH1 0x17 SSTORE PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x182D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1841 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1857 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0xD SSTORE PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH21 0x10000000000000000000000000000000000000000 OR AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP1 MLOAD NUMBER DUP2 MSTORE SWAP1 MLOAD PUSH32 0x25FF68DD81B34665B5BA7E553EE5511BF6812E12ADB4A7E2C0D9E26B3099CE79 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x193E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4E20 DUP2 GT ISZERO PUSH2 0x1995 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5F646973636F756E7450657263656E74206973206F7665722032303025000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1B SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x6808A12800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH8 0xDE0B6B3A7640000 PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP4 SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0x6808A128 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1A5B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 JUMPDEST PUSH2 0x1A96 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x37 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4AC9 PUSH1 0x37 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH18 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x18160DDD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP4 SWAP2 DUP4 SWAP2 PUSH4 0x18160DDD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B25 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1B3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF DUP3 AND LT ISZERO PUSH2 0x1C15 JUMPI PUSH2 0x1C0B DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0x5 DUP5 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x1B72 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BEC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1C02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD DUP4 SWAP1 PUSH2 0x3FF4 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1B43 JUMP JUMPDEST POP PUSH2 0x1C20 DUP3 DUP3 PUSH2 0x3F97 JUMP JUMPDEST SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1C71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x1CCE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7A65726F00000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xBB8 DUP6 GT ISZERO PUSH2 0x1D25 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F7574206F662072616E67650000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1D82 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7A65726F00000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x3E8 DUP4 GT ISZERO PUSH2 0x1DD9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F7574206F662072616E67650000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1E36 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7A65726F00000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x3E8 DUP2 GT ISZERO PUSH2 0x1E8D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F7574206F662072616E67650000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1F DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x20 SWAP6 SWAP1 SWAP6 SSTORE PUSH1 0x21 DUP1 SLOAD DUP7 AND SWAP5 DUP8 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE PUSH1 0x22 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x23 DUP1 SLOAD SWAP1 SWAP4 AND SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE PUSH1 0x24 SSTORE JUMP JUMPDEST PUSH1 0x12 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1B SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1A SLOAD DUP2 JUMP JUMPDEST PUSH1 0x15 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1E SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1F71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4E20 DUP2 GT ISZERO PUSH2 0x1FC8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5F7072656D69756D50657263656E74206973206F766572203230302500000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1D SSTORE JUMP JUMPDEST PUSH1 0x18 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x21 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x202B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2710 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x203F JUMPI POP PUSH2 0x4E20 DUP2 GT ISZERO JUMPDEST PUSH2 0x207A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C1E PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1E SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x20C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x212B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6C69627261000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x2190 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x626F6E6400000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x21F3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7368617265000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2207 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP3 DUP5 PUSH2 0x40A2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2214 PUSH2 0x404E JUMP JUMPDEST ISZERO PUSH2 0x2250 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4CE6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2258 PUSH2 0x406D JUMP JUMPDEST ISZERO PUSH2 0x2294 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4CE6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD TIMESTAMP LT ISZERO PUSH2 0x22EB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A206E6F7420737461727465642079657400000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x232F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2343 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x23E7 JUMPI POP PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x23C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x23DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x2469 JUMPI POP PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2446 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x245C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x24EB JUMPI POP PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x24DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x253C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A206E656564206D6F7265207065726D697373696F6E0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x257B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4BEE PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2585 PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x25DB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A204C49425241207072696365206D6F7665640000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xB SLOAD DUP2 LT PUSH2 0x261B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x33 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B9A PUSH1 0x33 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD DUP4 GT ISZERO PUSH2 0x265C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4D42 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2666 PUSH2 0xD52 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x26BD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A20696E76616C696420626F6E6420726174650000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x26D5 PUSH8 0xDE0B6B3A7640000 PUSH2 0xD9C DUP8 DUP6 PUSH2 0x3ED0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26E1 PUSH2 0x1AAF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2769 DUP4 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2737 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x274B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 PUSH2 0x3FF4 JUMP JUMPDEST SWAP1 POP PUSH2 0x2786 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x14 SLOAD DUP6 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x27DA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F766572206D6178206465627420726174696F00000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x79CC679000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP11 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x79CC6790 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2846 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x285A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 POP PUSH4 0x40C10F19 SWAP3 POP PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x28DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x28F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x4 SLOAD PUSH2 0x2904 SWAP1 DUP9 PUSH2 0x3F97 JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH2 0x290F PUSH2 0x4122 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE DUP2 MLOAD CALLER SWAP3 PUSH32 0x73017F1B70789E2E66759EEB3C7EC11F59E6EEDB55D921CFAEC5410DD42A4799 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP NUMBER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 ORIGIN DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE CALLER DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x29E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2A61 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3E8 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x2A75 JUMPI POP PUSH2 0x2710 DUP2 GT ISZERO JUMPDEST PUSH2 0x2AC6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F7574206F662072616E67650000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x14 SSTORE JUMP JUMPDEST PUSH1 0xD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2AEE PUSH2 0x404E JUMP JUMPDEST ISZERO PUSH2 0x2B2A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4CE6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2B32 PUSH2 0x406D JUMP JUMPDEST ISZERO PUSH2 0x2B6E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4CE6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD TIMESTAMP LT ISZERO PUSH2 0x2BC5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A206E6F7420737461727465642079657400000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2BCD PUSH2 0x3AC7 JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0x2C21 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A206E6F74206F70656E6564207965740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2C8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x2D1D JUMPI POP PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CFA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2D10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x2D9F JUMPI POP PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D7C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2D92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x2E21 JUMPI POP PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x570CA735 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x570CA735 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2DEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2DFE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2E14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x2E72 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726561737572793A206E656564206D6F7265207065726D697373696F6E0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2E7A PUSH2 0x4122 JUMP JUMPDEST PUSH2 0x2E82 PUSH2 0x3A4C JUMP JUMPDEST PUSH1 0x18 SSTORE PUSH1 0xD SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2E9D SWAP1 PUSH2 0x2E97 PUSH2 0x1AAF JUMP JUMPDEST SWAP1 PUSH2 0x3F97 JUMP JUMPDEST SWAP1 POP PUSH1 0x16 SLOAD PUSH1 0x3 SLOAD LT ISZERO PUSH2 0x2ED3 JUMPI PUSH2 0x2ECE PUSH2 0x2EC9 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x17 SLOAD DUP6 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4186 JUMP JUMPDEST PUSH2 0x3152 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x18 SLOAD GT ISZERO PUSH2 0x3152 JUMPI PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x18160DDD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x18160DDD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2F67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0xB SLOAD PUSH1 0x18 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x2F7E SWAP2 PUSH2 0x3F97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2F98 PUSH6 0x5AF3107A4000 PUSH2 0xDC7 DUP9 PUSH2 0x452D JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0x2FA6 JUMPI DUP1 SWAP4 POP JUMPDEST PUSH2 0x2FC1 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x11 SLOAD DUP9 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xD SLOAD LT PUSH2 0x2FE6 JUMPI PUSH2 0x2FDF PUSH8 0xDE0B6B3A7640000 PUSH2 0xD9C DUP9 DUP8 PUSH2 0x3ED0 JUMP JUMPDEST SWAP2 POP PUSH2 0x3052 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FFE PUSH8 0xDE0B6B3A7640000 PUSH2 0xD9C DUP10 DUP9 PUSH2 0x3ED0 JUMP JUMPDEST SWAP1 POP PUSH2 0x301B PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x12 SLOAD DUP5 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP PUSH2 0x3027 DUP2 DUP5 PUSH2 0x3F97 JUMP JUMPDEST PUSH1 0x1E SLOAD SWAP1 SWAP5 POP ISZERO PUSH2 0x3050 JUMPI PUSH2 0x304D PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x1E SLOAD DUP8 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST DUP2 ISZERO PUSH2 0x3061 JUMPI PUSH2 0x3061 DUP3 PUSH2 0x4186 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x314C JUMPI PUSH1 0xD SLOAD PUSH2 0x3074 SWAP1 DUP5 PUSH2 0x3FF4 JUMP JUMPDEST PUSH1 0xD SSTORE PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x40C10F19 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x30F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x310E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD TIMESTAMP DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xF705142BF09F04297640495DDF7C59B7FD6F51894C5AEA9602D631CF05F0EFC2 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 JUMPDEST POP POP POP POP POP JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x3161 SWAP1 PUSH1 0x1 PUSH2 0x3FF4 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH1 0xC SLOAD PUSH2 0x316F PUSH2 0x3A4C JUMP JUMPDEST GT PUSH2 0x318D JUMPI PUSH2 0x3188 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x13 SLOAD PUSH2 0xDC7 PUSH2 0x1AAF JUMP JUMPDEST PUSH2 0x3190 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x4 SSTORE NUMBER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 ORIGIN DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE CALLER DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x31E8 PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP PUSH1 0xC SLOAD DUP2 GT ISZERO PUSH2 0xE00 JUMPI PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x326C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x3290 PUSH2 0xE04 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xDFD JUMPI PUSH2 0x1C20 DUP2 PUSH2 0xD9C DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0x3ED0 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x11 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x32C7 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x24 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x17 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3336 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F4 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x334A JUMPI POP PUSH2 0x2710 DUP2 GT ISZERO JUMPDEST PUSH2 0x339B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F7574206F662072616E67650000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x11 SSTORE JUMP JUMPDEST PUSH1 0x1F SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x33FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x78 DUP3 GT ISZERO PUSH2 0x3454 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5F626F6F74737472617045706F6368733A206F7574206F662072616E67650000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x3467 JUMPI POP PUSH2 0x3E8 DUP2 GT ISZERO JUMPDEST PUSH2 0x34A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4D6C PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x16 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x17 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x34F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 DUP4 PUSH1 0xFF AND LT PUSH2 0x353B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C6F PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP4 AND ISZERO PUSH2 0x356D JUMPI PUSH1 0xE PUSH1 0x1 DUP5 SUB PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x3557 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP3 GT PUSH2 0x356D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 DUP4 PUSH1 0xFF AND LT ISZERO PUSH2 0x35A2 JUMPI PUSH1 0xE DUP4 PUSH1 0x1 ADD PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x358C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP3 LT PUSH2 0x35A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0xE DUP5 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x35B3 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SSTORE POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3612 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x19 SSTORE JUMP JUMPDEST PUSH1 0xE DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3624 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xF DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3624 JUMPI INVALID JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x369A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1A SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x36E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x54575AF400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE DUP5 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x54575AF4 SWAP2 PUSH1 0x64 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x375E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3772 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x37D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xB3AB15FB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xB3AB15FB SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3883 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x38FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3935 PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP PUSH1 0xB SLOAD DUP2 GT PUSH2 0xE00 JUMPI PUSH1 0x0 PUSH2 0x394A PUSH2 0x1AAF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3969 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x14 SLOAD DUP6 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x39BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x39CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x39E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3A2A JUMPI PUSH1 0x0 PUSH2 0x39FD DUP4 DUP4 PUSH2 0x3F97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3A17 PUSH8 0xDE0B6B3A7640000 PUSH2 0xD9C DUP5 DUP10 PUSH2 0x3ED0 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A25 PUSH1 0x4 SLOAD DUP3 PUSH2 0x408C JUMP JUMPDEST SWAP7 POP POP POP JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x5460 DUP2 JUMP JUMPDEST PUSH1 0x23 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x19 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x3DDAC95300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH8 0xDE0B6B3A7640000 PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP4 SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0x3DDAC953 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3AEC PUSH2 0x3AE3 PUSH2 0x5460 PUSH1 0x3 SLOAD PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 PUSH2 0x3FF4 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1D SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1C SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3B46 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x3B59 JUMPI POP PUSH2 0x5DC DUP2 GT ISZERO JUMPDEST PUSH2 0x3BAA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F7574206F662072616E67650000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x13 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3BFB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 DUP4 PUSH1 0xFF AND LT PUSH2 0x3C3D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C6F PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x3C50 JUMPI POP PUSH2 0x3E8 DUP3 GT ISZERO JUMPDEST PUSH2 0x3CA1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5F76616C75653A206F7574206F662072616E6765000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0xF DUP5 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x35B3 JUMPI INVALID JUMPDEST PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x14 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x13 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x16 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3D19 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x15 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3D67 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x2FFAAA0900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x2FFAAA09 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3DE8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3E39 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4C98 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB SLOAD DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x3E65 JUMPI POP PUSH2 0x3E61 PUSH1 0x64 PUSH2 0xD9C PUSH1 0x78 PUSH1 0xB SLOAD PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 GT ISZERO JUMPDEST PUSH2 0x3EB6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F7574206F662072616E67650000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xC SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3EDF JUMPI POP PUSH1 0x0 PUSH2 0x35C3 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x3EEC JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3F29 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4BCD PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x3F86 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x3F8F JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x3FEE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x3F29 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST NUMBER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 ORIGIN DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST NUMBER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x409B JUMPI DUP2 PUSH2 0x3F29 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x2207 SWAP1 DUP5 SWAP1 PUSH2 0x45A8 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA2E62045 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x4183 JUMPI POP PUSH1 0x1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x40C10F19 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4207 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x421D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x20 SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x4321 JUMPI PUSH2 0x4245 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x20 SLOAD DUP6 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1F SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD SWAP4 SWAP5 POP SWAP2 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x42CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x42E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD TIMESTAMP DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xCB3F34AAA3445B461E6DA5492DC89E5C257A59FA598131F3B6BBC97A3638E409 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 JUMPDEST PUSH1 0x22 SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x4423 JUMPI PUSH2 0x4347 PUSH2 0x2710 PUSH2 0xD9C PUSH1 0x22 SLOAD DUP7 PUSH2 0x3ED0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x21 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD SWAP4 SWAP5 POP SWAP2 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x43BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x43CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x43E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD TIMESTAMP DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xDC8B715B18523E58B7FD0DA53259DFA91EFD91DF4A854D94B136E3333A3B9395 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 JUMPDEST PUSH2 0x4431 DUP2 PUSH2 0x2E97 DUP6 DUP6 PUSH2 0x3F97 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x6 SLOAD SWAP2 SWAP5 POP PUSH2 0x4452 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND PUSH1 0x0 PUSH2 0x4659 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x6 SLOAD PUSH2 0x446F SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND DUP6 PUSH2 0x4659 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x97FFE1D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x97FFE1D7 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x44D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x44E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD TIMESTAMP DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x3CA7276AB7799BF73FB79D27FF0610CD7049574F2508EF8445162833D439AEA SWAP5 POP SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP2 POP LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 JUMPDEST PUSH1 0xE DUP2 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x4542 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP4 LT PUSH2 0x4577 JUMPI PUSH1 0xF DUP2 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x4563 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x10 SSTORE PUSH2 0x459E JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD PUSH2 0x4532 JUMP JUMPDEST POP POP PUSH1 0x10 SLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x45FD DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x47B3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x2207 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x461C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x2207 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4CBC PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x46F8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 DUP6 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x46CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x46DE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x46F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD ISZERO JUMPDEST PUSH2 0x4733 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x36 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4D0C PUSH1 0x36 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x2207 SWAP1 DUP5 SWAP1 PUSH2 0x45A8 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x47C2 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x47CA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x480B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B4F PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4814 DUP6 PUSH2 0x4944 JUMP JUMPDEST PUSH2 0x4865 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x48C2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x4885 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4924 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4929 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x4939 DUP3 DUP3 DUP7 PUSH2 0x494A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x4959 JUMPI POP DUP2 PUSH2 0x3F29 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x4969 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x49B3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x499B JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x49E0 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x4A38 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x4A38 JUMPI DUP3 MLOAD DUP3 SWAP1 PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x4A0E JUMP JUMPDEST POP PUSH2 0xE00 SWAP3 SWAP2 POP PUSH2 0x4A85 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x4A38 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x4A38 JUMPI DUP3 MLOAD DUP3 SWAP1 PUSH2 0xFFFF AND SWAP1 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x4A64 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xE00 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x4A86 JUMP INVALID SLOAD PUSH19 0x6561737572793A2063616E6E6F742072656465 PUSH6 0x6D20626F6E64 PUSH20 0x2077697468207A65726F20616D6F756E74547265 PUSH2 0x7375 PUSH19 0x793A206661696C656420746F20636F6E73756C PUSH21 0x204C494252412070726963652066726F6D20746865 KECCAK256 PUSH16 0x7261636C655F7072656D69756D546872 PUSH6 0x73686F6C6420 PUSH6 0x786365656473 KECCAK256 PUSH13 0x6962726150726963654365696C PUSH10 0x6E675F7072656D69756D SLOAD PUSH9 0x726573686F6C642069 PUSH20 0x20686967686572207468616E20312E3541646472 PUSH6 0x73733A20696E PUSH20 0x756666696369656E742062616C616E636520666F PUSH19 0x2063616C6C54726561737572793A2074726561 PUSH20 0x75727920686173206E6F206D6F72652062756467 PUSH6 0x745472656173 PUSH22 0x72793A206C696272615072696365206E6F7420656C69 PUSH8 0x69626C6520666F72 KECCAK256 PUSH3 0x6F6E64 KECCAK256 PUSH17 0x75726368617365536166654D6174683A20 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F7754726561737572793A KECCAK256 PUSH4 0x616E6E6F PUSH21 0x20707572636861736520626F6E6473207769746820 PUSH27 0x65726F20616D6F756E745F6D696E74696E67466163746F72466F72 POP PUSH2 0x7969 PUSH15 0x67446562743A206F7574206F662072 PUSH2 0x6E67 PUSH6 0x5F6D61785375 PUSH17 0x706C79457870616E73696F6E5065726365 PUSH15 0x743A206F7574206F662072616E6765 0x49 PUSH15 0x6465782068617320746F206265206C PUSH16 0x776572207468616E20636F756E74206F PUSH7 0x20746965727354 PUSH19 0x6561737572793A2063616C6C6572206973206E PUSH16 0x7420746865206F70657261746F725361 PUSH7 0x6545524332303A KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564436F6E747261637447756172643A KECCAK256 PUSH16 0x6E6520626C6F636B2C206F6E65206675 PUSH15 0x6374696F6E5361666545524332303A KECCAK256 PUSH2 0x7070 PUSH19 0x6F76652066726F6D206E6F6E2D7A65726F2074 PUSH16 0x206E6F6E2D7A65726F20616C6C6F7761 PUSH15 0x636554726561737572793A206E6F74 KECCAK256 PUSH6 0x6E6F75676820 PUSH3 0x6F6E64 KECCAK256 PUSH13 0x65667420746F20707572636861 PUSH20 0x655F626F6F747374726170537570706C79457870 PUSH2 0x6E73 PUSH10 0x6F6E50657263656E743A KECCAK256 PUSH16 0x7574206F662072616E6765A264697066 PUSH20 0x58221220970D28956329B4FA24B2CD0DA8D75081 DUP3 0xB9 BALANCE 0xD4 SMOD INVALID EXP 0xB6 ADD SGT DIFFICULTY DIV 0xCD DUP8 GAS SWAP15 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
          "sourceMapi;:::-;;2517:35;;;:::i;:::-;;;;;;;;;;;;;;;;14717:318;;;;;;;;;;;;;;;;-1:-1:-1;14717:318:16;;:::i;10729:316::-;;;;;;;;;;;;;;;;-1:-1:-1;10729:316:16;;:::i;6595:718::-;;;:::i;7319:769::-;;;:::i;1361:28::-;;;:::i;17687:1083::-;;;;;;;;;;;;;;;;-1:-1:-1;17687:1083:16;;;;;;;:::i;8138:1840::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;8138:1840:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;14507:204::-;;;;;;;;;;;;;;;;-1:-1:-1;14507:204:16;;:::i;936:31::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;5017:300;;;:::i;15911:463::-;;;:::i;13303:936::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;13303:936:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1639:47::-;;;:::i;2224:30::-;;;:::i;2166:29::-;;;:::i;1781:41::-;;;:::i;4478:87::-;;;:::i;2332:41::-;;;:::i;15041:198::-;;;;;;;;;;;;;;;;-1:-1:-1;15041:198:16;;:::i;2062:38::-;;;:::i;2489:22::-;;;:::i;:::-;;;;-1:-1:-1;;;;;2489:22:16;;;;;;;;;;;;;;15245:327;;;;;;;;;;;;;;;;-1:-1:-1;15245:327:16;;:::i;22424:413::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;22424:413:16;;;;;;;;;;;;;;;;;:::i;16380:1301::-;;;;;;;;;;;;;;;;-1:-1:-1;16380:1301:16;;;;;;;:::i;2447:35::-;;;:::i;893:23::-;;;:::i;10328:111::-;;;;;;;;;;;;;;;;-1:-1:-1;10328:111:16;-1:-1:-1;;;;;10328:111:16;;:::i;12543:254::-;;;;;;;;;;;;;;;;-1:-1:-1;12543:254:16;;:::i;5337:92::-;;;:::i;1434:31::-;;;:::i;1257:21::-;;;:::i;20165:2253::-;;;:::i;1285:24::-;;;:::i;6165:424::-;;;:::i;987:24::-;;;:::i;1593:40::-;;;:::i;1135:::-;;;;;;;;;;;;;;;;-1:-1:-1;1135:40:16;;:::i;2593:41::-;;;:::i;1943:46::-;;;:::i;11943:288::-;;;;;;;;;;;;;;;;-1:-1:-1;11943:288:16;;:::i;2419:22::-;;;:::i;1017:24::-;;;:::i;12803:494::-;;;;;;;;;;;;;;;;-1:-1:-1;12803:494:16;;;;;;;:::i;11051:481::-;;;;;;;;;;;;;;;;-1:-1:-1;11051:481:16;;;;;;;;;:::i;14245:127::-;;;;;;;;;;;;;;;;-1:-1:-1;14245:127:16;;:::i;1472:28::-;;;;;;;;;;;;;;;;-1:-1:-1;1472:28:16;;:::i;1315:26::-;;;:::i;1506:34::-;;;;;;;;;;;;;;;;-1:-1:-1;1506:34:16;;:::i;14378:123::-;;;;;;;;;;;;;;;;-1:-1:-1;14378:123:16;;:::i;23337:234::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;23337:234:16;;;;;;;;;;;;;;;;;:::i;1205:20::-;;;:::i;22843:132::-;;;;;;;;;;;;;;;;-1:-1:-1;22843:132:16;-1:-1:-1;;;;;22843:132:16;;:::i;9984:99::-;;;;;;;;;;;;;;;;-1:-1:-1;9984:99:16;-1:-1:-1;;;;;9984:99:16;;:::i;10089:103::-;;;;;;;;;;;;;;;;-1:-1:-1;10089:103:16;-1:-1:-1;;;;;10089:103:16;;:::i;5435:724::-;;;:::i;779:40::-;;;:::i;2559:28::-;;;:::i;2106:30::-;;;:::i;4716:295::-;;;:::i;4584:112::-;;;:::i;2297:29::-;;;:::i;2260:31::-;;;:::i;12237:300::-;;;;;;;;;;;;;;;;-1:-1:-1;12237:300:16;;:::i;11538:399::-;;;;;;;;;;;;;;;;-1:-1:-1;11538:399:16;;;;;;;;;:::i;1547:40::-;;;:::i;1740:34::-;;;:::i;1395:32::-;;;:::i;1692:42::-;;;:::i;1907:30::-;;;:::i;15578:171::-;;;;;;;;;;;;;;;;-1:-1:-1;15578:171:16;;:::i;22981:202::-;;;;;;;;;;;;;;;;-1:-1:-1;22981:202:16;;;;;;;:::i;10445:278::-;;;;;;;;;;;;;;;;-1:-1:-1;10445:278:16;;:::i;1047:45::-;;;:::i;1231:20::-;;;:::i;23189:142::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23286:9:::1;::::0;23275:49:::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;-1:-1:-1;;;;;23286:9:16;;::::1;::::0;23275:41:::1;::::0;:49;;;;;23286:9:::1;::::0;23275:49;;;;;;;;23286:9;;23275:49;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;23189:142:::0;:::o;2517:35::-;;;;:::o;14717:318::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14834:17:::1;;14813;:38;;14805:94;;;;-1:-1:-1::0;;;14805:94:16::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14938:3;14917:17;:24;;14909:73;;;;-1:-1:-1::0;;;14909:73:16::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14992:16;:36:::0;14717:318::o;10729:316::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10874:2:::1;10844:26;:32;;:70;;;;;10910:4;10880:26;:34;;10844:70;10836:123;;;;-1:-1:-1::0;;;10836:123:16::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10984:25;:54:::0;10729:316::o;6595:718::-;6647:13;6672:19;6694:15;:13;:15::i;:::-;6672:37;;6738:13;;6723:11;:28;6719:588;;6771:15;;6767:530;;6850:13;;6842:21;;6767:530;;;6902:19;6924:40;6952:11;6924:23;6942:4;6924:13;;:17;;:23;;;;:::i;:::-;:27;;:40::i;:::-;6902:62;;7001:23;7027:62;7083:5;7027:51;7062:15;;7027:30;7043:13;;7027:11;:15;;:30;;;;:::i;:::-;:34;;:51::i;:62::-;7115:13;;7001:88;;-1:-1:-1;7115:34:16;;7001:88;7115:17;:34::i;:::-;7107:42;;7189:1;7171:15;;:19;:46;;;;;7202:15;;7194:5;:23;7171:46;7167:116;;;7249:15;;7241:23;;7167:116;6767:530;;;6595:718;;:::o;7319:769::-;7370:13;7395:19;7417:15;:13;:15::i;:::-;7395:37;;7460:17;;7446:11;:31;7442:640;;;7493:35;7531:44;7571:3;7531:35;7549:16;;7531:13;;:17;;:35;;;;:::i;:44::-;7493:82;;7608:27;7593:11;:42;7589:483;;7686:22;7711:61;7766:5;7711:50;7746:14;;7711:30;7727:13;;7711:11;:15;;:30;;;;:::i;:61::-;7798:13;;7686:86;;-1:-1:-1;7798:33:16;;7686:86;7798:17;:33::i;:::-;7790:41;;7870:1;7853:14;;:18;:44;;;;;7883:14;;7875:5;:22;7853:44;7849:113;;;7929:14;;7921:22;;7849:113;7589:483;;;;8044:13;;8036:21;;7589:483;7442:640;7319:769;;:::o;1361:28::-;;;;:::o;17687:1083::-;456:28:35;:26;:28::i;:::-;455:29;447:80;;;;-1:-1:-1;;;447:80:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;546:28;:26;:28::i;:::-;545:29;537:80;;;;-1:-1:-1;;;537:80:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3572:9:16::1;;3565:3;:16;;3557:54;;;::::0;;-1:-1:-1;;;3557:54:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;4002:5:::2;::::0;3990:29:::2;::::0;;-1:-1:-1;;;3990:29:16;;;;4031:4:::2;::::0;-1:-1:-1;;;;;4002:5:16::2;::::0;3990:27:::2;::::0;:29:::2;::::0;;::::2;::::0;::::2;::::0;;;;;;;;4002:5;3990:29;::::2;;::::0;::::2;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;-1:-1:-1::0;3990:29:16;-1:-1:-1;;;;;3990:46:16::2;;:112:::0;::::2;;;-1:-1:-1::0;4068:5:16::2;::::0;4056:29:::2;::::0;;-1:-1:-1;;;4056:29:16;;;;4097:4:::2;::::0;-1:-1:-1;;;;;4068:5:16::2;::::0;4056:27:::2;::::0;:29:::2;::::0;;::::2;::::0;::::2;::::0;;;;;;;;4068:5;4056:29;::::2;;::::0;::::2;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;-1:-1:-1::0;4056:29:16;-1:-1:-1;;;;;4056:46:16::2;;3990:112;:179;;;;-1:-1:-1::0;4134:6:16::2;::::0;4122:30:::2;::::0;;-1:-1:-1;;;4122:30:16;;;;4164:4:::2;::::0;-1:-1:-1;;;;;4134:6:16::2;::::0;4122:28:::2;::::0;:30:::2;::::0;;::::2;::::0;::::2;::::0;;;;;;;;4134:6;4122:30;::::2;;::::0;::::2;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;-1:-1:-1::0;4122:30:16;-1:-1:-1;;;;;4122:47:16::2;;3990:179;:246;;;;-1:-1:-1::0;4198:9:16::2;::::0;4189:30:::2;::::0;;-1:-1:-1;;;4189:30:16;;;;4231:4:::2;::::0;-1:-1:-1;;;;;4198:9:16::2;::::0;4189:28:::2;::::0;:30:::2;::::0;;::::2;::::0;::::2;::::0;;;;;;;;4198:9;4189:30;::::2;;::::0;::::2;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;-1:-1:-1::0;4189:30:16;-1:-1:-1;;;;;4189:47:16::2;;3990:246;3969:323;;;::::0;;-1:-1:-1;;;3969:323:16;;::::2;;::::0;::::2;::::0;::::2;::::0;;;;::::2;::::0;;;;;;;;;;;;;::::2;;17833:1:::3;17819:11;:15;17811:74;;;;-1:-1:-1::0;;;17811:74:16::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17896:18;17917:15;:13;:15::i;:::-;17896:36;;17964:11;17950:10;:25;17942:65;;;::::0;;-1:-1:-1;;;17942:65:16;;::::3;;::::0;::::3;::::0;::::3;::::0;;;;::::3;::::0;;;;;;;;;;;;;::::3;;18051:17;;18038:10;:30;18017:145;;;;-1:-1:-1::0;;;18017:145:16::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18173:13;18189:20;:18;:20::i;:::-;18173:36;;18235:1;18227:5;:9;18219:49;;;::::0;;-1:-1:-1;;;18219:49:16;;::::3;;::::0;::::3;::::0;::::3;::::0;;;;::::3;::::0;;;;;;;;;;;;;::::3;;18279:20;18302:32;18329:4;18302:22;:11:::0;18318:5;18302:15:::3;:22::i;:32::-;18359:5;::::0;18352:38:::3;::::0;;;;;18384:4:::3;18352:38;::::0;::::3;::::0;;;18279:55;;-1:-1:-1;18279:55:16;;-1:-1:-1;;;;;18359:5:16;;::::3;::::0;18352:23:::3;::::0;:38;;;;;::::3;::::0;;;;;;;;;18359:5;18352:38;::::3;;::::0;::::3;;;;::::0;::::3;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;::::0;::::3;;-1:-1:-1::0;18352:38:16;:54:::3;;18344:104;;;;-1:-1:-1::0;;;18344:104:16::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18478:62;18499:40;18508:16;;18526:12;18499:8;:40::i;:::-;18478:16;::::0;;:20:::3;:62::i;:::-;18459:16;:81:::0;18563:5:::3;::::0;18551:52:::3;::::0;;;;;18579:10:::3;18551:52;::::0;::::3;::::0;;;;;;;;;-1:-1:-1;;;;;18563:5:16;;::::3;::::0;18551:27:::3;::::0;:52;;;;;18563:5:::3;::::0;18551:52;;;;;;;;18563:5;;18551:52;::::3;;::::0;::::3;;;;::::0;::::3;;;;;;;;;;;;::::0;::::3;;;;;-1:-1:-1::0;;18620:5:16::3;::::0;18613:52:::3;::::0;-1:-1:-1;;;;;;18620:5:16::3;::::0;-1:-1:-1;18640:10:16::3;18652:12:::0;18613:26:::3;:52::i;:::-;18676:19;:17;:19::i;:::-;18711:52;::::0;;;;;::::3;::::0;::::3;::::0;;;;;18725:10:::3;::::0;18711:52:::3;::::0;;;;;;::::3;-1:-1:-1::0;;648:12:35;640:7;:21;;;;;;;;;;;662:9;640:32;;;;;;;;:39;;675:4;-1:-1:-1;;640:39:35;;;;;;;;711:10;689:33;;;;;;:40;;;;;;;;;;-1:-1:-1;;;17687:1083:16:o;8138:1840::-;4360:11;;;;;;;4359:12;4351:54;;;;;-1:-1:-1;;;4351:54:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;8385:5:::1;:14:::0;;-1:-1:-1;;8385:14:16;;::::1;-1:-1:-1::0;;;;;8385:14:16;;::::1;::::0;;;::::1;::::0;;;8409:5:::1;:14:::0;;;::::1;::::0;;::::1;;::::0;;8433:6:::1;:16:::0;;;::::1;::::0;;::::1;;::::0;;8459:11:::1;:26:::0;;;::::1;::::0;;::::1;;::::0;;8495:9:::1;:22:::0;;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;8527:9:::1;:22:::0;;;8576:6:::1;8560:13;:22:::0;;;8612:31:::1;::::0;8639:3:::1;::::0;8612:22:::1;::::0;8630:3:::1;8612:17;:22::i;:31::-;8592:17;:51:::0;8701:23:::1;:42:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;8701:42:16;;;;::::1;::::0;;-1:-1:-1;;8701:42:16::1;-1:-1:-1::0;;;;;8701:42:16;::::1;;::::0;;8795:145:::1;::::0;;::::1;::::0;::::1;::::0;;;;;8819:12:::1;8701:42;8795:145:::0;::::1;::::0;8833:13:::1;8795:145:::0;;;;8848:13:::1;8795:145:::0;;;;8863:13:::1;8795:145:::0;;;;8878:13:::1;8795:145:::0;;;;8893:14:::1;8795:145:::0;;;;8909:14:::1;8795:145:::0;;;;8925:14:::1;8701:42;8795:145:::0;;;::::1;::::0;:11:::1;::::0;:145:::1;;:::i;:::-;-1:-1:-1::0;8950:65:16::1;::::0;;::::1;::::0;::::1;::::0;;8971:3:::1;8950:65:::0;;8976:3:::1;8950:65;::::0;::::1;::::0;8981:3:::1;8950:65:::0;;;;;;;8986:3:::1;8950:65:::0;;;;8991:3:::1;8950:65:::0;;;;8996:3:::1;8950:65:::0;;;;9001:3:::1;8950:65:::0;;;;9006:3:::1;8950:65:::0;;;;9011:3:::1;8950:65:::0;;;;::::1;::::0;:17:::1;::::0;:65:::1;;:::i;:::-;-1:-1:-1::0;9054:3:16::1;9026:25;:31:::0;9130:5:::1;9102:25;:33:::0;9223:4:::1;9188:32;:39:::0;;;9319:3:::1;9289:27;:33:::0;9399:19:::1;:26:::0;9505:3:::1;9476:26;:32:::0;;;9586:3:::1;9567:16;:22:::0;9616:4:::1;9599:14;:21:::0;9694:2:::1;9676:15;:20:::0;9706:31:::1;:37:::0;-1:-1:-1;9828:5:16;9821:38:::1;::::0;;;;;9853:4:::1;9821:38;::::0;::::1;::::0;;;-1:-1:-1;;;;;9828:5:16;;::::1;::::0;9821:23:::1;::::0;:38;;;;;::::1;::::0;;;;;;;;;9828:5;9821:38;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;9821:38:16;9802:16:::1;:57:::0;9884:4:::1;9870:18:::0;;-1:-1:-1;;9870:18:16;;;::::1;::::0;::::1;9898:21;9909:10;9898:21:::0;;::::1;::::0;;;9934:37:::1;::::0;;9958:12:::1;9934:37:::0;;;;::::1;::::0;;;;9821:38:::1;9934:37:::0;;::::1;8138:1840:::0;;;;;;;:::o;14507:204::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14621:5:::1;14601:16;:25;;14593:67;;;::::0;;-1:-1:-1;;;14593:67:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;14670:15;:34:::0;14507:204::o;936:31::-;;;;;;;;;:::o;5017:300::-;5113:11;;5131:5;;5105:38;;;;;;-1:-1:-1;;;;;5131:5:16;;;5105:38;;;;5138:4;5105:38;;;;;;5070:19;;5113:11;;;;;5105:25;;:38;;;;;;;;;;;;;;;5113:11;5105:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5105:38:16;;;5101:210;;5235:65;;-1:-1:-1;;;5235:65:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5101:210;5189:14;;;-1:-1:-1;5017:300:16;:::o;15911:463::-;16015:5;;16053:24;;;;;;;;15969:7;;-1:-1:-1;;;;;16015:5:16;;15969:7;;16015:5;;16053:22;;:24;;;;;;;;;;;;;;16015:5;16053:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16053:24:16;;-1:-1:-1;16087:23:16;;16124:195;16158:23;:30;16148:40;;;;16124:195;;;16233:75;16253:10;-1:-1:-1;;;;;16253:20:16;;16274:23;16298:7;16274:32;;;;;;;;;;;;;;;;;;;;;16253:54;;;;;;;;;;;-1:-1:-1;;;;;16274:32:16;;;16253:54;;;;;;;;;;16274:32;16253:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16253:54:16;16233:15;;:19;:75::i;:::-;16215:93;-1:-1:-1;16190:9:16;;16124:195;;;-1:-1:-1;16335:32:16;:11;16351:15;16335;:32::i;:::-;16328:39;;;;;15911:463;:::o;13303:936::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;13580:22:16;::::1;13572:39;;;::::0;;-1:-1:-1;;;13572:39:16;;::::1;;::::0;;::::1;::::0;;;;;;;;::::1;::::0;;;;;;;;;;;;;::::1;;13654:4;13629:21;:29;;13621:54;;;::::0;;-1:-1:-1;;;13621:54:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;-1:-1:-1::0;;;;;13703:22:16;::::1;13695:39;;;::::0;;-1:-1:-1;;;13695:39:16;;::::1;;::::0;;::::1;::::0;;;;;;;;::::1;::::0;;;;;;;;;;;;;::::1;;13777:4;13752:21;:29;;13744:54;;;::::0;;-1:-1:-1;;;13744:54:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;-1:-1:-1::0;;;;;13826:28:16;::::1;13818:45;;;::::0;;-1:-1:-1;;;13818:45:16;;::::1;;::::0;;::::1;::::0;;;;;;;;::::1;::::0;;;;;;;;;;;;;::::1;;13912:4;13881:27;:35;;13873:60;;;::::0;;-1:-1:-1;;;13873:60:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;13962:7;:18:::0;;-1:-1:-1;;13962:18:16;;::::1;-1:-1:-1::0;;;;;13962:18:16;;::::1;;::::0;;;13990:20:::1;:44:::0;;;;14053:7:::1;:18:::0;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;14081:20:::1;:44:::0;;;;14135:13:::1;:30:::0;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;14176:26:::1;:56:::0;13303:936::o;1639:47::-;;;;:::o;2224:30::-;;;;:::o;2166:29::-;;;;:::o;1781:41::-;;;;:::o;4478:87::-;4547:11;;;;;;;;4478:87::o;2332:41::-;;;;:::o;15041:198::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15152:5:::1;15133:15;:24;;15125:65;;;::::0;;-1:-1:-1;;;15125:65:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;15200:14;:32:::0;15041:198::o;2062:38::-;;;;:::o;2489:22::-;;;-1:-1:-1;;;;;2489:22:16;;:::o;15245:327::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15392:5:::1;15361:27;:36;;:76;;;;;15432:5;15401:27;:36;;15361:76;15353:130;;;;-1:-1:-1::0;;;15353:130:16::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15509:26;:56:::0;15245:327::o;22424:413::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22649:5:::1;::::0;-1:-1:-1;;;;;22622:33:16;;::::1;22649:5:::0;::::1;22622:33;;22614:51;;;::::0;;-1:-1:-1;;;22614:51:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;22710:5;::::0;-1:-1:-1;;;;;22683:33:16;;::::1;22710:5:::0;::::1;22683:33;;22675:50;;;::::0;;-1:-1:-1;;;22675:50:16;;::::1;;::::0;;::::1;::::0;;;;;;;;::::1;::::0;;;;;;;;;;;;;::::1;;22770:6;::::0;-1:-1:-1;;;;;22743:34:16;;::::1;22770:6:::0;::::1;22743:34;;22735:52;;;::::0;;-1:-1:-1;;;22735:52:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;22797:33;-1:-1:-1::0;;;;;22797:19:16;::::1;22817:3:::0;22822:7;22797:19:::1;:33::i;:::-;22424:413:::0;;;:::o;16380:1301::-;456:28:35;:26;:28::i;:::-;455:29;447:80;;;;-1:-1:-1;;;447:80:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;546:28;:26;:28::i;:::-;545:29;537:80;;;;-1:-1:-1;;;537:80:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3572:9:16::1;;3565:3;:16;;3557:54;;;::::0;;-1:-1:-1;;;3557:54:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;4002:5:::2;::::0;3990:29:::2;::::0;;-1:-1:-1;;;3990:29:16;;;;4031:4:::2;::::0;-1:-1:-1;;;;;4002:5:16::2;::::0;3990:27:::2;::::0;:29:::2;::::0;;::::2;::::0;::::2;::::0;;;;;;;;4002:5;3990:29;::::2;;::::0;::::2;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;-1:-1:-1::0;3990:29:16;-1:-1:-1;;;;;3990:46:16::2;;:112:::0;::::2;;;-1:-1:-1::0;4068:5:16::2;::::0;4056:29:::2;::::0;;-1:-1:-1;;;4056:29:16;;;;4097:4:::2;::::0;-1:-1:-1;;;;;4068:5:16::2;::::0;4056:27:::2;::::0;:29:::2;::::0;;::::2;::::0;::::2;::::0;;;;;;;;4068:5;4056:29;::::2;;::::0;::::2;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;-1:-1:-1::0;4056:29:16;-1:-1:-1;;;;;4056:46:16::2;;3990:112;:179;;;;-1:-1:-1::0;4134:6:16::2;::::0;4122:30:::2;::::0;;-1:-1:-1;;;4122:30:16;;;;4164:4:::2;::::0;-1:-1:-1;;;;;4134:6:16::2;::::0;4122:28:::2;::::0;:30:::2;::::0;;::::2;::::0;::::2;::::0;;;;;;;;4134:6;4122:30;::::2;;::::0;::::2;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;-1:-1:-1::0;4122:30:16;-1:-1:-1;;;;;4122:47:16::2;;3990:179;:246;;;;-1:-1:-1::0;4198:9:16::2;::::0;4189:30:::2;::::0;;-1:-1:-1;;;4189:30:16;;;;4231:4:::2;::::0;-1:-1:-1;;;;;4198:9:16::2;::::0;4189:28:::2;::::0;:30:::2;::::0;;::::2;::::0;::::2;::::0;;;;;;;;4198:9;4189:30;::::2;;::::0;::::2;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;-1:-1:-1::0;4189:30:16;-1:-1:-1;;;;;4189:47:16::2;;3990:246;3969:323;;;::::0;;-1:-1:-1;;;3969:323:16;;::::2;;::::0;::::2;::::0;::::2;::::0;;;;::::2;::::0;;;;;;;;;;;;;::::2;;16525:1:::3;16510:12;:16;16502:77;;;;-1:-1:-1::0;;;16502:77:16::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16590:18;16611:15;:13;:15::i;:::-;16590:36;;16658:11;16644:10;:25;16636:65;;;::::0;;-1:-1:-1;;;16636:65:16;;::::3;;::::0;::::3;::::0;::::3;::::0;;;;::::3;::::0;;;;;;;;;;;;;::::3;;16745:13;;16732:10;:26;16711:138;;;;-1:-1:-1::0;;;16711:138:16::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16884:26;;16868:12;:42;;16860:97;;;;-1:-1:-1::0;;;16860:97:16::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16968:13;16984:21;:19;:21::i;:::-;16968:37;;17031:1;17023:5;:9;17015:49;;;::::0;;-1:-1:-1;;;17015:49:16;;::::3;;::::0;::::3;::::0;::::3;::::0;;;;::::3;::::0;;;;;;;;;;;;;::::3;;17075:19;17097:33;17125:4;17097:23;:12:::0;17114:5;17097:16:::3;:23::i;:33::-;17075:55;;17140:19;17162:27;:25;:27::i;:::-;17140:49;;17199:21;17223:44;17255:11;17230:5;;;;;;;;;-1:-1:-1::0;;;;;17230:5:16::3;-1:-1:-1::0;;;;;17223:25:16::3;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;::::0;::::3;;-1:-1:-1::0;17223:27:16;;:31:::3;:44::i;:::-;17199:68;;17302:47;17343:5;17302:36;17318:19;;17302:11;:15;;:36;;;;:::i;:47::-;17285:13;:64;;17277:96;;;::::0;;-1:-1:-1;;;17277:96:16;;::::3;;::::0;::::3;::::0;::::3;::::0;;;;::::3;::::0;;;;;;;;;;;;;::::3;;17396:5;::::0;17384:53:::3;::::0;;;;;17412:10:::3;17384:53;::::0;::::3;::::0;;;;;;;;;-1:-1:-1;;;;;17396:5:16;;::::3;::::0;17384:27:::3;::::0;:53;;;;;17396:5:::3;::::0;17384:53;;;;;;;;17396:5;;17384:53;::::3;;::::0;::::3;;;;::::0;::::3;;;;;;;;;;;;::::0;::::3;;;;;-1:-1:-1::0;;17459:5:16::3;::::0;17447:48:::3;::::0;;;;;17471:10:::3;17447:48;::::0;::::3;::::0;;;;;;;;;-1:-1:-1;;;;;17459:5:16;;::::3;::::0;-1:-1:-1;17447:23:16::3;::::0;-1:-1:-1;17447:48:16;;;;;::::3;::::0;;;;;;;;;17459:5:::3;::::0;17447:48;::::3;;::::0;::::3;;;;::::0;::::3;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;::::0;::::3;;-1:-1:-1::0;;17535:26:16::3;::::0;:44:::3;::::0;17566:12;17535:30:::3;:44::i;:::-;17506:26;:73:::0;17589:19:::3;:17;:19::i;:::-;17624:50;::::0;;;;;::::3;::::0;::::3;::::0;;;;;17636:10:::3;::::0;17624:50:::3;::::0;;;;;;::::3;-1:-1:-1::0;;648:12:35;640:7;:21;;;;;;;;;;;662:9;640:32;;;;;;;;:39;;675:4;-1:-1:-1;;640:39:35;;;;;;;;711:10;689:33;;;;;;:40;;;;;;;;;;-1:-1:-1;;;;;16380:1301:16:o;2447:35::-;;;;:::o;893:23::-;;;-1:-1:-1;;;;;893:23:16;;:::o;10328:111::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10406:11:::1;:26:::0;;-1:-1:-1;;10406:26:16::1;-1:-1:-1::0;;;;;10406:26:16;;;::::1;::::0;;;::::1;::::0;;10328:111::o;12543:254::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12669:4:::1;12645:20;:28;;:61;;;;;12701:5;12677:20;:29;;12645:61;12637:86;;;::::0;;-1:-1:-1;;;12637:86:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;12748:19;:42:::0;12543:254::o;5337:92::-;5406:16;;5337:92;:::o;1434:31::-;;;;:::o;1257:21::-;;;-1:-1:-1;;;;;1257:21:16;;:::o;20165:2253::-;456:28:35;:26;:28::i;:::-;455:29;447:80;;;;-1:-1:-1;;;447:80:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;546:28;:26;:28::i;:::-;545:29;537:80;;;;-1:-1:-1;;;537:80:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3572:9:16::1;;3565:3;:16;;3557:54;;;::::0;;-1:-1:-1;;;3557:54:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;3681:16:::2;:14;:16::i;:::-;3674:3;:23;;3666:60;;;::::0;;-1:-1:-1;;;3666:60:16;;::::2;;::::0;::::2;::::0;::::2;::::0;;;;::::2;::::0;;;;;;;;;;;;;::::2;;4002:5:::3;::::0;3990:29:::3;::::0;;-1:-1:-1;;;3990:29:16;;;;4031:4:::3;::::0;-1:-1:-1;;;;;4002:5:16::3;::::0;3990:27:::3;::::0;:29:::3;::::0;;::::3;::::0;::::3;::::0;;;;;;;;4002:5;3990:29;::::3;;::::0;::::3;;;;::::0;::::3;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;::::0;::::3;;-1:-1:-1::0;3990:29:16;-1:-1:-1;;;;;3990:46:16::3;;:112:::0;::::3;;;-1:-1:-1::0;4068:5:16::3;::::0;4056:29:::3;::::0;;-1:-1:-1;;;4056:29:16;;;;4097:4:::3;::::0;-1:-1:-1;;;;;4068:5:16::3;::::0;4056:27:::3;::::0;:29:::3;::::0;;::::3;::::0;::::3;::::0;;;;;;;;4068:5;4056:29;::::3;;::::0;::::3;;;;::::0;::::3;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;::::0;::::3;;-1:-1:-1::0;4056:29:16;-1:-1:-1;;;;;4056:46:16::3;;3990:112;:179;;;;-1:-1:-1::0;4134:6:16::3;::::0;4122:30:::3;::::0;;-1:-1:-1;;;4122:30:16;;;;4164:4:::3;::::0;-1:-1:-1;;;;;4134:6:16::3;::::0;4122:28:::3;::::0;:30:::3;::::0;;::::3;::::0;::::3;::::0;;;;;;;;4134:6;4122:30;::::3;;::::0;::::3;;;;::::0;::::3;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;::::0;::::3;;-1:-1:-1::0;4122:30:16;-1:-1:-1;;;;;4122:47:16::3;;3990:179;:246;;;;-1:-1:-1::0;4198:9:16::3;::::0;4189:30:::3;::::0;;-1:-1:-1;;;4189:30:16;;;;4231:4:::3;::::0;-1:-1:-1;;;;;4198:9:16::3;::::0;4189:28:::3;::::0;:30:::3;::::0;;::::3;::::0;::::3;::::0;;;;;;;;4198:9;4189:30;::::3;;::::0;::::3;;;;::::0;::::3;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;::::0;::::3;;-1:-1:-1::0;4189:30:16;-1:-1:-1;;;;;4189:47:16::3;;3990:246;3969:323;;;::::0;;-1:-1:-1;;;3969:323:16;;::::3;;::::0;::::3;::::0;::::3;::::0;;;;::::3;::::0;;;;;;;;;;;;;::::3;;20268:19:::4;:17;:19::i;:::-;20323:15;:13;:15::i;:::-;20297:23;:41:::0;20402:16:::4;::::0;20348:19:::4;::::0;20370:49:::4;::::0;:27:::4;:25;:27::i;:::-;:31:::0;::::4;:49::i;:::-;20348:71;;20441:15;;20433:5;;:23;20429:1983;;;20523:77;20540:59;20593:5;20540:48;20556:31;;20540:11;:15;;:48;;;;:::i;:59::-;20523:16;:77::i;:::-;20429:1983;;;20661:17;;20635:23;;:43;20631:1771;;;20823:5;::::0;20816:27:::4;::::0;;;;;;;20795:18:::4;::::0;-1:-1:-1;;;;;20823:5:16::4;::::0;20816:25:::4;::::0;:27:::4;::::0;;::::4;::::0;::::4;::::0;;;;;;;;20823:5;20816:27;::::4;;::::0;::::4;;;;::::0;::::4;;;;;;;;;;;;::::0;::::4;;;;;;;;;;;;;;;;;;;::::0;::::4;;-1:-1:-1::0;20816:27:16;20911:13:::4;::::0;20883:23:::4;::::0;20816:27;;-1:-1:-1;20861:19:16::4;::::0;20883:42:::4;::::0;:27:::4;:42::i;:::-;20861:64;;20943:21;20982:26:::0;21026:12:::4;21041:58;21094:4;21041:48;21077:11;21041:35;:48::i;:58::-;21026:73;;21135:4;21121:11;:18;21117:83;;;21177:4;21163:18;;21117:83;21241:52;21287:5;21241:41;21256:25;;21241:10;:14;;:41;;;;:::i;:52::-;21221:16;;:72;21217:778;;21406:38;21439:4;21406:28;:11:::0;21422;21406:15:::4;:28::i;:38::-;21385:59;;21217:778;;;21559:20;21582:38;21615:4;21582:28;:11:::0;21598;21582:15:::4;:28::i;:38::-;21559:61;;21663;21718:5;21663:50;21680:32;;21663:12;:16;;:50;;;;:::i;:61::-;21642:82:::0;-1:-1:-1;21762:36:16::4;:12:::0;21642:82;21762:16:::4;:36::i;:::-;21824:26;::::0;21746:52;;-1:-1:-1;21824:30:16;21820:157:::4;;21898:56;21948:5;21898:45;21916:26;;21898:13;:17;;:45;;;;:::i;:56::-;21882:72;;21820:157;21217:778;;22016:22:::0;;22012:105:::4;;22062:36;22079:18;22062:16;:36::i;:::-;22138:17:::0;;22134:254:::4;;22198:16;::::0;:35:::4;::::0;22219:13;22198:20:::4;:35::i;:::-;22179:16;:54:::0;22267:5:::4;::::0;22255:53:::4;::::0;;;;;22287:4:::4;22255:53;::::0;::::4;::::0;;;;;;;;;-1:-1:-1;;;;;22267:5:16;;::::4;::::0;22255:23:::4;::::0;:53;;;;;::::4;::::0;;;;;;;;;22267:5:::4;::::0;22255:53;::::4;;::::0;::::4;;;;::::0;::::4;;;;;;;;;;;;::::0;::::4;;;;;;;;;;;;;;;;;;;::::0;::::4;;-1:-1:-1::0;;22335:34:16::4;::::0;;22350:3:::4;22335:34:::0;;22255:53:::4;22335:34:::0;::::4;::::0;;;;;::::4;::::0;;;;;;;;;::::4;22134:254;20631:1771;;;;;;-1:-1:-1::0;3757:5:16::2;::::0;:12:::2;::::0;3767:1:::2;3757:9;:12::i;:::-;3749:5;:20:::0;3827:17:::2;::::0;3809:15:::2;:13;:15::i;:::-;:35;3808:115;;3852:71;3917:5;3852:60;3884:27;;3852;:25;:27::i;:71::-;3808:115;;;3848:1;3808:115;3779:26;:144:::0;648:12:35;640:7;:21;;;;;;;;;;;662:9;640:32;;;;;;;;:39;;675:4;-1:-1:-1;;640:39:35;;;;;;;;711:10;689:33;;;;;;:40;;;;;;;;;;20165:2253:16:o;1285:24::-;;;-1:-1:-1;;;;;1285:24:16;;:::o;6165:424::-;6216:24;6252:19;6274:15;:13;:15::i;:::-;6252:37;;6317:17;;6303:11;:31;6299:284;;;6379:5;;6372:38;;;;;;6404:4;6372:38;;;;;;6350:19;;-1:-1:-1;;;;;6379:5:16;;6372:23;;:38;;;;;;;;;;;;;;6379:5;6372:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6372:38:16;;-1:-1:-1;6424:13:16;6440:20;:18;:20::i;:::-;6424:36;-1:-1:-1;6478:9:16;;6474:99;;6526:32;6552:5;6526:21;:11;6542:4;6526:15;:21::i;987:24::-;;;;:::o;1593:40::-;;;;:::o;1135:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1135:40:16;;-1:-1:-1;1135:40:16;:::o;2593:41::-;;;;:::o;1943:46::-;;;;:::o;11943:288::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12087:3:::1;12057:26;:33;;:72;;;;;12124:5;12094:26;:35;;12057:72;12049:97;;;::::0;;-1:-1:-1;;;12049:97:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;12170:25;:54:::0;11943:288::o;2419:22::-;;;-1:-1:-1;;;;;2419:22:16;;:::o;1017:24::-;;;;:::o;12803:494::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12953:3:::1;12933:16;:23;;12925:66;;;::::0;;-1:-1:-1;;;12925:66:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;13059:3;13023:32;:39;;:83;;;;;13102:4;13066:32;:40;;13023:83;13015:142;;;;-1:-1:-1::0;;;13015:142:16::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13180:15;:34:::0;;;;13224:31:::1;:66:::0;12803:494::o;11051:481::-;3436:8;;11141:4;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11237:1:::1;11228:6;:10;;;11220:64;;;;-1:-1:-1::0;;;11220:64:16::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11298:10;::::0;::::1;::::0;11294:82:::1;;11341:11;11362:1;11353:6;:10;11341:23;;;;;;;;;;;;;;;;;;11332:6;:32;11324:41;;;::::0;::::1;;11398:1;11389:6;:10;;;11385:82;;;11432:11;11444:6;11453:1;11444:10;11432:23;;;;;;;;;;;;;;;;;;11423:6;:32;11415:41;;;::::0;::::1;;11498:6;11476:11;11488:6;11476:19;;;;;;;;;;;::::0;;;::::1;::::0;;;::::1;:28:::0;-1:-1:-1;11521:4:16::1;3509:1;11051:481:::0;;;;:::o;14245:127::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14331:15:::1;:34:::0;14245:127::o;1472:28::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1472:28:16;:::o;1315:26::-;;;-1:-1:-1;;;;;1315:26:16;;:::o;1506:34::-;;;;;;;;;;14378:123;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14462:14:::1;:32:::0;14378:123::o;23337:234::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23503:9:::1;::::0;23492:72:::1;::::0;;;;;-1:-1:-1;;;;;23492:72:16;;::::1;;::::0;::::1;::::0;;;;;;;;;::::1;::::0;;;;;;23503:9;;;::::1;::::0;23492:50:::1;::::0;:72;;;;;23503:9:::1;::::0;23492:72;;;;;;;23503:9;;23492:72;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;23337:234:::0;;;:::o;1205:20::-;;;-1:-1:-1;;;;;1205:20:16;;:::o;22843:132::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22935:9:::1;::::0;22924:44:::1;::::0;;;;;-1:-1:-1;;;;;22924:44:16;;::::1;;::::0;::::1;::::0;;;22935:9;;;::::1;::::0;22924:33:::1;::::0;:44;;;;;22935:9:::1;::::0;22924:44;;;;;;;22935:9;;22924:44;::::1;;::::0;::::1;;;;::::0;::::1;9984:99:::0;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10056:8:::1;:20:::0;;-1:-1:-1;;10056:20:16::1;-1:-1:-1::0;;;;;10056:20:16;;;::::1;::::0;;;::::1;::::0;;9984:99::o;10089:103::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10163:9:::1;:22:::0;;-1:-1:-1;;10163:22:16::1;-1:-1:-1::0;;;;;10163:22:16;;;::::1;::::0;;;::::1;::::0;;10089:103::o;5435:724::-;5488:26;5526:19;5548:15;:13;:15::i;:::-;5526:37;;5592:13;;5577:11;:28;5573:580;;5621:20;5644:27;:25;:27::i;:::-;5621:50;;5685:22;5710:48;5752:5;5710:37;5727:19;;5710:12;:16;;:37;;;;:::i;:48::-;5685:73;;5772:19;5801:5;;;;;;;;;-1:-1:-1;;;;;5801:5:16;-1:-1:-1;;;;;5794:25:16;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5794:27:16;;-1:-1:-1;5839:28:16;;;5835:308;;;5887:24;5914:31;:14;5933:11;5914:18;:31::i;:::-;5887:58;-1:-1:-1;5963:25:16;5991:43;6029:4;5991:33;5887:58;6012:11;5991:20;:33::i;:43::-;5963:71;;6073:55;6082:26;;6110:17;6073:8;:55::i;:::-;6052:76;;5835:308;;;5573:580;;;5435:724;;:::o;779:40::-;812:7;779:40;:::o;2559:28::-;;;-1:-1:-1;;;;;2559:28:16;;:::o;2106:30::-;;;;:::o;4716:295::-;4804:11;;4825:5;;4796:41;;;;;;-1:-1:-1;;;;;4825:5:16;;;4796:41;;;;4832:4;4796:41;;;;;;4762:18;;4804:11;;;;;4796:28;;:41;;;;;;;;;;;;;;;4804:11;4796:41;;;;;;;;;;4584:112;4631:7;4657:32;4671:17;812:7;4671:5;;:9;;:17;;;;:::i;:::-;4657:9;;;:13;:32::i;:::-;4650:39;;4584:112;:::o;2297:29::-;;;;:::o;2260:31::-;;;;:::o;12237:300::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12387:3:::1;12355:28;:35;;:75;;;;;12426:4;12394:28;:36;;12355:75;12347:100;;;::::0;;-1:-1:-1;;;12347:100:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;12472:27;:58:::0;12237:300::o;11538:399::-;3436:8;;11634:4;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11730:1:::1;11721:6;:10;;;11713:64;;;;-1:-1:-1::0;;;11713:64:16::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11805:2;11795:6;:12;;:30;;;;;11821:4;11811:6;:14;;11795:30;11787:63;;;::::0;;-1:-1:-1;;;11787:63:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;11903:6;11875:17;11893:6;11875:25;;;;;;;;;1547:40:::0;;;;:::o;1740:34::-;;;;:::o;1395:32::-;;;;:::o;1692:42::-;;;;:::o;1907:30::-;;;;:::o;15578:171::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15686:26:::1;:56:::0;15578:171::o;22981:202::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23112:9:::1;::::0;23101:75:::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;;;;;;;-1:-1:-1;;;;;23112:9:16;;::::1;::::0;23101:31:::1;::::0;:75;;;;;23112:9:::1;::::0;23101:75;;;;;;;;23112:9;;23101:75;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;22981:202:::0;;:::o;10445:278::-;3436:8;;-1:-1:-1;;;;;3436:8:16;3448:10;3436:22;3428:71;;;;-1:-1:-1;;;3428:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10565:13:::1;;10543:18;:35;;:92;;;;;10604:31;10631:3;10604:22;10622:3;10604:13;;:17;;:22;;;;:::i;:31::-;10582:18;:53;;10543:92;10535:117;;;::::0;;-1:-1:-1;;;10535:117:16;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;10678:17;:38:::0;10445:278::o;1047:45::-;;;;:::o;1231:20::-;;;-1:-1:-1;;;;;1231:20:16;;:::o;3538:215:3:-;3596:7;3619:6;3615:20;;-1:-1:-1;3634:1:3;3627:8;;3615:20;3657:5;;;3661:1;3657;:5;:1;3680:5;;;;;:10;3672:56;;;;-1:-1:-1;;;3672:56:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3745:1;3538:215;-1:-1:-1;;;3538:215:3:o;4217:150::-;4275:7;4306:1;4302;:5;4294:44;;;;;-1:-1:-1;;;4294:44:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;4359:1;4355;:5;;;;;;;4217:150;-1:-1:-1;;;4217:150:3:o;3136:155::-;3194:7;3226:1;3221;:6;;3213:49;;;;;-1:-1:-1;;;3213:49:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3279:5:3;;;3136:155::o;2690:175::-;2748:7;2779:5;;;2802:6;;;;2794:46;;;;;-1:-1:-1;;;2794:46:3;;;;;;;;;;;;;;;;;;;;;;;;;;;154:123:35;246:12;215:4;238:21;;;;;;;;;;;260:9;238:32;;;;;;;;;;154:123;:::o;283:124::-;375:12;344:4;367:21;;;;;;;;;;;389:10;367:33;;;;;;;;;;283:124;:::o;399:104:2:-;457:7;487:1;483;:5;:13;;495:1;483:13;;;-1:-1:-1;491:1:2;;476:20;-1:-1:-1;399:104:2:o;704:175:7:-;813:58;;;-1:-1:-1;;;;;813:58:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;836:23;813:58;;;786:86;;806:5;;786:19;:86::i;15806:99:16:-;15866:11;;;;;;;;;-1:-1:-1;;;;;15866:11:16;-1:-1:-1;;;;;15858:27:16;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15854:45;15806:99::o;18776:1005::-;18850:5;;18838:47;;;;;;18870:4;18838:47;;;;;;;;;;;;-1:-1:-1;;;;;18850:5:16;;;;18838:23;;:47;;;;;;;;;;;;;;;18850:5;;18838:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;18838:47:16;18942:20;18896:28;;18942:24;18938:248;;19005:44;19043:5;19005:33;19017:20;;19005:7;:11;;:33;;;;:::i;:44::-;19070:5;;19086:7;;19063:53;;;;;;-1:-1:-1;;;;;19086:7:16;;;19063:53;;;;;;;;;;;;18982:67;;-1:-1:-1;19070:5:16;;;19063:22;;:53;;;;;;;;;;;;;;;19070:5;;19063:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;19135:40:16;;;19149:3;19135:40;;19063:53;19135:40;;;;;;;;;;;;;;;;;;18938:248;19242:20;;19196:28;;19242:24;19238:248;;19305:44;19343:5;19305:33;19317:20;;19305:7;:11;;:33;;;;:::i;:44::-;19370:5;;19386:7;;19363:53;;;;;;-1:-1:-1;;;;;19386:7:16;;;19363:53;;;;;;;;;;;;19282:67;;-1:-1:-1;19370:5:16;;;19363:22;;:53;;;;;;;;;;;;;;;19370:5;;19363:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;19435:40:16;;;19449:3;19435:40;;19363:53;19435:40;;;;;;;;;;;;;;;;;;19238:248;19506:59;19544:20;19506:33;:7;19518:20;19506:11;:33::i;:59::-;19602:9;;19583:5;;19496:69;;-1:-1:-1;19576:39:16;;-1:-1:-1;;;;;19583:5:16;;;;19602:9;;19576:25;:39::i;:::-;19651:9;;19632:5;;19625:45;;-1:-1:-1;;;;;19632:5:16;;;;19651:9;19662:7;19625:25;:45::i;:::-;19691:9;;19680:50;;;;;;;;;;;;;;-1:-1:-1;;;;;19691:9:16;;;;19680:41;;:50;;;;;19691:9;;19680:50;;;;;;;;19691:9;;19680:50;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;19745:29:16;;;19761:3;19745:29;;;;;;;;;;;;-1:-1:-1;19745:29:16;;;;;;;;-1:-1:-1;19745:29:16;18776:1005;;;:::o;19787:372::-;19872:7;19911:1;19891:220;19971:11;19983:6;19971:19;;;;;;;;;;;;;;;;;;19955:12;:35;19951:150;;20038:17;20056:6;20038:25;;;;;;;;;;;;;;;;;;;;20010;:53;20081:5;;19951:150;19927:8;;19891:220;;;-1:-1:-1;;20127:25:16;;19787:372;;;:::o;2967:751:7:-;3386:23;3412:69;3440:4;3412:69;;;;;;;;;;;;;;;;;3420:5;-1:-1:-1;;;;;3412:27:7;;;:69;;;;;:::i;:::-;3495:17;;3386:95;;-1:-1:-1;3495:21:7;3491:221;;3635:10;3624:30;;;;;;;;;;;;;;;-1:-1:-1;3624:30:7;3616:85;;;;-1:-1:-1;;;3616:85:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1348:613;1713:10;;;1712:62;;-1:-1:-1;1729:39:7;;;;;;1753:4;1729:39;;;;-1:-1:-1;;;;;1729:39:7;;;;;;;;;:15;;;;;;:39;;;;;;;;;;;;;;;:15;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1729:39:7;:44;1712:62;1704:150;;;;-1:-1:-1;;;1704:150:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1891:62;;;-1:-1:-1;;;;;1891:62:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1914:22;1891:62;;;1864:90;;1884:5;;1864:19;:90::i;3581:193:8:-;3684:12;3715:52;3737:6;3745:4;3751:1;3754:12;3715:21;:52::i;:::-;3708:59;3581:193;-1:-1:-1;;;;3581:193:8:o;4608:523::-;4735:12;4792:5;4767:21;:30;;4759:81;;;;-1:-1:-1;;;4759:81:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4858:18;4869:6;4858:10;:18::i;:::-;4850:60;;;;;-1:-1:-1;;;4850:60:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;4981:12;4995:23;5022:6;-1:-1:-1;;;;;5022:11:8;5042:5;5050:4;5022:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4980:75;;;;5072:52;5090:7;5099:10;5111:12;5072:17;:52::i;:::-;5065:59;4608:523;-1:-1:-1;;;;;;;4608:523:8:o;726:413::-;1086:20;1124:8;;;726:413::o;7091:725::-;7206:12;7234:7;7230:580;;;-1:-1:-1;7264:10:8;7257:17;;7230:580;7375:17;;:21;7371:429;;7633:10;7627:17;7693:15;7680:10;7676:2;7672:19;7665:44;7582:145;7772:12;7765:20;;-1:-1:-1;;;7765:20:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "3983800",
            "executionCost": "35386",
            "totalCost": "4019186"
          },
          "external": {
            "PERIOD()": "266",
            "allocateSeigniorage()": "infinite",
            "boardroom()": "1149",
            "boardroomAllocateSeigniorage(uint256)": "infinite",
            "boardroomGovernanceRecoverUnsupported(address,uint256,address)": "infinite",
            "boardroomSetLockUp(uint256,uint256)": "infinite",
            "boardroomSetOperator(address)": "infinite",
            "bondDepletionFloorPercent()": "1131",
            "bondSupplyExpansionPercent()": "1110",
            "bootstrapEpochs()": "1131",
            "bootstrapSupplyExpansionPercent()": "1111",
            "buyBonds(uint256,uint256)": "infinite",
            "daoFund()": "1128",
            "daoFundSharedPercent()": "1110",
            "devFund()": "1172",
            "devFundSharedPercent()": "1090",
            "discountPercent()": "1111",
            "epoch()": "1111",
            "epochSupplyContractionLeft()": "1108",
            "excludedFromTotalSupply(uint256)": "2039",
            "getBondDiscountRate()": "infinite",
            "getBondPremiumRate()": "infinite",
            "getBurnableLibraLeft()": "infinite",
            "getLibraCirculatingSupply()": "infinite",
            "getLibraPrice()": "infinite",
            "getLibraUpdatedPrice()": "infinite",
            "getRedeemableBonds()": "infinite",
            "getReserve()": "1088",
            "governanceRecoverUnsupported(address,uint256,address)": "infinite",
            "initialize(address,address,address,address,address,address,uint256)": "infinite",
            "initialized()": "1135",
            "insuranceFund()": "1127",
            "insuranceFundSharedPercent()": "1089",
            "isInitialized()": "1155",
            "lbond()": "1169",
            "libra()": "1127",
            "libraOracle()": "1150",
            "libraPriceCeiling()": "1087",
            "libraPriceOne()": "1089",
            "lshare()": "1171",
            "maxDebtRatioPercent()": "1110",
            "maxDiscountRate()": "1110",
            "maxExpansionTiers(uint256)": "2021",
            "maxPremiumRate()": "1088",
            "maxSupplyContractionPercent()": "1109",
            "maxSupplyExpansionPercent()": "1088",
            "mintingFactorForPayingDebt()": "1067",
            "nextEpochPoint()": "infinite",
            "operator()": "1171",
            "premiumPercent()": "1110",
            "premiumThreshold()": "1087",
            "previousEpochLibraPrice()": "1111",
            "redeemBonds(uint256,uint256)": "infinite",
            "seigniorageExpansionFloorPercent()": "1089",
            "seigniorageSaved()": "1110",
            "setBoardroom(address)": "infinite",
            "setBondDepletionFloorPercent(uint256)": "infinite",
            "setBondSupplyExpansionPercent(uint256)": "infinite",
            "setBootstrap(uint256,uint256)": "infinite",
            "setDiscountPercent(uint256)": "infinite",
            "setExtraFunds(address,uint256,address,uint256,address,uint256)": "infinite",
            "setLibraOracle(address)": "infinite",
            "setLibraPriceCeiling(uint256)": "infinite",
            "setMaxDebtRatioPercent(uint256)": "infinite",
            "setMaxDiscountRate(uint256)": "infinite",
            "setMaxExpansionTiersEntry(uint8,uint256)": "infinite",
            "setMaxPremiumRate(uint256)": "infinite",
            "setMaxSupplyContractionPercent(uint256)": "infinite",
            "setMaxSupplyExpansionPercents(uint256)": "infinite",
            "setMintingFactorForPayingDebt(uint256)": "infinite",
            "setOperator(address)": "infinite",
            "setPremiumPercent(uint256)": "infinite",
            "setPremiumThreshold(uint256)": "infinite",
            "setSupplyTiersEntry(uint8,uint256)": "infinite",
            "startTime()": "1109",
            "supplyTiers(uint256)": "2022"
          },
          "internal": {
            "_calculateMaxSupplyExpansionPercent(uint256)": "infinite",
            "_sendToBoardroom(uint256)": "infinite",
            "_updateLibraPrice()": "infinite"
          }
        },
        "methodIdentifiers": {
          "PERIOD()": "b4d1d795",
          "allocateSeigniorage()": "5b756179",
          "boardroom()": "5e02c51e",
          "boardroomAllocateSeigniorage(uint256)": "01a93783",
          "boardroomGovernanceRecoverUnsupported(address,uint256,address)": "a3ec30fe",
          "boardroomSetLockUp(uint256,uint256)": "f8cd4d72",
          "boardroomSetOperator(address)": "b06ce14a",
          "bondDepletionFloorPercent()": "81d11eaf",
          "bondSupplyExpansionPercent()": "349aa30a",
          "bootstrapEpochs()": "f14698de",
          "bootstrapSupplyExpansionPercent()": "874106cc",
          "buyBonds(uint256,uint256)": "54f04a11",
          "daoFund()": "8d934f74",
          "daoFundSharedPercent()": "55ebdeef",
          "devFund()": "4390d2a8",
          "devFundSharedPercent()": "03be7e76",
          "discountPercent()": "29ef1919",
          "epoch()": "900cf0cf",
          "epochSupplyContractionLeft()": "fcb6f008",
          "excludedFromTotalSupply(uint256)": "82cad838",
          "getBondDiscountRate()": "0cf60175",
          "getBondPremiumRate()": "0db7eb0b",
          "getBurnableLibraLeft()": "b40d7365",
          "getLibraCirculatingSupply()": "196dd862",
          "getLibraPrice()": "bd20f9af",
          "getLibraUpdatedPrice()": "16f5ff17",
          "getRedeemableBonds()": "72c054f9",
          "getReserve()": "59bf5d39",
          "governanceRecoverUnsupported(address,uint256,address)": "54575af4",
          "initialize(address,address,address,address,address,address,uint256)": "1460e390",
          "initialized()": "158ef93e",
          "insuranceFund()": "b7902303",
          "insuranceFundSharedPercent()": "860c3177",
          "isInitialized()": "392e53cd",
          "lbond()": "fec3a601",
          "libra()": "aed3ba6b",
          "libraOracle()": "9f7be325",
          "libraPriceCeiling()": "dfe2f9ee",
          "libraPriceOne()": "0f25cde5",
          "lshare()": "5b023168",
          "maxDebtRatioPercent()": "da3ed419",
          "maxDiscountRate()": "b8a878f9",
          "maxExpansionTiers(uint256)": "a0487eea",
          "maxPremiumRate()": "2e9c7b65",
          "maxSupplyContractionPercent()": "e90b2454",
          "maxSupplyExpansionPercent()": "d98f2495",
          "mintingFactorForPayingDebt()": "4013a08e",
          "nextEpochPoint()": "c5967c26",
          "operator()": "570ca735",
          "premiumPercent()": "c8412d02",
          "premiumThreshold()": "c8f987f3",
          "previousEpochLibraPrice()": "42679903",
          "redeemBonds(uint256,uint256)": "118ebbf9",
          "seigniorageExpansionFloorPercent()": "22f832cd",
          "seigniorageSaved()": "5a0fc79c",
          "setBoardroom(address)": "b3ffc777",
          "setBondDepletionFloorPercent(uint256)": "8c664db6",
          "setBondSupplyExpansionPercent(uint256)": "f245245a",
          "setBootstrap(uint256,uint256)": "91bbfed5",
          "setDiscountPercent(uint256)": "154ec2db",
          "setExtraFunds(address,uint256,address,uint256,address,uint256)": "1b0fb35f",
          "setLibraOracle(address)": "58a69833",
          "setLibraPriceCeiling(uint256)": "f921eb33",
          "setMaxDebtRatioPercent(uint256)": "591663e1",
          "setMaxDiscountRate(uint256)": "98b762a1",
          "setMaxExpansionTiersEntry(uint8,uint256)": "d4b14944",
          "setMaxPremiumRate(uint256)": "a204452b",
          "setMaxSupplyContractionPercent(uint256)": "cecce38e",
          "setMaxSupplyExpansionPercents(uint256)": "0b5bcec7",
          "setMintingFactorForPayingDebt(uint256)": "499f3f19",
          "setOperator(address)": "b3ab15fb",
          "setPremiumPercent(uint256)": "40af7ba5",
          "setPremiumThreshold(uint256)": "04e5c7b1",
          "setSupplyTiersEntry(uint8,uint256)": "940e6064",
          "startTime()": "78e97925",
          "supplyTiers(uint256)": "99820025"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"BoardroomFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"libraAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BoughtBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BurnedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DaoFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DevFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"InsuranceFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"libraAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"TreasuryFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boardroom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"boardroomAllocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"boardroomGovernanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLockupEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLockupEpochs\",\"type\":\"uint256\"}],\"name\":\"boardroomSetLockUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"boardroomSetOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondDepletionFloorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_libraAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"buyBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSupplyContractionLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludedFromTotalSupply\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnableLibraLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnableLibraLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLibraCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLibraPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"libraPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLibraUpdatedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_libraPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedeemableBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemableBonds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_libra\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lbond\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lshare\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_libraOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boardroom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_genesisPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lbond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libra\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libraOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libraPriceCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libraPriceOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lshare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDebtRatioPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxExpansionTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyContractionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFactorForPayingDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousEpochLibraPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"redeemBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigniorageExpansionFloorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigniorageSaved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boardroom\",\"type\":\"address\"}],\"name\":\"setBoardroom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondDepletionFloorPercent\",\"type\":\"uint256\"}],\"name\":\"setBondDepletionFloorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setBondSupplyExpansionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bootstrapEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bootstrapSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setBootstrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountPercent\",\"type\":\"uint256\"}],\"name\":\"setDiscountPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daoFundSharedPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_devFundSharedPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_insuranceFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_insuranceFundSharedPercent\",\"type\":\"uint256\"}],\"name\":\"setExtraFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_libraOracle\",\"type\":\"address\"}],\"name\":\"setLibraOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_libraPriceCeiling\",\"type\":\"uint256\"}],\"name\":\"setLibraPriceCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDebtRatioPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxDebtRatioPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDiscountRate\",\"type\":\"uint256\"}],\"name\":\"setMaxDiscountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxExpansionTiersEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPremiumRate\",\"type\":\"uint256\"}],\"name\":\"setMaxPremiumRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyContractionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyContractionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyExpansionPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingFactorForPayingDebt\",\"type\":\"uint256\"}],\"name\":\"setMintingFactorForPayingDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumPercent\",\"type\":\"uint256\"}],\"name\":\"setPremiumPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumThreshold\",\"type\":\"uint256\"}],\"name\":\"setPremiumThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setSupplyTiersEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\",\"keccak256\":\"0x9486045e189facd2e868ece35249872598ef03f1087fb6fa4d1161842daa2287\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./lib/Babylonian.sol\\\";\\nimport \\\"./owner/Operator.sol\\\";\\nimport \\\"./utils/ContractGuard.sol\\\";\\nimport \\\"./interfaces/IBasisAsset.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IBoardroom.sol\\\";\\n\\n// interface IBondTreasury {\\n//     function totalVested() external view returns (uint256);\\n// }\\n\\ncontract Treasury is ContractGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========= CONSTANT VARIABLES ======== */\\n\\n    uint256 public constant PERIOD = 6 hours;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // governance\\n    address public operator;\\n\\n    // flags\\n    bool public initialized = false;\\n\\n    // epoch\\n    uint256 public startTime;\\n    uint256 public epoch = 0;\\n    uint256 public epochSupplyContractionLeft = 0;\\n\\n    // exclusions from total supply\\n    address[] public excludedFromTotalSupply;\\n\\n    // core components\\n    address public libra;\\n    address public lbond;\\n    address public lshare;\\n\\n    address public boardroom;\\n    address public libraOracle;\\n\\n    // price\\n    uint256 public libraPriceOne;\\n    uint256 public libraPriceCeiling;\\n\\n    uint256 public seigniorageSaved;\\n\\n    uint256[] public supplyTiers;\\n    uint256[] public maxExpansionTiers;\\n\\n    uint256 public maxSupplyExpansionPercent;\\n    uint256 public bondDepletionFloorPercent;\\n    uint256 public seigniorageExpansionFloorPercent;\\n    uint256 public maxSupplyContractionPercent;\\n    uint256 public maxDebtRatioPercent;\\n\\n    uint256 public bondSupplyExpansionPercent;\\n\\n    // 28 first epochs (1 week) with 4.5% expansion regardless of LIBRA price\\n    uint256 public bootstrapEpochs;\\n    uint256 public bootstrapSupplyExpansionPercent;\\n\\n    /* =================== Added variables =================== */\\n    uint256 public previousEpochLibraPrice;\\n    uint256 public maxDiscountRate; // when purchasing bond\\n    uint256 public maxPremiumRate; // when redeeming bond\\n    uint256 public discountPercent;\\n    uint256 public premiumThreshold;\\n    uint256 public premiumPercent;\\n    uint256 public mintingFactorForPayingDebt; // print extra LIBRA during debt phase\\n\\n    address public daoFund;\\n    uint256 public daoFundSharedPercent;\\n\\n    address public devFund;\\n    uint256 public devFundSharedPercent;\\n\\n    address public insuranceFund;\\n    uint256 public insuranceFundSharedPercent;\\n\\n    /* =================== Events =================== */\\n\\n    event Initialized(address indexed executor, uint256 at);\\n    event BurnedBonds(address indexed from, uint256 bondAmount);\\n    event RedeemedBonds(address indexed from, uint256 libraAmount, uint256 bondAmount);\\n    event BoughtBonds(address indexed from, uint256 libraAmount, uint256 bondAmount);\\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\\n    event BoardroomFunded(uint256 timestamp, uint256 seigniorage);\\n    event DaoFundFunded(uint256 timestamp, uint256 seigniorage);\\n    event DevFundFunded(uint256 timestamp, uint256 seigniorage);\\n    event InsuranceFundFunded(uint256 timestamp, uint256 seigniorage);\\n\\n    /* =================== Modifier =================== */\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"Treasury: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    modifier checkCondition {\\n        require(now >= startTime, \\\"Treasury: not started yet\\\");\\n\\n        _;\\n    }\\n\\n    modifier checkEpoch {\\n        require(now >= nextEpochPoint(), \\\"Treasury: not opened yet\\\");\\n\\n        _;\\n\\n        epoch = epoch.add(1);\\n        epochSupplyContractionLeft = (getLibraPrice() > libraPriceCeiling) ? 0 : getLibraCirculatingSupply().mul(maxSupplyContractionPercent).div(10000);\\n    }\\n\\n    modifier checkOperator {\\n        require(\\n            IBasisAsset(libra).operator() == address(this) &&\\n                IBasisAsset(lbond).operator() == address(this) &&\\n                IBasisAsset(lshare).operator() == address(this) &&\\n                Operator(boardroom).operator() == address(this),\\n            \\\"Treasury: need more permission\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier notInitialized {\\n        require(!initialized, \\\"Treasury: already initialized\\\");\\n\\n        _;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function isInitialized() public view returns (bool) {\\n        return initialized;\\n    }\\n\\n    // epoch\\n    function nextEpochPoint() public view returns (uint256) {\\n        return startTime.add(epoch.mul(PERIOD));\\n    }\\n\\n    // oracle\\n    function getLibraPrice() public view returns (uint256 libraPrice) {\\n        try IOracle(libraOracle).consult(libra, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult LIBRA price from the oracle\\\");\\n        }\\n    }\\n\\n    function getLibraUpdatedPrice() public view returns (uint256 _libraPrice) {\\n        try IOracle(libraOracle).twap(libra, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult LIBRA price from the oracle\\\");\\n        }\\n    }\\n\\n    // budget\\n    function getReserve() public view returns (uint256) {\\n        return seigniorageSaved;\\n    }\\n\\n    function getBurnableLibraLeft() public view returns (uint256 _burnableLibraLeft) {\\n        uint256 _libraPrice = getLibraPrice();\\n        if (_libraPrice <= libraPriceOne) {\\n            uint256 _libraSupply = getLibraCirculatingSupply();\\n            uint256 _bondMaxSupply = _libraSupply.mul(maxDebtRatioPercent).div(10000);\\n            uint256 _bondSupply = IERC20(lbond).totalSupply();\\n            if (_bondMaxSupply > _bondSupply) {\\n                uint256 _maxMintableBond = _bondMaxSupply.sub(_bondSupply);\\n                uint256 _maxBurnableLibra = _maxMintableBond.mul(_libraPrice).div(1e18);\\n                _burnableLibraLeft = Math.min(epochSupplyContractionLeft, _maxBurnableLibra);\\n            }\\n        }\\n    }\\n\\n    function getRedeemableBonds() public view returns (uint256 _redeemableBonds) {\\n        uint256 _libraPrice = getLibraPrice();\\n        if (_libraPrice > libraPriceCeiling) {\\n            uint256 _totalLibra = IERC20(libra).balanceOf(address(this));\\n            uint256 _rate = getBondPremiumRate();\\n            if (_rate > 0) {\\n                _redeemableBonds = _totalLibra.mul(1e18).div(_rate);\\n            }\\n        }\\n    }\\n\\n    function getBondDiscountRate() public view returns (uint256 _rate) {\\n        uint256 _libraPrice = getLibraPrice();\\n        if (_libraPrice <= libraPriceOne) {\\n            if (discountPercent == 0) {\\n                // no discount\\n                _rate = libraPriceOne;\\n            } else {\\n                uint256 _bondAmount = libraPriceOne.mul(1e18).div(_libraPrice); // to burn 1 LIBRA\\n                uint256 _discountAmount = _bondAmount.sub(libraPriceOne).mul(discountPercent).div(10000);\\n                _rate = libraPriceOne.add(_discountAmount);\\n                if (maxDiscountRate > 0 && _rate > maxDiscountRate) {\\n                    _rate = maxDiscountRate;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBondPremiumRate() public view returns (uint256 _rate) {\\n        uint256 _libraPrice = getLibraPrice();\\n        if (_libraPrice > libraPriceCeiling) {\\n            uint256 _libraPricePremiumThreshold = libraPriceOne.mul(premiumThreshold).div(100);\\n            if (_libraPrice >= _libraPricePremiumThreshold) {\\n                //Price > 1.10\\n                uint256 _premiumAmount = _libraPrice.sub(libraPriceOne).mul(premiumPercent).div(10000);\\n                _rate = libraPriceOne.add(_premiumAmount);\\n                if (maxPremiumRate > 0 && _rate > maxPremiumRate) {\\n                    _rate = maxPremiumRate;\\n                }\\n            } else {\\n                // no premium bonus\\n                _rate = libraPriceOne;\\n            }\\n        }\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function initialize(\\n        address _libra,\\n        address _lbond,\\n        address _lshare,\\n        address _libraOracle,\\n        address _boardroom,\\n        address _genesisPool,\\n        uint256 _startTime\\n    ) public notInitialized {\\n        libra = _libra;\\n        lbond = _lbond;\\n        lshare = _lshare;\\n        libraOracle = _libraOracle;\\n        boardroom = _boardroom;\\n        startTime = _startTime;\\n\\n        libraPriceOne = 10**18;\\n        libraPriceCeiling = libraPriceOne.mul(101).div(100);\\n\\n        // exclude contracts from total supply\\n        excludedFromTotalSupply.push(_genesisPool);\\n\\n        // Dynamic max expansion percent\\n        supplyTiers = [0 ether, 500000 ether, 1000000 ether, 1500000 ether, 2000000 ether, 5000000 ether, 10000000 ether, 20000000 ether, 50000000 ether];\\n        maxExpansionTiers = [450, 400, 350, 300, 250, 200, 150, 125, 100];\\n\\n        maxSupplyExpansionPercent = 400; // Upto 4.0% supply for expansion\\n\\n        bondDepletionFloorPercent = 10000; // 100% of Bond supply for depletion floor\\n        seigniorageExpansionFloorPercent = 3500; // At least 35% of expansion reserved for boardroom\\n        maxSupplyContractionPercent = 300; // Upto 3.0% supply for contraction (to burn LIBRA and mint LBOND)\\n        maxDebtRatioPercent = 3500; // Upto 35% supply of LBOND to purchase\\n\\n        bondSupplyExpansionPercent = 500; // maximum 5% emissions per epoch for POL bonds\\n\\n        premiumThreshold = 110;\\n        premiumPercent = 7000;\\n\\n        // First 12 epochs with 5% expansion\\n        bootstrapEpochs = 12;\\n        bootstrapSupplyExpansionPercent = 500;\\n\\n        // set seigniorageSaved to it's balance\\n        seigniorageSaved = IERC20(libra).balanceOf(address(this));\\n\\n        initialized = true;\\n        operator = msg.sender;\\n        emit Initialized(msg.sender, block.number);\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function setBoardroom(address _boardroom) external onlyOperator {\\n        boardroom = _boardroom;\\n    }\\n\\n    // function setBondTreasury(address _bondTreasury) external onlyOperator {\\n    //     bondTreasury = _bondTreasury;\\n    // }\\n\\n    function setLibraOracle(address _libraOracle) external onlyOperator {\\n        libraOracle = _libraOracle;\\n    }\\n\\n    function setLibraPriceCeiling(uint256 _libraPriceCeiling) external onlyOperator {\\n        require(_libraPriceCeiling >= libraPriceOne && _libraPriceCeiling <= libraPriceOne.mul(120).div(100), \\\"out of range\\\"); // [$1.0, $1.2]\\n        libraPriceCeiling = _libraPriceCeiling;\\n    }\\n\\n    function setMaxSupplyExpansionPercents(uint256 _maxSupplyExpansionPercent) external onlyOperator {\\n        require(_maxSupplyExpansionPercent >= 10 && _maxSupplyExpansionPercent <= 1000, \\\"_maxSupplyExpansionPercent: out of range\\\"); // [0.1%, 10%]\\n        maxSupplyExpansionPercent = _maxSupplyExpansionPercent;\\n    }\\n\\n    function setSupplyTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < 9, \\\"Index has to be lower than count of tiers\\\");\\n        if (_index > 0) {\\n            require(_value > supplyTiers[_index - 1]);\\n        }\\n        if (_index < 8) {\\n            require(_value < supplyTiers[_index + 1]);\\n        }\\n        supplyTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setMaxExpansionTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < 9, \\\"Index has to be lower than count of tiers\\\");\\n        require(_value >= 10 && _value <= 1000, \\\"_value: out of range\\\"); // [0.1%, 10%]\\n        maxExpansionTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setBondDepletionFloorPercent(uint256 _bondDepletionFloorPercent) external onlyOperator {\\n        require(_bondDepletionFloorPercent >= 500 && _bondDepletionFloorPercent <= 10000, \\\"out of range\\\"); // [5%, 100%]\\n        bondDepletionFloorPercent = _bondDepletionFloorPercent;\\n    }\\n\\n    function setMaxSupplyContractionPercent(uint256 _maxSupplyContractionPercent) external onlyOperator {\\n        require(_maxSupplyContractionPercent >= 100 && _maxSupplyContractionPercent <= 1500, \\\"out of range\\\"); // [0.1%, 15%]\\n        maxSupplyContractionPercent = _maxSupplyContractionPercent;\\n    }\\n\\n    function setMaxDebtRatioPercent(uint256 _maxDebtRatioPercent) external onlyOperator {\\n        require(_maxDebtRatioPercent >= 1000 && _maxDebtRatioPercent <= 10000, \\\"out of range\\\"); // [10%, 100%]\\n        maxDebtRatioPercent = _maxDebtRatioPercent;\\n    }\\n\\n    function setBootstrap(uint256 _bootstrapEpochs, uint256 _bootstrapSupplyExpansionPercent) external onlyOperator {\\n        require(_bootstrapEpochs <= 120, \\\"_bootstrapEpochs: out of range\\\"); // <= 1 month\\n        require(_bootstrapSupplyExpansionPercent >= 100 && _bootstrapSupplyExpansionPercent <= 1000, \\\"_bootstrapSupplyExpansionPercent: out of range\\\"); // [1%, 10%]\\n        bootstrapEpochs = _bootstrapEpochs;\\n        bootstrapSupplyExpansionPercent = _bootstrapSupplyExpansionPercent;\\n    }\\n\\n    function setExtraFunds(\\n        address _daoFund,\\n        uint256 _daoFundSharedPercent,\\n        address _devFund,\\n        uint256 _devFundSharedPercent,\\n        address _insuranceFund,\\t\\n        uint256 _insuranceFundSharedPercent\\n    ) external onlyOperator {\\n        require(_daoFund != address(0), \\\"zero\\\");\\n        require(_daoFundSharedPercent <= 3000, \\\"out of range\\\"); // <= 30%\\n        require(_devFund != address(0), \\\"zero\\\");\\n        require(_devFundSharedPercent <= 1000, \\\"out of range\\\"); // <= 10%\\n        require(_insuranceFund != address(0), \\\"zero\\\");\\n        require(_insuranceFundSharedPercent <= 1000, \\\"out of range\\\"); // <= 10%\\n        \\n        daoFund = _daoFund;\\n        daoFundSharedPercent = _daoFundSharedPercent;\\n        \\n        devFund = _devFund;\\n        devFundSharedPercent = _devFundSharedPercent;\\n        insuranceFund = _insuranceFund;\\t\\n        insuranceFundSharedPercent = _insuranceFundSharedPercent;\\n    }\\n\\n    function setMaxDiscountRate(uint256 _maxDiscountRate) external onlyOperator {\\n        maxDiscountRate = _maxDiscountRate;\\n    }\\n\\n    function setMaxPremiumRate(uint256 _maxPremiumRate) external onlyOperator {\\n        maxPremiumRate = _maxPremiumRate;\\n    }\\n\\n    function setDiscountPercent(uint256 _discountPercent) external onlyOperator {\\n        require(_discountPercent <= 20000, \\\"_discountPercent is over 200%\\\");\\n        discountPercent = _discountPercent;\\n    }\\n\\n    function setPremiumThreshold(uint256 _premiumThreshold) external onlyOperator {\\n        require(_premiumThreshold >= libraPriceCeiling, \\\"_premiumThreshold exceeds libraPriceCeiling\\\");\\n        require(_premiumThreshold <= 150, \\\"_premiumThreshold is higher than 1.5\\\");\\n        premiumThreshold = _premiumThreshold;\\n    }\\n\\n    function setPremiumPercent(uint256 _premiumPercent) external onlyOperator {\\n        require(_premiumPercent <= 20000, \\\"_premiumPercent is over 200%\\\");\\n        premiumPercent = _premiumPercent;\\n    }\\n\\n    function setMintingFactorForPayingDebt(uint256 _mintingFactorForPayingDebt) external onlyOperator {\\n        require(_mintingFactorForPayingDebt >= 10000 && _mintingFactorForPayingDebt <= 20000, \\\"_mintingFactorForPayingDebt: out of range\\\"); // [100%, 200%]\\n        mintingFactorForPayingDebt = _mintingFactorForPayingDebt;\\n    }\\n\\n    function setBondSupplyExpansionPercent(uint256 _bondSupplyExpansionPercent) external onlyOperator {\\n        bondSupplyExpansionPercent = _bondSupplyExpansionPercent;\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    function _updateLibraPrice() internal {\\n        try IOracle(libraOracle).update() {} catch {}\\n    }\\n\\n    function getLibraCirculatingSupply() public view returns (uint256) {\\n        IERC20 libraErc20 = IERC20(libra);\\n        uint256 totalSupply = libraErc20.totalSupply();\\n        uint256 balanceExcluded = 0;\\n        for (uint8 entryId = 0; entryId < excludedFromTotalSupply.length; ++entryId) {\\n            balanceExcluded = balanceExcluded.add(libraErc20.balanceOf(excludedFromTotalSupply[entryId]));\\n        }\\n        return totalSupply.sub(balanceExcluded);\\n    }\\n\\n    function buyBonds(uint256 _libraAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\\n        require(_libraAmount > 0, \\\"Treasury: cannot purchase bonds with zero amount\\\");\\n\\n        uint256 libraPrice = getLibraPrice();\\n        require(libraPrice == targetPrice, \\\"Treasury: LIBRA price moved\\\");\\n        require(\\n            libraPrice < libraPriceOne, // price < $1\\n            \\\"Treasury: libraPrice not eligible for bond purchase\\\"\\n        );\\n\\n        require(_libraAmount <= epochSupplyContractionLeft, \\\"Treasury: not enough bond left to purchase\\\");\\n\\n        uint256 _rate = getBondDiscountRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _bondAmount = _libraAmount.mul(_rate).div(1e18);\\n        uint256 libraSupply = getLibraCirculatingSupply();\\n        uint256 newBondSupply = IERC20(lbond).totalSupply().add(_bondAmount);\\n        require(newBondSupply <= libraSupply.mul(maxDebtRatioPercent).div(10000), \\\"over max debt ratio\\\");\\n\\n        IBasisAsset(libra).burnFrom(msg.sender, _libraAmount);\\n        IBasisAsset(lbond).mint(msg.sender, _bondAmount);\\n\\n        epochSupplyContractionLeft = epochSupplyContractionLeft.sub(_libraAmount);\\n        _updateLibraPrice();\\n\\n        emit BoughtBonds(msg.sender, _libraAmount, _bondAmount);\\n    }\\n\\n    function redeemBonds(uint256 _bondAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\\n        require(_bondAmount > 0, \\\"Treasury: cannot redeem bonds with zero amount\\\");\\n\\n        uint256 libraPrice = getLibraPrice();\\n        require(libraPrice == targetPrice, \\\"Treasury: LIBRA price moved\\\");\\n        require(\\n            libraPrice > libraPriceCeiling, // price > $1.01\\n            \\\"Treasury: libraPrice not eligible for bond purchase\\\"\\n        );\\n\\n        uint256 _rate = getBondPremiumRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _libraAmount = _bondAmount.mul(_rate).div(1e18);\\n        require(IERC20(libra).balanceOf(address(this)) >= _libraAmount, \\\"Treasury: treasury has no more budget\\\");\\n\\n        seigniorageSaved = seigniorageSaved.sub(Math.min(seigniorageSaved, _libraAmount));\\n\\n        IBasisAsset(lbond).burnFrom(msg.sender, _bondAmount);\\n        IERC20(libra).safeTransfer(msg.sender, _libraAmount);\\n\\n        _updateLibraPrice();\\n\\n        emit RedeemedBonds(msg.sender, _libraAmount, _bondAmount);\\n    }\\n\\n    function _sendToBoardroom(uint256 _amount) internal {\\n        IBasisAsset(libra).mint(address(this), _amount);\\n\\n        uint256 _daoFundSharedAmount = 0;\\n        if (daoFundSharedPercent > 0) {\\n            _daoFundSharedAmount = _amount.mul(daoFundSharedPercent).div(10000);\\n            IERC20(libra).transfer(daoFund, _daoFundSharedAmount);\\n            emit DaoFundFunded(now, _daoFundSharedAmount);\\n        }\\n\\n        uint256 _devFundSharedAmount = 0;\\n        if (devFundSharedPercent > 0) {\\n            _devFundSharedAmount = _amount.mul(devFundSharedPercent).div(10000);\\n            IERC20(libra).transfer(devFund, _devFundSharedAmount);\\n            emit DevFundFunded(now, _devFundSharedAmount);\\n        }\\n\\n        _amount = _amount.sub(_daoFundSharedAmount).sub(_devFundSharedAmount);\\n\\n        IERC20(libra).safeApprove(boardroom, 0);\\n        IERC20(libra).safeApprove(boardroom, _amount);\\n        IBoardroom(boardroom).allocateSeigniorage(_amount);\\n        emit BoardroomFunded(now, _amount);\\n    }\\n\\n    function _calculateMaxSupplyExpansionPercent(uint256 _libraSupply) internal returns (uint256) {\\n        for (uint8 tierId = 8; tierId >= 0; --tierId) {\\n            if (_libraSupply >= supplyTiers[tierId]) {\\n                maxSupplyExpansionPercent = maxExpansionTiers[tierId];\\n                break;\\n            }\\n        }\\n        return maxSupplyExpansionPercent;\\n    }\\n\\n    function allocateSeigniorage() external onlyOneBlock checkCondition checkEpoch checkOperator {\\n        _updateLibraPrice();\\n        previousEpochLibraPrice = getLibraPrice();\\n        uint256 libraSupply = getLibraCirculatingSupply().sub(seigniorageSaved);\\n        if (epoch < bootstrapEpochs) {\\n            // 28 first epochs with 4.5% expansion\\n            _sendToBoardroom(libraSupply.mul(bootstrapSupplyExpansionPercent).div(10000));\\n        } else {\\n            if (previousEpochLibraPrice > libraPriceCeiling) {\\n                // Expansion ($LIBRA Price > 1 $ASTR): there is some seigniorage to be allocated\\n                uint256 bondSupply = IERC20(lbond).totalSupply();\\n                uint256 _percentage = previousEpochLibraPrice.sub(libraPriceOne);\\n                uint256 _savedForBond;\\n                uint256 _savedForBoardroom;\\n                uint256 _mse = _calculateMaxSupplyExpansionPercent(libraSupply).mul(1e14);\\n                if (_percentage > _mse) {\\n                    _percentage = _mse;\\n                }\\n                if (seigniorageSaved >= bondSupply.mul(bondDepletionFloorPercent).div(10000)) {\\n                    // saved enough to pay debt, mint as usual rate\\n                    _savedForBoardroom = libraSupply.mul(_percentage).div(1e18);\\n                } else {\\n                    // have not saved enough to pay debt, mint more\\n                    uint256 _seigniorage = libraSupply.mul(_percentage).div(1e18);\\n                    _savedForBoardroom = _seigniorage.mul(seigniorageExpansionFloorPercent).div(10000);\\n                    _savedForBond = _seigniorage.sub(_savedForBoardroom);\\n                    if (mintingFactorForPayingDebt > 0) {\\n                        _savedForBond = _savedForBond.mul(mintingFactorForPayingDebt).div(10000);\\n                    }\\n                }\\n                if (_savedForBoardroom > 0) {\\n                    _sendToBoardroom(_savedForBoardroom);\\n                }\\n                if (_savedForBond > 0) {\\n                    seigniorageSaved = seigniorageSaved.add(_savedForBond);\\n                    IBasisAsset(libra).mint(address(this), _savedForBond);\\n                    emit TreasuryFunded(now, _savedForBond);\\n                }\\n            }\\n        }\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        // do not allow to drain core tokens\\n        require(address(_token) != address(libra), \\\"libra\\\");\\n        require(address(_token) != address(lbond), \\\"bond\\\");\\n        require(address(_token) != address(lshare), \\\"share\\\");\\n        _token.safeTransfer(_to, _amount);\\n    }\\n\\n    function boardroomSetOperator(address _operator) external onlyOperator {\\n        IBoardroom(boardroom).setOperator(_operator);\\n    }\\n\\n    function boardroomSetLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\\n        IBoardroom(boardroom).setLockUp(_withdrawLockupEpochs, _rewardLockupEpochs);\\n    }\\n\\n    function boardroomAllocateSeigniorage(uint256 amount) external onlyOperator {\\n        IBoardroom(boardroom).allocateSeigniorage(amount);\\n    }\\n\\n    function boardroomGovernanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        IBoardroom(boardroom).governanceRecoverUnsupported(_token, _amount, _to);\\n    }\\n}\\n\",\"keccak256\":\"0xf47261fd76c1b10954b2e06182c1ceed63924c4012edc11a10678175d671ad1a\",\"license\":\"MIT\"},\"contracts/interfaces/IBasisAsset.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IBasisAsset {\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function isOperator() external returns (bool);\\n\\n    function operator() external view returns (address);\\n\\n    function transferOperator(address newOperator_) external;\\n}\\n\",\"keccak256\":\"0x65d4e44c274e77cdee82cdc89c39332cea229611813ba471a28b422ebc97020b\"},\"contracts/interfaces/IBoardroom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBoardroom {\\n    function balanceOf(address _director) external view returns (uint256);\\n\\n    function earned(address _director) external view returns (uint256);\\n\\n    function canWithdraw(address _director) external view returns (bool);\\n\\n    function canClaimReward(address _director) external view returns (bool);\\n\\n    function epoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function getLibraPrice() external view returns (uint256);\\n\\n    function setOperator(address _operator) external;\\n\\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external;\\n\\n    function stake(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function exit() external;\\n\\n    function claimReward() external;\\n\\n    function allocateSeigniorage(uint256 _amount) external;\\n\\n    function governanceRecoverUnsupported(address _token, uint256 _amount, address _to) external;\\n}\\n\",\"keccak256\":\"0x1adffb448880f41ec6bf5ae61aea4c4822bc60182e989c8b8fb32b3a7212ffcc\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IOracle {\\n    function update() external;\\n\\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut);\\n\\n    function twap(address _token, uint256 _amountIn) external view returns (uint144 _amountOut);\\n}\\n\",\"keccak256\":\"0xfe915dcf8502dacae92ed455f5e9e3c5cc159a7ad809f11b333de493c98828d3\",\"license\":\"MIT\"},\"contracts/lib/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\",\"keccak256\":\"0x3ee5b5170fa8ccf39d30a1980b470fb21b3a1cefe47921d98a1a5ebd85ff7d2f\",\"license\":\"MIT\"},\"contracts/owner/Operator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Operator is Context, Ownable {\\n    address private _operator;\\n\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\n\\n    constructor() internal {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender, \\\"operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    function isOperator() public view returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(newOperator_ != address(0), \\\"operator: zero address given for new operator\\\");\\n        emit OperatorTransferred(address(0), newOperator_);\\n        _operator = newOperator_;\\n    }\\n}\\n\",\"keccak256\":\"0x1ae1bc52c72e3ad2fc80f7863e454f2bff37b902fa1ad639859681369e9b82db\",\"license\":\"MIT\"},\"contracts/utils/ContractGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(!checkSameOriginReentranted(), \\\"ContractGuard: one block, one function\\\");\\n        require(!checkSameSenderReentranted(), \\\"ContractGuard: one block, one function\\\");\\n\\n        _;\\n\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x8e558ef5a039ce6ecd27eef794d31a136fd7b0e8c473bd86daa5baf7e8cf7a26\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 12667,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "_status",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 4343,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "operator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4346,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "initialized",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 4348,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4351,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "epoch",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4354,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "epochSupplyContractionLeft",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4357,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "excludedFromTotalSupply",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4359,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "libra",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 4361,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "lbond",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 4363,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "lshare",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 4365,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "boardroom",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 4367,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "libraOracle",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 4369,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "libraPriceOne",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 4371,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "libraPriceCeiling",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 4373,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "seigniorageSaved",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 4376,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "supplyTiers",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4379,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "maxExpansionTiers",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4381,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "maxSupplyExpansionPercent",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 4383,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "bondDepletionFloorPercent",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 4385,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "seigniorageExpansionFloorPercent",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          },
          {
            "astId": 4387,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "maxSupplyContractionPercent",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256"
          },
          {
            "astId": 4389,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "maxDebtRatioPercent",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256"
          },
          {
            "astId": 4391,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "bondSupplyExpansionPercent",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          },
          {
            "astId": 4393,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "bootstrapEpochs",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 4395,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "bootstrapSupplyExpansionPercent",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 4397,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "previousEpochLibraPrice",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256"
          },
          {
            "astId": 4399,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "maxDiscountRate",
            "offset": 0,
            "slot": "25",
            "type": "t_uint256"
          },
          {
            "astId": 4401,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "maxPremiumRate",
            "offset": 0,
            "slot": "26",
            "type": "t_uint256"
          },
          {
            "astId": 4403,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "discountPercent",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256"
          },
          {
            "astId": 4405,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "premiumThreshold",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256"
          },
          {
            "astId": 4407,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "premiumPercent",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256"
          },
          {
            "astId": 4409,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "mintingFactorForPayingDebt",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256"
          },
          {
            "astId": 4411,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "daoFund",
            "offset": 0,
            "slot": "31",
            "type": "t_address"
          },
          {
            "astId": 4413,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "daoFundSharedPercent",
            "offset": 0,
            "slot": "32",
            "type": "t_uint256"
          },
          {
            "astId": 4415,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "devFund",
            "offset": 0,
            "slot": "33",
            "type": "t_address"
          },
          {
            "astId": 4417,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "devFundSharedPercent",
            "offset": 0,
            "slot": "34",
            "type": "t_uint256"
          },
          {
            "astId": 4419,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "insuranceFund",
            "offset": 0,
            "slot": "35",
            "type": "t_address"
          },
          {
            "astId": 4421,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "insuranceFundSharedPercent",
            "offset": 0,
            "slot": "36",
            "type": "t_uint256"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "base": "t_address",
            "encoding": "dynamic_array",
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)dyn_storage": {
            "base": "t_uint256",
            "encoding": "dynamic_array",
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_bool)"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/Boardroom.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./utils/ContractGuard.sol\\\";\\nimport \\\"./interfaces/IBasisAsset.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\n\\ncontract ShareWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public lshare;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount) public virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        lshare.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount) public virtual {\\n        uint256 memberShare = _balances[msg.sender];\\n        require(memberShare >= amount, \\\"Boardroom: withdraw request greater than staked amount\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = memberShare.sub(amount);\\n        lshare.safeTransfer(msg.sender, amount);\\n    }\\n}\\n\\ncontract Boardroom is ShareWrapper, ContractGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Memberseat {\\n        uint256 lastSnapshotIndex;\\n        uint256 rewardEarned;\\n        uint256 epochTimerStart;\\n    }\\n\\n    struct BoardroomSnapshot {\\n        uint256 time;\\n        uint256 rewardReceived;\\n        uint256 rewardPerShare;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // governance\\n    address public operator;\\n\\n    // flags\\n    bool public initialized = false;\\n\\n    IERC20 public libra;\\n    ITreasury public treasury;\\n\\n    mapping(address => Memberseat) public members;\\n    BoardroomSnapshot[] public boardroomHistory;\\n\\n    uint256 public withdrawLockupEpochs;\\n    uint256 public rewardLockupEpochs;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Initialized(address indexed executor, uint256 at);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardAdded(address indexed user, uint256 reward);\\n\\n    /* ========== Modifiers =============== */\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"Boardroom: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    modifier memberExists() {\\n        require(balanceOf(msg.sender) > 0, \\\"Boardroom: The member does not exist\\\");\\n        _;\\n    }\\n\\n    modifier updateReward(address member) {\\n        if (member != address(0)) {\\n            Memberseat memory seat = members[member];\\n            seat.rewardEarned = earned(member);\\n            seat.lastSnapshotIndex = latestSnapshotIndex();\\n            members[member] = seat;\\n        }\\n        _;\\n    }\\n\\n    modifier notInitialized() {\\n        require(!initialized, \\\"Boardroom: already initialized\\\");\\n        _;\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function initialize(\\n        IERC20 _libra,\\n        IERC20 _lshare,\\n        ITreasury _treasury\\n    ) public notInitialized {\\n        libra = _libra;\\n        lshare = _lshare;\\n        treasury = _treasury;\\n\\n        BoardroomSnapshot memory genesisSnapshot = BoardroomSnapshot({time: block.number, rewardReceived: 0, rewardPerShare: 0});\\n        boardroomHistory.push(genesisSnapshot);\\n\\n        withdrawLockupEpochs = 6; // Lock for 6 epochs (36h) before release withdraw\\n        rewardLockupEpochs = 3; // Lock for 3 epochs (18h) before release claimReward\\n\\n        initialized = true;\\n        operator = msg.sender;\\n        emit Initialized(msg.sender, block.number);\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\\n        require(_withdrawLockupEpochs >= _rewardLockupEpochs && _withdrawLockupEpochs <= 56, \\\"_withdrawLockupEpochs: out of range\\\"); // <= 2 week\\n        withdrawLockupEpochs = _withdrawLockupEpochs;\\n        rewardLockupEpochs = _rewardLockupEpochs;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    // =========== Snapshot getters\\n\\n    function latestSnapshotIndex() public view returns (uint256) {\\n        return boardroomHistory.length.sub(1);\\n    }\\n\\n    function getLatestSnapshot() internal view returns (BoardroomSnapshot memory) {\\n        return boardroomHistory[latestSnapshotIndex()];\\n    }\\n\\n    function getLastSnapshotIndexOf(address member) public view returns (uint256) {\\n        return members[member].lastSnapshotIndex;\\n    }\\n\\n    function getLastSnapshotOf(address member) internal view returns (BoardroomSnapshot memory) {\\n        return boardroomHistory[getLastSnapshotIndexOf(member)];\\n    }\\n\\n    function canWithdraw(address member) external view returns (bool) {\\n        return members[member].epochTimerStart.add(withdrawLockupEpochs) <= treasury.epoch();\\n    }\\n\\n    function canClaimReward(address member) external view returns (bool) {\\n        return members[member].epochTimerStart.add(rewardLockupEpochs) <= treasury.epoch();\\n    }\\n\\n    function epoch() external view returns (uint256) {\\n        return treasury.epoch();\\n    }\\n\\n    function nextEpochPoint() external view returns (uint256) {\\n        return treasury.nextEpochPoint();\\n    }\\n\\n    function getLibraPrice() external view returns (uint256) {\\n        return treasury.getLibraPrice();\\n    }\\n\\n    // =========== Member getters\\n\\n    function rewardPerShare() public view returns (uint256) {\\n        return getLatestSnapshot().rewardPerShare;\\n    }\\n\\n    function earned(address member) public view returns (uint256) {\\n        uint256 latestRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 storedRPS = getLastSnapshotOf(member).rewardPerShare;\\n\\n        return balanceOf(member).mul(latestRPS.sub(storedRPS)).div(1e18).add(members[member].rewardEarned);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint256 amount) public override onlyOneBlock updateReward(msg.sender) {\\n        require(amount > 0, \\\"Boardroom: Cannot stake 0\\\");\\n        super.stake(amount);\\n        members[msg.sender].epochTimerStart = treasury.epoch(); // reset timer\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public override onlyOneBlock memberExists updateReward(msg.sender) {\\n        require(amount > 0, \\\"Boardroom: Cannot withdraw 0\\\");\\n        require(members[msg.sender].epochTimerStart.add(withdrawLockupEpochs) <= treasury.epoch(), \\\"Boardroom: still in withdraw lockup\\\");\\n        claimReward();\\n        super.withdraw(amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n    }\\n\\n    function claimReward() public updateReward(msg.sender) {\\n        uint256 reward = members[msg.sender].rewardEarned;\\n        if (reward > 0) {\\n            require(members[msg.sender].epochTimerStart.add(rewardLockupEpochs) <= treasury.epoch(), \\\"Boardroom: still in reward lockup\\\");\\n            members[msg.sender].epochTimerStart = treasury.epoch(); // reset timer\\n            members[msg.sender].rewardEarned = 0;\\n            libra.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function allocateSeigniorage(uint256 amount) external onlyOneBlock onlyOperator {\\n        require(amount > 0, \\\"Boardroom: Cannot allocate 0\\\");\\n        require(totalSupply() > 0, \\\"Boardroom: Cannot allocate when totalSupply is 0\\\");\\n\\n        // Create & add new snapshot\\n        uint256 prevRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 nextRPS = prevRPS.add(amount.mul(1e18).div(totalSupply()));\\n\\n        BoardroomSnapshot memory newSnapshot = BoardroomSnapshot({\\n            time: block.number, \\n            rewardReceived: amount, \\n            rewardPerShare: nextRPS\\n        });\\n        boardroomHistory.push(newSnapshot);\\n\\n        libra.safeTransferFrom(msg.sender, address(this), amount);\\n        emit RewardAdded(msg.sender, amount);\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        // do not allow to drain core tokens\\n        require(address(_token) != address(libra), \\\"libra\\\");\\n        require(address(_token) != address(lshare), \\\"lshare\\\");\\n        _token.safeTransfer(_to, _amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/utils/ContractGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(!checkSameOriginReentranted(), \\\"ContractGuard: one block, one function\\\");\\n        require(!checkSameSenderReentranted(), \\\"ContractGuard: one block, one function\\\");\\n\\n        _;\\n\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IBasisAsset.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface IBasisAsset {\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function isOperator() external returns (bool);\\n\\n    function operator() external view returns (address);\\n\\n    function transferOperator(address newOperator_) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/ITreasury.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ITreasury {\\n    function epoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function getLibraPrice() external view returns (uint256);\\n\\n    function buyBonds(uint256 amount, uint256 targetPrice) external;\\n\\n    function redeemBonds(uint256 amount, uint256 targetPrice) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/Treasury.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./lib/Babylonian.sol\\\";\\nimport \\\"./owner/Operator.sol\\\";\\nimport \\\"./utils/ContractGuard.sol\\\";\\nimport \\\"./interfaces/IBasisAsset.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IBoardroom.sol\\\";\\n\\n// interface IBondTreasury {\\n//     function totalVested() external view returns (uint256);\\n// }\\n\\ncontract Treasury is ContractGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========= CONSTANT VARIABLES ======== */\\n\\n    uint256 public constant PERIOD = 6 hours;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // governance\\n    address public operator;\\n\\n    // flags\\n    bool public initialized = false;\\n\\n    // epoch\\n    uint256 public startTime;\\n    uint256 public epoch = 0;\\n    uint256 public epochSupplyContractionLeft = 0;\\n\\n    // exclusions from total supply\\n    address[] public excludedFromTotalSupply;\\n\\n    // core components\\n    address public libra;\\n    address public lbond;\\n    address public lshare;\\n\\n    address public boardroom;\\n    address public libraOracle;\\n\\n    // price\\n    uint256 public libraPriceOne;\\n    uint256 public libraPriceCeiling;\\n\\n    uint256 public seigniorageSaved;\\n\\n    uint256[] public supplyTiers;\\n    uint256[] public maxExpansionTiers;\\n\\n    uint256 public maxSupplyExpansionPercent;\\n    uint256 public bondDepletionFloorPercent;\\n    uint256 public seigniorageExpansionFloorPercent;\\n    uint256 public maxSupplyContractionPercent;\\n    uint256 public maxDebtRatioPercent;\\n\\n    uint256 public bondSupplyExpansionPercent;\\n\\n    // 28 first epochs (1 week) with 4.5% expansion regardless of LIBRA price\\n    uint256 public bootstrapEpochs;\\n    uint256 public bootstrapSupplyExpansionPercent;\\n\\n    /* =================== Added variables =================== */\\n    uint256 public previousEpochLibraPrice;\\n    uint256 public maxDiscountRate; // when purchasing bond\\n    uint256 public maxPremiumRate; // when redeeming bond\\n    uint256 public discountPercent;\\n    uint256 public premiumThreshold;\\n    uint256 public premiumPercent;\\n    uint256 public mintingFactorForPayingDebt; // print extra LIBRA during debt phase\\n\\n    address public daoFund;\\n    uint256 public daoFundSharedPercent;\\n\\n    address public devFund;\\n    uint256 public devFundSharedPercent;\\n\\n    address public insuranceFund;\\n    uint256 public insuranceFundSharedPercent;\\n\\n    /* =================== Events =================== */\\n\\n    event Initialized(address indexed executor, uint256 at);\\n    event BurnedBonds(address indexed from, uint256 bondAmount);\\n    event RedeemedBonds(address indexed from, uint256 libraAmount, uint256 bondAmount);\\n    event BoughtBonds(address indexed from, uint256 libraAmount, uint256 bondAmount);\\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\\n    event BoardroomFunded(uint256 timestamp, uint256 seigniorage);\\n    event DaoFundFunded(uint256 timestamp, uint256 seigniorage);\\n    event DevFundFunded(uint256 timestamp, uint256 seigniorage);\\n    event InsuranceFundFunded(uint256 timestamp, uint256 seigniorage);\\n\\n    /* =================== Modifier =================== */\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"Treasury: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    modifier checkCondition {\\n        require(now >= startTime, \\\"Treasury: not started yet\\\");\\n\\n        _;\\n    }\\n\\n    modifier checkEpoch {\\n        require(now >= nextEpochPoint(), \\\"Treasury: not opened yet\\\");\\n\\n        _;\\n\\n        epoch = epoch.add(1);\\n        epochSupplyContractionLeft = (getLibraPrice() > libraPriceCeiling) ? 0 : getLibraCirculatingSupply().mul(maxSupplyContractionPercent).div(10000);\\n    }\\n\\n    modifier checkOperator {\\n        require(\\n            IBasisAsset(libra).operator() == address(this) &&\\n                IBasisAsset(lbond).operator() == address(this) &&\\n                IBasisAsset(lshare).operator() == address(this) &&\\n                Operator(boardroom).operator() == address(this),\\n            \\\"Treasury: need more permission\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier notInitialized {\\n        require(!initialized, \\\"Treasury: already initialized\\\");\\n\\n        _;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function isInitialized() public view returns (bool) {\\n        return initialized;\\n    }\\n\\n    // epoch\\n    function nextEpochPoint() public view returns (uint256) {\\n        return startTime.add(epoch.mul(PERIOD));\\n    }\\n\\n    // oracle\\n    function getLibraPrice() public view returns (uint256 libraPrice) {\\n        try IOracle(libraOracle).consult(libra, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult LIBRA price from the oracle\\\");\\n        }\\n    }\\n\\n    function getLibraUpdatedPrice() public view returns (uint256 _libraPrice) {\\n        try IOracle(libraOracle).twap(libra, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult LIBRA price from the oracle\\\");\\n        }\\n    }\\n\\n    // budget\\n    function getReserve() public view returns (uint256) {\\n        return seigniorageSaved;\\n    }\\n\\n    function getBurnableLibraLeft() public view returns (uint256 _burnableLibraLeft) {\\n        uint256 _libraPrice = getLibraPrice();\\n        if (_libraPrice <= libraPriceOne) {\\n            uint256 _libraSupply = getLibraCirculatingSupply();\\n            uint256 _bondMaxSupply = _libraSupply.mul(maxDebtRatioPercent).div(10000);\\n            uint256 _bondSupply = IERC20(lbond).totalSupply();\\n            if (_bondMaxSupply > _bondSupply) {\\n                uint256 _maxMintableBond = _bondMaxSupply.sub(_bondSupply);\\n                uint256 _maxBurnableLibra = _maxMintableBond.mul(_libraPrice).div(1e18);\\n                _burnableLibraLeft = Math.min(epochSupplyContractionLeft, _maxBurnableLibra);\\n            }\\n        }\\n    }\\n\\n    function getRedeemableBonds() public view returns (uint256 _redeemableBonds) {\\n        uint256 _libraPrice = getLibraPrice();\\n        if (_libraPrice > libraPriceCeiling) {\\n            uint256 _totalLibra = IERC20(libra).balanceOf(address(this));\\n            uint256 _rate = getBondPremiumRate();\\n            if (_rate > 0) {\\n                _redeemableBonds = _totalLibra.mul(1e18).div(_rate);\\n            }\\n        }\\n    }\\n\\n    function getBondDiscountRate() public view returns (uint256 _rate) {\\n        uint256 _libraPrice = getLibraPrice();\\n        if (_libraPrice <= libraPriceOne) {\\n            if (discountPercent == 0) {\\n                // no discount\\n                _rate = libraPriceOne;\\n            } else {\\n                uint256 _bondAmount = libraPriceOne.mul(1e18).div(_libraPrice); // to burn 1 LIBRA\\n                uint256 _discountAmount = _bondAmount.sub(libraPriceOne).mul(discountPercent).div(10000);\\n                _rate = libraPriceOne.add(_discountAmount);\\n                if (maxDiscountRate > 0 && _rate > maxDiscountRate) {\\n                    _rate = maxDiscountRate;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBondPremiumRate() public view returns (uint256 _rate) {\\n        uint256 _libraPrice = getLibraPrice();\\n        if (_libraPrice > libraPriceCeiling) {\\n            uint256 _libraPricePremiumThreshold = libraPriceOne.mul(premiumThreshold).div(100);\\n            if (_libraPrice >= _libraPricePremiumThreshold) {\\n                //Price > 1.10\\n                uint256 _premiumAmount = _libraPrice.sub(libraPriceOne).mul(premiumPercent).div(10000);\\n                _rate = libraPriceOne.add(_premiumAmount);\\n                if (maxPremiumRate > 0 && _rate > maxPremiumRate) {\\n                    _rate = maxPremiumRate;\\n                }\\n            } else {\\n                // no premium bonus\\n                _rate = libraPriceOne;\\n            }\\n        }\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function initialize(\\n        address _libra,\\n        address _lbond,\\n        address _lshare,\\n        address _libraOracle,\\n        address _boardroom,\\n        address _genesisPool,\\n        uint256 _startTime\\n    ) public notInitialized {\\n        libra = _libra;\\n        lbond = _lbond;\\n        lshare = _lshare;\\n        libraOracle = _libraOracle;\\n        boardroom = _boardroom;\\n        startTime = _startTime;\\n\\n        libraPriceOne = 10**18;\\n        libraPriceCeiling = libraPriceOne.mul(101).div(100);\\n\\n        // exclude contracts from total supply\\n        excludedFromTotalSupply.push(_genesisPool);\\n\\n        // Dynamic max expansion percent\\n        supplyTiers = [0 ether, 500000 ether, 1000000 ether, 1500000 ether, 2000000 ether, 5000000 ether, 10000000 ether, 20000000 ether, 50000000 ether];\\n        maxExpansionTiers = [450, 400, 350, 300, 250, 200, 150, 125, 100];\\n\\n        maxSupplyExpansionPercent = 400; // Upto 4.0% supply for expansion\\n\\n        bondDepletionFloorPercent = 10000; // 100% of Bond supply for depletion floor\\n        seigniorageExpansionFloorPercent = 3500; // At least 35% of expansion reserved for boardroom\\n        maxSupplyContractionPercent = 300; // Upto 3.0% supply for contraction (to burn LIBRA and mint LBOND)\\n        maxDebtRatioPercent = 3500; // Upto 35% supply of LBOND to purchase\\n\\n        bondSupplyExpansionPercent = 500; // maximum 5% emissions per epoch for POL bonds\\n\\n        premiumThreshold = 110;\\n        premiumPercent = 7000;\\n\\n        // First 12 epochs with 5% expansion\\n        bootstrapEpochs = 12;\\n        bootstrapSupplyExpansionPercent = 500;\\n\\n        // set seigniorageSaved to it's balance\\n        seigniorageSaved = IERC20(libra).balanceOf(address(this));\\n\\n        initialized = true;\\n        operator = msg.sender;\\n        emit Initialized(msg.sender, block.number);\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function setBoardroom(address _boardroom) external onlyOperator {\\n        boardroom = _boardroom;\\n    }\\n\\n    // function setBondTreasury(address _bondTreasury) external onlyOperator {\\n    //     bondTreasury = _bondTreasury;\\n    // }\\n\\n    function setLibraOracle(address _libraOracle) external onlyOperator {\\n        libraOracle = _libraOracle;\\n    }\\n\\n    function setLibraPriceCeiling(uint256 _libraPriceCeiling) external onlyOperator {\\n        require(_libraPriceCeiling >= libraPriceOne && _libraPriceCeiling <= libraPriceOne.mul(120).div(100), \\\"out of range\\\"); // [$1.0, $1.2]\\n        libraPriceCeiling = _libraPriceCeiling;\\n    }\\n\\n    function setMaxSupplyExpansionPercents(uint256 _maxSupplyExpansionPercent) external onlyOperator {\\n        require(_maxSupplyExpansionPercent >= 10 && _maxSupplyExpansionPercent <= 1000, \\\"_maxSupplyExpansionPercent: out of range\\\"); // [0.1%, 10%]\\n        maxSupplyExpansionPercent = _maxSupplyExpansionPercent;\\n    }\\n\\n    function setSupplyTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < 9, \\\"Index has to be lower than count of tiers\\\");\\n        if (_index > 0) {\\n            require(_value > supplyTiers[_index - 1]);\\n        }\\n        if (_index < 8) {\\n            require(_value < supplyTiers[_index + 1]);\\n        }\\n        supplyTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setMaxExpansionTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < 9, \\\"Index has to be lower than count of tiers\\\");\\n        require(_value >= 10 && _value <= 1000, \\\"_value: out of range\\\"); // [0.1%, 10%]\\n        maxExpansionTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setBondDepletionFloorPercent(uint256 _bondDepletionFloorPercent) external onlyOperator {\\n        require(_bondDepletionFloorPercent >= 500 && _bondDepletionFloorPercent <= 10000, \\\"out of range\\\"); // [5%, 100%]\\n        bondDepletionFloorPercent = _bondDepletionFloorPercent;\\n    }\\n\\n    function setMaxSupplyContractionPercent(uint256 _maxSupplyContractionPercent) external onlyOperator {\\n        require(_maxSupplyContractionPercent >= 100 && _maxSupplyContractionPercent <= 1500, \\\"out of range\\\"); // [0.1%, 15%]\\n        maxSupplyContractionPercent = _maxSupplyContractionPercent;\\n    }\\n\\n    function setMaxDebtRatioPercent(uint256 _maxDebtRatioPercent) external onlyOperator {\\n        require(_maxDebtRatioPercent >= 1000 && _maxDebtRatioPercent <= 10000, \\\"out of range\\\"); // [10%, 100%]\\n        maxDebtRatioPercent = _maxDebtRatioPercent;\\n    }\\n\\n    function setBootstrap(uint256 _bootstrapEpochs, uint256 _bootstrapSupplyExpansionPercent) external onlyOperator {\\n        require(_bootstrapEpochs <= 120, \\\"_bootstrapEpochs: out of range\\\"); // <= 1 month\\n        require(_bootstrapSupplyExpansionPercent >= 100 && _bootstrapSupplyExpansionPercent <= 1000, \\\"_bootstrapSupplyExpansionPercent: out of range\\\"); // [1%, 10%]\\n        bootstrapEpochs = _bootstrapEpochs;\\n        bootstrapSupplyExpansionPercent = _bootstrapSupplyExpansionPercent;\\n    }\\n\\n    function setExtraFunds(\\n        address _daoFund,\\n        uint256 _daoFundSharedPercent,\\n        address _devFund,\\n        uint256 _devFundSharedPercent,\\n        address _insuranceFund,\\t\\n        uint256 _insuranceFundSharedPercent\\n    ) external onlyOperator {\\n        require(_daoFund != address(0), \\\"zero\\\");\\n        require(_daoFundSharedPercent <= 3000, \\\"out of range\\\"); // <= 30%\\n        require(_devFund != address(0), \\\"zero\\\");\\n        require(_devFundSharedPercent <= 1000, \\\"out of range\\\"); // <= 10%\\n        require(_insuranceFund != address(0), \\\"zero\\\");\\n        require(_insuranceFundSharedPercent <= 1000, \\\"out of range\\\"); // <= 10%\\n        \\n        daoFund = _daoFund;\\n        daoFundSharedPercent = _daoFundSharedPercent;\\n        \\n        devFund = _devFund;\\n        devFundSharedPercent = _devFundSharedPercent;\\n        insuranceFund = _insuranceFund;\\t\\n        insuranceFundSharedPercent = _insuranceFundSharedPercent;\\n    }\\n\\n    function setMaxDiscountRate(uint256 _maxDiscountRate) external onlyOperator {\\n        maxDiscountRate = _maxDiscountRate;\\n    }\\n\\n    function setMaxPremiumRate(uint256 _maxPremiumRate) external onlyOperator {\\n        maxPremiumRate = _maxPremiumRate;\\n    }\\n\\n    function setDiscountPercent(uint256 _discountPercent) external onlyOperator {\\n        require(_discountPercent <= 20000, \\\"_discountPercent is over 200%\\\");\\n        discountPercent = _discountPercent;\\n    }\\n\\n    function setPremiumThreshold(uint256 _premiumThreshold) external onlyOperator {\\n        require(_premiumThreshold >= libraPriceCeiling, \\\"_premiumThreshold exceeds libraPriceCeiling\\\");\\n        require(_premiumThreshold <= 150, \\\"_premiumThreshold is higher than 1.5\\\");\\n        premiumThreshold = _premiumThreshold;\\n    }\\n\\n    function setPremiumPercent(uint256 _premiumPercent) external onlyOperator {\\n        require(_premiumPercent <= 20000, \\\"_premiumPercent is over 200%\\\");\\n        premiumPercent = _premiumPercent;\\n    }\\n\\n    function setMintingFactorForPayingDebt(uint256 _mintingFactorForPayingDebt) external onlyOperator {\\n        require(_mintingFactorForPayingDebt >= 10000 && _mintingFactorForPayingDebt <= 20000, \\\"_mintingFactorForPayingDebt: out of range\\\"); // [100%, 200%]\\n        mintingFactorForPayingDebt = _mintingFactorForPayingDebt;\\n    }\\n\\n    function setBondSupplyExpansionPercent(uint256 _bondSupplyExpansionPercent) external onlyOperator {\\n        bondSupplyExpansionPercent = _bondSupplyExpansionPercent;\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    function _updateLibraPrice() internal {\\n        try IOracle(libraOracle).update() {} catch {}\\n    }\\n\\n    function getLibraCirculatingSupply() public view returns (uint256) {\\n        IERC20 libraErc20 = IERC20(libra);\\n        uint256 totalSupply = libraErc20.totalSupply();\\n        uint256 balanceExcluded = 0;\\n        for (uint8 entryId = 0; entryId < excludedFromTotalSupply.length; ++entryId) {\\n            balanceExcluded = balanceExcluded.add(libraErc20.balanceOf(excludedFromTotalSupply[entryId]));\\n        }\\n        return totalSupply.sub(balanceExcluded);\\n    }\\n\\n    function buyBonds(uint256 _libraAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\\n        require(_libraAmount > 0, \\\"Treasury: cannot purchase bonds with zero amount\\\");\\n\\n        uint256 libraPrice = getLibraPrice();\\n        require(libraPrice == targetPrice, \\\"Treasury: LIBRA price moved\\\");\\n        require(\\n            libraPrice < libraPriceOne, // price < $1\\n            \\\"Treasury: libraPrice not eligible for bond purchase\\\"\\n        );\\n\\n        require(_libraAmount <= epochSupplyContractionLeft, \\\"Treasury: not enough bond left to purchase\\\");\\n\\n        uint256 _rate = getBondDiscountRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _bondAmount = _libraAmount.mul(_rate).div(1e18);\\n        uint256 libraSupply = getLibraCirculatingSupply();\\n        uint256 newBondSupply = IERC20(lbond).totalSupply().add(_bondAmount);\\n        require(newBondSupply <= libraSupply.mul(maxDebtRatioPercent).div(10000), \\\"over max debt ratio\\\");\\n\\n        IBasisAsset(libra).burnFrom(msg.sender, _libraAmount);\\n        IBasisAsset(lbond).mint(msg.sender, _bondAmount);\\n\\n        epochSupplyContractionLeft = epochSupplyContractionLeft.sub(_libraAmount);\\n        _updateLibraPrice();\\n\\n        emit BoughtBonds(msg.sender, _libraAmount, _bondAmount);\\n    }\\n\\n    function redeemBonds(uint256 _bondAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\\n        require(_bondAmount > 0, \\\"Treasury: cannot redeem bonds with zero amount\\\");\\n\\n        uint256 libraPrice = getLibraPrice();\\n        require(libraPrice == targetPrice, \\\"Treasury: LIBRA price moved\\\");\\n        require(\\n            libraPrice > libraPriceCeiling, // price > $1.01\\n            \\\"Treasury: libraPrice not eligible for bond purchase\\\"\\n        );\\n\\n        uint256 _rate = getBondPremiumRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _libraAmount = _bondAmount.mul(_rate).div(1e18);\\n        require(IERC20(libra).balanceOf(address(this)) >= _libraAmount, \\\"Treasury: treasury has no more budget\\\");\\n\\n        seigniorageSaved = seigniorageSaved.sub(Math.min(seigniorageSaved, _libraAmount));\\n\\n        IBasisAsset(lbond).burnFrom(msg.sender, _bondAmount);\\n        IERC20(libra).safeTransfer(msg.sender, _libraAmount);\\n\\n        _updateLibraPrice();\\n\\n        emit RedeemedBonds(msg.sender, _libraAmount, _bondAmount);\\n    }\\n\\n    function _sendToBoardroom(uint256 _amount) internal {\\n        IBasisAsset(libra).mint(address(this), _amount);\\n\\n        uint256 _daoFundSharedAmount = 0;\\n        if (daoFundSharedPercent > 0) {\\n            _daoFundSharedAmount = _amount.mul(daoFundSharedPercent).div(10000);\\n            IERC20(libra).transfer(daoFund, _daoFundSharedAmount);\\n            emit DaoFundFunded(now, _daoFundSharedAmount);\\n        }\\n\\n        uint256 _devFundSharedAmount = 0;\\n        if (devFundSharedPercent > 0) {\\n            _devFundSharedAmount = _amount.mul(devFundSharedPercent).div(10000);\\n            IERC20(libra).transfer(devFund, _devFundSharedAmount);\\n            emit DevFundFunded(now, _devFundSharedAmount);\\n        }\\n\\n        _amount = _amount.sub(_daoFundSharedAmount).sub(_devFundSharedAmount);\\n\\n        IERC20(libra).safeApprove(boardroom, 0);\\n        IERC20(libra).safeApprove(boardroom, _amount);\\n        IBoardroom(boardroom).allocateSeigniorage(_amount);\\n        emit BoardroomFunded(now, _amount);\\n    }\\n\\n    function _calculateMaxSupplyExpansionPercent(uint256 _libraSupply) internal returns (uint256) {\\n        for (uint8 tierId = 8; tierId >= 0; --tierId) {\\n            if (_libraSupply >= supplyTiers[tierId]) {\\n                maxSupplyExpansionPercent = maxExpansionTiers[tierId];\\n                break;\\n            }\\n        }\\n        return maxSupplyExpansionPercent;\\n    }\\n\\n    function allocateSeigniorage() external onlyOneBlock checkCondition checkEpoch checkOperator {\\n        _updateLibraPrice();\\n        previousEpochLibraPrice = getLibraPrice();\\n        uint256 libraSupply = getLibraCirculatingSupply().sub(seigniorageSaved);\\n        if (epoch < bootstrapEpochs) {\\n            // 28 first epochs with 4.5% expansion\\n            _sendToBoardroom(libraSupply.mul(bootstrapSupplyExpansionPercent).div(10000));\\n        } else {\\n            if (previousEpochLibraPrice > libraPriceCeiling) {\\n                // Expansion ($LIBRA Price > 1 $ASTR): there is some seigniorage to be allocated\\n                uint256 bondSupply = IERC20(lbond).totalSupply();\\n                uint256 _percentage = previousEpochLibraPrice.sub(libraPriceOne);\\n                uint256 _savedForBond;\\n                uint256 _savedForBoardroom;\\n                uint256 _mse = _calculateMaxSupplyExpansionPercent(libraSupply).mul(1e14);\\n                if (_percentage > _mse) {\\n                    _percentage = _mse;\\n                }\\n                if (seigniorageSaved >= bondSupply.mul(bondDepletionFloorPercent).div(10000)) {\\n                    // saved enough to pay debt, mint as usual rate\\n                    _savedForBoardroom = libraSupply.mul(_percentage).div(1e18);\\n                } else {\\n                    // have not saved enough to pay debt, mint more\\n                    uint256 _seigniorage = libraSupply.mul(_percentage).div(1e18);\\n                    _savedForBoardroom = _seigniorage.mul(seigniorageExpansionFloorPercent).div(10000);\\n                    _savedForBond = _seigniorage.sub(_savedForBoardroom);\\n                    if (mintingFactorForPayingDebt > 0) {\\n                        _savedForBond = _savedForBond.mul(mintingFactorForPayingDebt).div(10000);\\n                    }\\n                }\\n                if (_savedForBoardroom > 0) {\\n                    _sendToBoardroom(_savedForBoardroom);\\n                }\\n                if (_savedForBond > 0) {\\n                    seigniorageSaved = seigniorageSaved.add(_savedForBond);\\n                    IBasisAsset(libra).mint(address(this), _savedForBond);\\n                    emit TreasuryFunded(now, _savedForBond);\\n                }\\n            }\\n        }\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        // do not allow to drain core tokens\\n        require(address(_token) != address(libra), \\\"libra\\\");\\n        require(address(_token) != address(lbond), \\\"bond\\\");\\n        require(address(_token) != address(lshare), \\\"share\\\");\\n        _token.safeTransfer(_to, _amount);\\n    }\\n\\n    function boardroomSetOperator(address _operator) external onlyOperator {\\n        IBoardroom(boardroom).setOperator(_operator);\\n    }\\n\\n    function boardroomSetLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\\n        IBoardroom(boardroom).setLockUp(_withdrawLockupEpochs, _rewardLockupEpochs);\\n    }\\n\\n    function boardroomAllocateSeigniorage(uint256 amount) external onlyOperator {\\n        IBoardroom(boardroom).allocateSeigniorage(amount);\\n    }\\n\\n    function boardroomGovernanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        IBoardroom(boardroom).governanceRecoverUnsupported(_token, _amount, _to);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\n    },\n    \"contracts/lib/Babylonian.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\"\n    },\n    \"contracts/owner/Operator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Operator is Context, Ownable {\\n    address private _operator;\\n\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\n\\n    constructor() internal {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender, \\\"operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    function isOperator() public view returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(newOperator_ != address(0), \\\"operator: zero address given for new operator\\\");\\n        emit OperatorTransferred(address(0), newOperator_);\\n        _operator = newOperator_;\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IOracle {\\n    function update() external;\\n\\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut);\\n\\n    function twap(address _token, uint256 _amountIn) external view returns (uint144 _amountOut);\\n}\\n\"\n    },\n    \"contracts/interfaces/IBoardroom.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBoardroom {\\n    function balanceOf(address _director) external view returns (uint256);\\n\\n    function earned(address _director) external view returns (uint256);\\n\\n    function canWithdraw(address _director) external view returns (bool);\\n\\n    function canClaimReward(address _director) external view returns (bool);\\n\\n    function epoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function getLibraPrice() external view returns (uint256);\\n\\n    function setOperator(address _operator) external;\\n\\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external;\\n\\n    function stake(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function exit() external;\\n\\n    function claimReward() external;\\n\\n    function allocateSeigniorage(uint256 _amount) external;\\n\\n    function governanceRecoverUnsupported(address _token, uint256 _amount, address _to) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"contracts/mocks/LibraDummy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\n\\nimport \\\"../lib/SafeMath8.sol\\\";\\nimport \\\"../owner/Operator.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\ncontract LibraDummy is ERC20Burnable, Operator {\\n    using SafeMath8 for uint8;\\n    using SafeMath for uint256;\\n\\n    // Initial distribution for the first 24h genesis pools\\n    uint256 public constant INITIAL_GENESIS_POOL_DISTRIBUTION = 11000 ether;\\n    // Initial distribution for the day 2-5 LIBRA-WASTR LP -> LIBRA pool\\n    uint256 public constant INITIAL_LIBRA_POOL_DISTRIBUTION = 140000 ether;\\n    // Distribution for airdrops wallet\\n    uint256 public constant INITIAL_AIRDROP_WALLET_DISTRIBUTION = 10000 ether;\\n\\n    // Have the rewards been distributed to the pools\\n    bool public rewardPoolDistributed = false;\\n\\n    /* ================= Taxation =============== */\\n    // Address of the Oracle\\n    address public libraOracle;\\n    // Address of the Tax Office\\n    address public taxOffice;\\n\\n    // Current tax rate\\n    uint256 public taxRate;\\n    // Price threshold below which taxes will get burned\\n    uint256 public burnThreshold = 1.10e18;\\n    // Address of the tax collector wallet\\n    address public taxCollectorAddress;\\n\\n    // Should the taxes be calculated using the tax tiers\\n    bool public autoCalculateTax;\\n\\n    // Tax Tiers\\n    uint256[] public taxTiersTwaps = [0, 5e17, 6e17, 7e17, 8e17, 9e17, 9.5e17, 1e18, 1.05e18, 1.10e18, 1.20e18, 1.30e18, 1.40e18, 1.50e18];\\n    uint256[] public taxTiersRates = [2000, 1900, 1800, 1700, 1600, 1500, 1500, 1500, 1500, 1400, 900, 400, 200, 100];\\n\\n    // Sender addresses excluded from Tax\\n    mapping(address => bool) public excludedAddresses;\\n\\n    event TaxOfficeTransferred(address oldAddress, address newAddress);\\n\\n    modifier onlyTaxOffice() {\\n        require(taxOffice == msg.sender, \\\"Caller is not the tax office\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperatorOrTaxOffice() {\\n        require(isOperator() || taxOffice == msg.sender, \\\"Caller is not the operator or the tax office\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructs the LIBRA ERC-20 contract.\\n     */\\n    constructor(uint256 _taxRate, address _taxCollectorAddress) public ERC20(\\\"LIBRADUMMY\\\", \\\"LIBRADUMMY\\\") {\\n        // Mints 1 LIBRA to contract creator for initial pool setup\\n        require(_taxRate < 10000, \\\"tax equal or bigger to 100%\\\");\\n        //require(_taxCollectorAddress != address(0), \\\"tax collector address must be non-zero address\\\");\\n\\n        excludeAddress(address(this));\\n\\n        _mint(msg.sender, 1 ether);\\n        taxRate = _taxRate;\\n        taxCollectorAddress = _taxCollectorAddress;\\n    }\\n\\n    /* ============= Taxation ============= */\\n\\n    function getTaxTiersTwapsCount() public view returns (uint256 count) {\\n        return taxTiersTwaps.length;\\n    }\\n\\n    function getTaxTiersRatesCount() public view returns (uint256 count) {\\n        return taxTiersRates.length;\\n    }\\n\\n    function isAddressExcluded(address _address) public view returns (bool) {\\n        return excludedAddresses[_address];\\n    }\\n\\n    function setTaxTiersTwap(uint8 _index, uint256 _value) public onlyTaxOffice returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < getTaxTiersTwapsCount(), \\\"Index has to lower than count of tax tiers\\\");\\n        if (_index > 0) {\\n            require(_value > taxTiersTwaps[_index - 1]);\\n        }\\n        if (_index < getTaxTiersTwapsCount().sub(1)) {\\n            require(_value < taxTiersTwaps[_index + 1]);\\n        }\\n        taxTiersTwaps[_index] = _value;\\n        return true;\\n    }\\n\\n    function setTaxTiersRate(uint8 _index, uint256 _value) public onlyTaxOffice returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < getTaxTiersRatesCount(), \\\"Index has to lower than count of tax tiers\\\");\\n        taxTiersRates[_index] = _value;\\n        return true;\\n    }\\n\\n    function setBurnThreshold(uint256 _burnThreshold) public onlyTaxOffice returns (bool) {\\n        burnThreshold = _burnThreshold;\\n    }\\n\\n    function _getLibraPrice() internal view returns (uint256 _libraPrice) {\\n        try IOracle(libraOracle).consult(address(this), 1e18) returns (uint144 _price) {\\n            return uint256(_price);\\n        } catch {\\n            revert(\\\"Libra: failed to fetch LIBRA price from Oracle\\\");\\n        }\\n    }\\n\\n    function _updateTaxRate(uint256 _libraPrice) internal returns (uint256){\\n        if (autoCalculateTax) {\\n            for (uint8 tierId = uint8(getTaxTiersTwapsCount()).sub(1); tierId >= 0; --tierId) {\\n                if (_libraPrice >= taxTiersTwaps[tierId]) {\\n                    require(taxTiersRates[tierId] < 10000, \\\"tax equal or bigger to 100%\\\");\\n                    taxRate = taxTiersRates[tierId];\\n                    return taxTiersRates[tierId];\\n                }\\n            }\\n        }\\n    }\\n\\n    function enableAutoCalculateTax() public onlyTaxOffice {\\n        autoCalculateTax = true;\\n    }\\n\\n    function disableAutoCalculateTax() public onlyTaxOffice {\\n        autoCalculateTax = false;\\n    }\\n\\n    function setLibraOracle(address _libraOracle) public onlyOperatorOrTaxOffice {\\n        require(_libraOracle != address(0), \\\"oracle address cannot be 0 address\\\");\\n        libraOracle = _libraOracle;\\n    }\\n\\n    function setTaxOffice(address _taxOffice) public onlyOperatorOrTaxOffice {\\n        require(_taxOffice != address(0), \\\"tax office address cannot be 0 address\\\");\\n        emit TaxOfficeTransferred(taxOffice, _taxOffice);\\n        taxOffice = _taxOffice;\\n    }\\n\\n    function setTaxCollectorAddress(address _taxCollectorAddress) public onlyTaxOffice {\\n        require(_taxCollectorAddress != address(0), \\\"tax collector address must be non-zero address\\\");\\n        taxCollectorAddress = _taxCollectorAddress;\\n    }\\n\\n    function setTaxRate(uint256 _taxRate) public onlyTaxOffice {\\n        require(!autoCalculateTax, \\\"auto calculate tax cannot be enabled\\\");\\n        require(_taxRate < 10000, \\\"tax equal or bigger to 100%\\\");\\n        taxRate = _taxRate;\\n    }\\n\\n    function excludeAddress(address _address) public onlyOperatorOrTaxOffice returns (bool) {\\n        require(!excludedAddresses[_address], \\\"address can't be excluded\\\");\\n        excludedAddresses[_address] = true;\\n        return true;\\n    }\\n\\n    function includeAddress(address _address) public onlyOperatorOrTaxOffice returns (bool) {\\n        require(excludedAddresses[_address], \\\"address can't be included\\\");\\n        excludedAddresses[_address] = false;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Operator mints LIBRA to a recipient\\n     * @param recipient_ The address of recipient\\n     * @param amount_ The amount of LIBRA to mint to\\n     * @return whether the process has been done\\n     */\\n    function mint(address recipient_, uint256 amount_) public onlyOperator returns (bool) {\\n        uint256 balanceBefore = balanceOf(recipient_);\\n        _mint(recipient_, amount_);\\n        uint256 balanceAfter = balanceOf(recipient_);\\n\\n        return balanceAfter > balanceBefore;\\n    }\\n\\n    function burn(uint256 amount) public override {\\n        super.burn(amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount) public override onlyOperator {\\n        super.burnFrom(account, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        uint256 currentTaxRate = 0;\\n        bool burnTax = false;\\n\\n        if (autoCalculateTax) {\\n            uint256 currentLibraPrice = _getLibraPrice();\\n            currentTaxRate = _updateTaxRate(currentLibraPrice);\\n            if (currentLibraPrice < burnThreshold) {\\n                burnTax = true;\\n            }\\n        }\\n\\n\\n        if (currentTaxRate == 0 || excludedAddresses[sender]) {\\n            _transfer(sender, recipient, amount);\\n        } else {\\n            _transferWithTax(sender, recipient, amount, burnTax);\\n        }\\n\\n        _approve(sender, _msgSender(), allowance(sender, _msgSender()).sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function _transferWithTax(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool burnTax\\n    ) internal returns (bool) {\\n        uint256 taxAmount = amount.mul(taxRate).div(10000);\\n        uint256 amountAfterTax = amount.sub(taxAmount);\\n\\n        if(burnTax) {\\n            // Burn tax\\n            super.burnFrom(sender, taxAmount);\\n        } else {\\n            // Transfer tax to tax collector\\n            _transfer(sender, taxCollectorAddress, taxAmount);\\n        }\\n\\n        // Transfer amount after tax to recipient\\n        _transfer(sender, recipient, amountAfterTax);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice distribute to reward pool (only once)\\n     */\\n    function distributeReward(\\n        address _genesisPool,\\n        address _libraPool,\\n        address _airdropWallet\\n    ) external onlyOperator {\\n        require(!rewardPoolDistributed, \\\"only can distribute once\\\");\\n        require(_genesisPool != address(0), \\\"!_genesisPool\\\");\\n        require(_libraPool != address(0), \\\"!_libraPool\\\");\\n        require(_airdropWallet != address(0), \\\"!_airdropWallet\\\");\\n        rewardPoolDistributed = true;\\n        _mint(_genesisPool, INITIAL_GENESIS_POOL_DISTRIBUTION);\\n        _mint(_libraPool, INITIAL_LIBRA_POOL_DISTRIBUTION);\\n        _mint(_airdropWallet, INITIAL_AIRDROP_WALLET_DISTRIBUTION);\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        _token.transfer(_to, _amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/lib/SafeMath8.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath8 {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint8 a, uint8 b) internal pure returns (uint8) {\\n        uint8 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint8 a, uint8 b, string memory errorMessage) internal pure returns (uint8) {\\n        require(b <= a, errorMessage);\\n        uint8 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint8 a, uint8 b) internal pure returns (uint8) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint8 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint8 a, uint8 b, string memory errorMessage) internal pure returns (uint8) {\\n        require(b > 0, errorMessage);\\n        uint8 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint8 a, uint8 b) internal pure returns (uint8) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint8 a, uint8 b, string memory errorMessage) internal pure returns (uint8) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\n    },\n    \"contracts/utils/Epoch.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport '../owner/Operator.sol';\\n\\ncontract Epoch is Operator {\\n    using SafeMath for uint256;\\n\\n    uint256 private period;\\n    uint256 private startTime;\\n    uint256 private lastEpochTime;\\n    uint256 private epoch;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        uint256 _period,\\n        uint256 _startTime,\\n        uint256 _startEpoch\\n    ) public {\\n        period = _period;\\n        startTime = _startTime;\\n        epoch = _startEpoch;\\n        lastEpochTime = startTime.sub(period);\\n    }\\n\\n    /* ========== Modifier ========== */\\n\\n    modifier checkStartTime {\\n        require(now >= startTime, 'Epoch: not started yet');\\n\\n        _;\\n    }\\n\\n    modifier checkEpoch {\\n        uint256 _nextEpochPoint = nextEpochPoint();\\n        if (now < _nextEpochPoint) {\\n            require(msg.sender == operator(), 'Epoch: only operator allowed for pre-epoch');\\n            _;\\n        } else {\\n            _;\\n\\n            for (;;) {\\n                lastEpochTime = _nextEpochPoint;\\n                ++epoch;\\n                _nextEpochPoint = nextEpochPoint();\\n                if (now < _nextEpochPoint) break;\\n            }\\n        }\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function getCurrentEpoch() public view returns (uint256) {\\n        return epoch;\\n    }\\n\\n    function getPeriod() public view returns (uint256) {\\n        return period;\\n    }\\n\\n    function getStartTime() public view returns (uint256) {\\n        return startTime;\\n    }\\n\\n    function getLastEpochTime() public view returns (uint256) {\\n        return lastEpochTime;\\n    }\\n\\n    function nextEpochPoint() public view returns (uint256) {\\n        return lastEpochTime.add(period);\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function setPeriod(uint256 _period) external onlyOperator {\\n        require(_period >= 1 hours && _period <= 48 hours, '_period: out of range');\\n        period = _period;\\n    }\\n\\n    function setEpoch(uint256 _epoch) external onlyOperator {\\n        epoch = _epoch;\\n    }\\n}\\n\"\n    },\n    \"contracts/Oracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./lib/Babylonian.sol\\\";\\nimport \\\"./lib/FixedPoint.sol\\\";\\nimport \\\"./lib/UniswapV2OracleLibrary.sol\\\";\\nimport \\\"./utils/Epoch.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\n\\n// fixed window oracle that recomputes the average price for the entire period once every period\\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\ncontract Oracle is Epoch {\\n    using FixedPoint for *;\\n    using SafeMath for uint256;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // uniswap\\n    address public token0;\\n    address public token1;\\n    IUniswapV2Pair public pair;\\n\\n    // oracle\\n    uint32 public blockTimestampLast;\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    FixedPoint.uq112x112 public price0Average;\\n    FixedPoint.uq112x112 public price1Average;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        IUniswapV2Pair _pair,\\n        uint256 _period,\\n        uint256 _startTime\\n    ) public Epoch(_period, _startTime, 0) {\\n        pair = _pair;\\n        token0 = pair.token0();\\n        token1 = pair.token1();\\n        price0CumulativeLast = pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\\n        price1CumulativeLast = pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\\n        uint112 reserve0;\\n        uint112 reserve1;\\n        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\\n        require(reserve0 != 0 && reserve1 != 0, \\\"Oracle: NO_RESERVES\\\"); // ensure that there's liquidity in the pair\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    /** @dev Updates 1-day EMA price from Uniswap.  */\\n    function update() external checkEpoch {\\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n\\n        if (timeElapsed == 0) {\\n            // prevent divided by zero\\n            return;\\n        }\\n\\n        // overflow is desired, casting never truncates\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\\n        price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\\n\\n        price0CumulativeLast = price0Cumulative;\\n        price1CumulativeLast = price1Cumulative;\\n        blockTimestampLast = blockTimestamp;\\n\\n        emit Updated(price0Cumulative, price1Cumulative);\\n    }\\n\\n    // note this will always return 0 before update has been called successfully for the first time.\\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut) {\\n        if (_token == token0) {\\n            amountOut = price0Average.mul(_amountIn).decode144();\\n        } else {\\n            require(_token == token1, \\\"Oracle: INVALID_TOKEN\\\");\\n            amountOut = price1Average.mul(_amountIn).decode144();\\n        }\\n    }\\n\\n    function twap(address _token, uint256 _amountIn) external view returns (uint144 _amountOut) {\\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (_token == token0) {\\n            _amountOut = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed)).mul(_amountIn).decode144();\\n        } else if (_token == token1) {\\n            _amountOut = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed)).mul(_amountIn).decode144();\\n        }\\n    }\\n\\n    event Updated(uint256 price0CumulativeLast, uint256 price1CumulativeLast);\\n}\\n\"\n    },\n    \"contracts/lib/FixedPoint.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Babylonian.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = uint256(1) << RESOLUTION;\\n    uint256 private constant Q224 = Q112 << RESOLUTION;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\n        require(x != 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z;\\n        require(y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x), \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, \\\"FixedPoint: ZERO_RECIPROCAL\\\");\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\\n    }\\n}\\n\"\n    },\n    \"contracts/lib/UniswapV2OracleLibrary.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./FixedPoint.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2**32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(address pair)\\n        internal\\n        view\\n        returns (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        )\\n    {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint256(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\n    },\n    \"contracts/lib/UniswapV2Library.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/mocks/LShareDummy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\nimport \\\"../owner/Operator.sol\\\";\\n\\ncontract LShareDummy is ERC20Burnable, Operator {\\n    using SafeMath for uint256;\\n\\n    // TOTAL MAX SUPPLY = 70,000 LSHAREs\\n    uint256 public constant FARMING_POOL_REWARD_ALLOCATION = 49000 ether;\\n    uint256 public constant TREASURY_FUND_POOL_ALLOCATION = 3500 ether;\\n    uint256 public constant COMMUNITY_FUND_POOL_ALLOCATION = 10500 ether;\\n    uint256 public constant DEV_FUND_POOL_ALLOCATION = 7000 ether;\\n\\n    uint256 public constant VESTING_DURATION = 365 days;\\n    uint256 public startTime;\\n    uint256 public endTime;\\n\\n    uint256 public communityFundRewardRate;\\n    uint256 public treasuryFundRewardRate;\\n    uint256 public devFundRewardRate;\\n    \\n    address public treasuryFund;\\n    address public communityFund;\\n    address public devFund;\\n\\n    uint256 public lastClaimedTime;\\n\\n    bool public rewardPoolDistributed = false;\\n\\n    constructor(uint256 _startTime, address _communityFund, address _devFund, address _treasuryFund) public ERC20(\\\"LSHAREDUMMY\\\", \\\"LSHAREDUMMY\\\") {\\n        _mint(msg.sender, 1 ether); // mint 1 LSHARE for initial pools deployment\\n\\n        startTime = _startTime;\\n        endTime = startTime + VESTING_DURATION;\\n\\n        lastClaimedTime = startTime;\\n\\n        communityFundRewardRate = COMMUNITY_FUND_POOL_ALLOCATION.div(VESTING_DURATION);\\n        devFundRewardRate = DEV_FUND_POOL_ALLOCATION.div(VESTING_DURATION);\\n        treasuryFundRewardRate = TREASURY_FUND_POOL_ALLOCATION.div(VESTING_DURATION);\\n\\n        require(_devFund != address(0), \\\"Address cannot be 0\\\");\\n        devFund = _devFund;\\n\\n        require(_communityFund != address(0), \\\"Address cannot be 0\\\");\\n        communityFund = _communityFund;\\n\\n        require(_treasuryFund != address(0), \\\"Address cannot be 0\\\");\\n        treasuryFund = _treasuryFund;\\n    }\\n\\n    function setCommunityFund(address _communityFund) external onlyOperator {\\t\\n        require(_communityFund != address(0), \\\"zero\\\");\\n        communityFund = _communityFund;\\n    }\\n\\n    function setTreasuryFund(address _treasuryFund) external onlyOperator {\\t\\n        require(_treasuryFund != address(0), \\\"zero\\\");\\n        treasuryFund = _treasuryFund;\\n    }\\n\\n\\n    function setDevFund(address _devFund) external {\\n        require(msg.sender == devFund, \\\"!dev\\\");\\n        require(_devFund != address(0), \\\"zero\\\");\\n        devFund = _devFund;\\n    }\\n\\n    function unclaimedCommunityFund() public view returns (uint256 _pending) {\\n        uint256 _now = block.timestamp;\\n        if (_now > endTime) _now = endTime;\\n        if (lastClaimedTime >= _now) return 0;\\n        _pending = _now.sub(lastClaimedTime).mul(communityFundRewardRate);\\n    }\\n\\n    function unclaimedDevFund() public view returns (uint256 _pending) {\\n        uint256 _now = block.timestamp;\\n        if (_now > endTime) _now = endTime;\\n        if (lastClaimedTime >= _now) return 0;\\n        _pending = _now.sub(lastClaimedTime).mul(devFundRewardRate);\\n    }\\n\\n    function unclaimedTreasuryFund() public view returns (uint256 _pending) {\\t\\n        uint256 _now = block.timestamp;\\n        if (_now > endTime) _now = endTime;\\n        if (lastClaimedTime >= _now) return 0;\\t\\n        _pending = _now.sub(lastClaimedTime).mul(treasuryFundRewardRate);\\t\\n    }\\n\\n    /**\\n     * @dev Claim pending rewards to community and dev fund\\n     */\\n    function claimRewards() external {\\n        uint256 _pending = unclaimedCommunityFund();\\n        if (_pending > 0 && communityFund != address(0)) {\\n            _mint(communityFund, _pending);\\n        }\\n        _pending = unclaimedDevFund();\\n        if (_pending > 0 && devFund != address(0)) {\\n            _mint(devFund, _pending);\\n        }\\n        _pending = unclaimedTreasuryFund();\\t\\n        if (_pending > 0 && treasuryFund != address(0)) {\\t\\n            _mint(treasuryFund, _pending);\\n        }\\n        lastClaimedTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice distribute to reward pool (only once)\\n     */\\n    function distributeReward(address _farmingIncentiveFund) external onlyOperator {\\n        require(!rewardPoolDistributed, \\\"only can distribute once\\\");\\n        require(_farmingIncentiveFund != address(0), \\\"!_farmingIncentiveFund\\\");\\n        rewardPoolDistributed = true;\\n        _mint(_farmingIncentiveFund, FARMING_POOL_REWARD_ALLOCATION);\\n    }\\n\\n    function burn(uint256 amount) public override {\\n        super.burn(amount);\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        _token.transfer(_to, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/mocks/LBondDummy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\nimport \\\"../owner/Operator.sol\\\";\\n\\ncontract LBondDummy is ERC20Burnable, Operator {\\n    /**\\n     * @notice Constructs the LIBRA Bond ERC-20 contract.\\n     */\\n    constructor() public ERC20(\\\"LBONDDUMMY\\\", \\\"LBONDDUMMY\\\") {}\\n\\n    /**\\n     * @notice Operator mints basis bonds to a recipient\\n     * @param recipient_ The address of recipient\\n     * @param amount_ The amount of basis bonds to mint to\\n     * @return whether the process has been done\\n     */\\n    function mint(address recipient_, uint256 amount_) public onlyOperator returns (bool) {\\n        uint256 balanceBefore = balanceOf(recipient_);\\n        _mint(recipient_, amount_);\\n        uint256 balanceAfter = balanceOf(recipient_);\\n\\n        return balanceAfter > balanceBefore;\\n    }\\n\\n    function burn(uint256 amount) public override {\\n        super.burn(amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount) public override onlyOperator {\\n        super.burnFrom(account, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/LShare.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\nimport \\\"./owner/Operator.sol\\\";\\n\\ncontract LShare is ERC20Burnable, Operator {\\n    using SafeMath for uint256;\\n\\n    // TOTAL MAX SUPPLY = 70,000 LSHAREs\\n    uint256 public constant FARMING_POOL_REWARD_ALLOCATION = 49000 ether;\\n    uint256 public constant TREASURY_FUND_POOL_ALLOCATION = 3500 ether;\\n    uint256 public constant COMMUNITY_FUND_POOL_ALLOCATION = 10500 ether;\\n    uint256 public constant DEV_FUND_POOL_ALLOCATION = 7000 ether;\\n\\n    uint256 public constant VESTING_DURATION = 365 days;\\n    uint256 public startTime;\\n    uint256 public endTime;\\n\\n    uint256 public communityFundRewardRate;\\n    uint256 public treasuryFundRewardRate;\\n    uint256 public devFundRewardRate;\\n    \\n    address public treasuryFund;\\n    address public communityFund;\\n    address public devFund;\\n\\n    uint256 public lastClaimedTime;\\n\\n    bool public rewardPoolDistributed = false;\\n\\n    constructor(uint256 _startTime, address _communityFund, address _devFund, address _treasuryFund) public ERC20(\\\"Libra Finance SHARE\\\", \\\"LSHARE\\\") {\\n        _mint(msg.sender, 1 ether); // mint 1 LSHARE for initial pools deployment\\n\\n        startTime = _startTime;\\n        endTime = startTime + VESTING_DURATION;\\n\\n        lastClaimedTime = startTime;\\n\\n        communityFundRewardRate = COMMUNITY_FUND_POOL_ALLOCATION.div(VESTING_DURATION);\\n        devFundRewardRate = DEV_FUND_POOL_ALLOCATION.div(VESTING_DURATION);\\n        treasuryFundRewardRate = TREASURY_FUND_POOL_ALLOCATION.div(VESTING_DURATION);\\n\\n        require(_devFund != address(0), \\\"Address cannot be 0\\\");\\n        devFund = _devFund;\\n\\n        require(_communityFund != address(0), \\\"Address cannot be 0\\\");\\n        communityFund = _communityFund;\\n\\n        require(_treasuryFund != address(0), \\\"Address cannot be 0\\\");\\n        treasuryFund = _treasuryFund;\\n    }\\n\\n    function setCommunityFund(address _communityFund) external onlyOperator {\\t\\n        require(_communityFund != address(0), \\\"zero\\\");\\n        communityFund = _communityFund;\\n    }\\n\\n    function setTreasuryFund(address _treasuryFund) external onlyOperator {\\t\\n        require(_treasuryFund != address(0), \\\"zero\\\");\\n        treasuryFund = _treasuryFund;\\n    }\\n\\n\\n    function setDevFund(address _devFund) external {\\n        require(msg.sender == devFund, \\\"!dev\\\");\\n        require(_devFund != address(0), \\\"zero\\\");\\n        devFund = _devFund;\\n    }\\n\\n    function unclaimedCommunityFund() public view returns (uint256 _pending) {\\n        uint256 _now = block.timestamp;\\n        if (_now > endTime) _now = endTime;\\n        if (lastClaimedTime >= _now) return 0;\\n        _pending = _now.sub(lastClaimedTime).mul(communityFundRewardRate);\\n    }\\n\\n    function unclaimedDevFund() public view returns (uint256 _pending) {\\n        uint256 _now = block.timestamp;\\n        if (_now > endTime) _now = endTime;\\n        if (lastClaimedTime >= _now) return 0;\\n        _pending = _now.sub(lastClaimedTime).mul(devFundRewardRate);\\n    }\\n\\n    function unclaimedTreasuryFund() public view returns (uint256 _pending) {\\t\\n        uint256 _now = block.timestamp;\\n        if (_now > endTime) _now = endTime;\\n        if (lastClaimedTime >= _now) return 0;\\t\\n        _pending = _now.sub(lastClaimedTime).mul(treasuryFundRewardRate);\\t\\n    }\\n\\n    /**\\n     * @dev Claim pending rewards to community and dev fund\\n     */\\n    function claimRewards() external {\\n        uint256 _pending = unclaimedCommunityFund();\\n        if (_pending > 0 && communityFund != address(0)) {\\n            _mint(communityFund, _pending);\\n        }\\n        _pending = unclaimedDevFund();\\n        if (_pending > 0 && devFund != address(0)) {\\n            _mint(devFund, _pending);\\n        }\\n        _pending = unclaimedTreasuryFund();\\t\\n        if (_pending > 0 && treasuryFund != address(0)) {\\t\\n            _mint(treasuryFund, _pending);\\n        }\\n        lastClaimedTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice distribute to reward pool (only once)\\n     */\\n    function distributeReward(address _farmingIncentiveFund) external onlyOperator {\\n        require(!rewardPoolDistributed, \\\"only can distribute once\\\");\\n        require(_farmingIncentiveFund != address(0), \\\"!_farmingIncentiveFund\\\");\\n        rewardPoolDistributed = true;\\n        _mint(_farmingIncentiveFund, FARMING_POOL_REWARD_ALLOCATION);\\n    }\\n\\n    function burn(uint256 amount) public override {\\n        super.burn(amount);\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        _token.transfer(_to, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/Libra.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\n\\nimport \\\"./lib/SafeMath8.sol\\\";\\nimport \\\"./owner/Operator.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\ncontract Libra is ERC20Burnable, Operator {\\n    using SafeMath8 for uint8;\\n    using SafeMath for uint256;\\n\\n    // Initial distribution for the first 24h genesis pools\\n    uint256 public constant INITIAL_GENESIS_POOL_DISTRIBUTION = 11000 ether;\\n    // Initial distribution for the day 2-5 LIBRA-WASTR LP -> LIBRA pool\\n    uint256 public constant INITIAL_LIBRA_POOL_DISTRIBUTION = 140000 ether;\\n    // Distribution for airdrops wallet\\n    uint256 public constant INITIAL_AIRDROP_WALLET_DISTRIBUTION = 10000 ether;\\n\\n    // Have the rewards been distributed to the pools\\n    bool public rewardPoolDistributed = false;\\n\\n    /* ================= Taxation =============== */\\n    // Address of the Oracle\\n    address public libraOracle;\\n    // Address of the Tax Office\\n    address public taxOffice;\\n\\n    // Current tax rate\\n    uint256 public taxRate;\\n    // Price threshold below which taxes will get burned\\n    uint256 public burnThreshold = 1.10e18;\\n    // Address of the tax collector wallet\\n    address public taxCollectorAddress;\\n\\n    // Should the taxes be calculated using the tax tiers\\n    bool public autoCalculateTax;\\n\\n    // Tax Tiers\\n    uint256[] public taxTiersTwaps = [0, 5e17, 6e17, 7e17, 8e17, 9e17, 9.5e17, 1e18, 1.05e18, 1.10e18, 1.20e18, 1.30e18, 1.40e18, 1.50e18];\\n    uint256[] public taxTiersRates = [2000, 1900, 1800, 1700, 1600, 1500, 1500, 1500, 1500, 1400, 900, 400, 200, 100];\\n\\n    // Sender addresses excluded from Tax\\n    mapping(address => bool) public excludedAddresses;\\n\\n    event TaxOfficeTransferred(address oldAddress, address newAddress);\\n\\n    modifier onlyTaxOffice() {\\n        require(taxOffice == msg.sender, \\\"Caller is not the tax office\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperatorOrTaxOffice() {\\n        require(isOperator() || taxOffice == msg.sender, \\\"Caller is not the operator or the tax office\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructs the LIBRA ERC-20 contract.\\n     */\\n    constructor(uint256 _taxRate, address _taxCollectorAddress) public ERC20(\\\"LIBRA\\\", \\\"LIBRA Token\\\") {\\n        // Mints 1 LIBRA to contract creator for initial pool setup\\n        require(_taxRate < 10000, \\\"tax equal or bigger to 100%\\\");\\n        //require(_taxCollectorAddress != address(0), \\\"tax collector address must be non-zero address\\\");\\n\\n        excludeAddress(address(this));\\n\\n        _mint(msg.sender, 1 ether);\\n        taxRate = _taxRate;\\n        taxCollectorAddress = _taxCollectorAddress;\\n    }\\n\\n    /* ============= Taxation ============= */\\n\\n    function getTaxTiersTwapsCount() public view returns (uint256 count) {\\n        return taxTiersTwaps.length;\\n    }\\n\\n    function getTaxTiersRatesCount() public view returns (uint256 count) {\\n        return taxTiersRates.length;\\n    }\\n\\n    function isAddressExcluded(address _address) public view returns (bool) {\\n        return excludedAddresses[_address];\\n    }\\n\\n    function setTaxTiersTwap(uint8 _index, uint256 _value) public onlyTaxOffice returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < getTaxTiersTwapsCount(), \\\"Index has to lower than count of tax tiers\\\");\\n        if (_index > 0) {\\n            require(_value > taxTiersTwaps[_index - 1]);\\n        }\\n        if (_index < getTaxTiersTwapsCount().sub(1)) {\\n            require(_value < taxTiersTwaps[_index + 1]);\\n        }\\n        taxTiersTwaps[_index] = _value;\\n        return true;\\n    }\\n\\n    function setTaxTiersRate(uint8 _index, uint256 _value) public onlyTaxOffice returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < getTaxTiersRatesCount(), \\\"Index has to lower than count of tax tiers\\\");\\n        taxTiersRates[_index] = _value;\\n        return true;\\n    }\\n\\n    function setBurnThreshold(uint256 _burnThreshold) public onlyTaxOffice returns (bool) {\\n        burnThreshold = _burnThreshold;\\n    }\\n\\n    function _getLibraPrice() internal view returns (uint256 _libraPrice) {\\n        try IOracle(libraOracle).consult(address(this), 1e18) returns (uint144 _price) {\\n            return uint256(_price);\\n        } catch {\\n            revert(\\\"Libra: failed to fetch LIBRA price from Oracle\\\");\\n        }\\n    }\\n\\n    function _updateTaxRate(uint256 _libraPrice) internal returns (uint256){\\n        if (autoCalculateTax) {\\n            for (uint8 tierId = uint8(getTaxTiersTwapsCount()).sub(1); tierId >= 0; --tierId) {\\n                if (_libraPrice >= taxTiersTwaps[tierId]) {\\n                    require(taxTiersRates[tierId] < 10000, \\\"tax equal or bigger to 100%\\\");\\n                    taxRate = taxTiersRates[tierId];\\n                    return taxTiersRates[tierId];\\n                }\\n            }\\n        }\\n    }\\n\\n    function enableAutoCalculateTax() public onlyTaxOffice {\\n        autoCalculateTax = true;\\n    }\\n\\n    function disableAutoCalculateTax() public onlyTaxOffice {\\n        autoCalculateTax = false;\\n    }\\n\\n    function setLibraOracle(address _libraOracle) public onlyOperatorOrTaxOffice {\\n        require(_libraOracle != address(0), \\\"oracle address cannot be 0 address\\\");\\n        libraOracle = _libraOracle;\\n    }\\n\\n    function setTaxOffice(address _taxOffice) public onlyOperatorOrTaxOffice {\\n        require(_taxOffice != address(0), \\\"tax office address cannot be 0 address\\\");\\n        emit TaxOfficeTransferred(taxOffice, _taxOffice);\\n        taxOffice = _taxOffice;\\n    }\\n\\n    function setTaxCollectorAddress(address _taxCollectorAddress) public onlyTaxOffice {\\n        require(_taxCollectorAddress != address(0), \\\"tax collector address must be non-zero address\\\");\\n        taxCollectorAddress = _taxCollectorAddress;\\n    }\\n\\n    function setTaxRate(uint256 _taxRate) public onlyTaxOffice {\\n        require(!autoCalculateTax, \\\"auto calculate tax cannot be enabled\\\");\\n        require(_taxRate < 10000, \\\"tax equal or bigger to 100%\\\");\\n        taxRate = _taxRate;\\n    }\\n\\n    function excludeAddress(address _address) public onlyOperatorOrTaxOffice returns (bool) {\\n        require(!excludedAddresses[_address], \\\"address can't be excluded\\\");\\n        excludedAddresses[_address] = true;\\n        return true;\\n    }\\n\\n    function includeAddress(address _address) public onlyOperatorOrTaxOffice returns (bool) {\\n        require(excludedAddresses[_address], \\\"address can't be included\\\");\\n        excludedAddresses[_address] = false;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Operator mints LIBRA to a recipient\\n     * @param recipient_ The address of recipient\\n     * @param amount_ The amount of LIBRA to mint to\\n     * @return whether the process has been done\\n     */\\n    function mint(address recipient_, uint256 amount_) public onlyOperator returns (bool) {\\n        uint256 balanceBefore = balanceOf(recipient_);\\n        _mint(recipient_, amount_);\\n        uint256 balanceAfter = balanceOf(recipient_);\\n\\n        return balanceAfter > balanceBefore;\\n    }\\n\\n    function burn(uint256 amount) public override {\\n        super.burn(amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount) public override onlyOperator {\\n        super.burnFrom(account, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        uint256 currentTaxRate = 0;\\n        bool burnTax = false;\\n\\n        if (autoCalculateTax) {\\n            uint256 currentLibraPrice = _getLibraPrice();\\n            currentTaxRate = _updateTaxRate(currentLibraPrice);\\n            if (currentLibraPrice < burnThreshold) {\\n                burnTax = true;\\n            }\\n        }\\n\\n\\n        if (currentTaxRate == 0 || excludedAddresses[sender]) {\\n            _transfer(sender, recipient, amount);\\n        } else {\\n            _transferWithTax(sender, recipient, amount, burnTax);\\n        }\\n\\n        _approve(sender, _msgSender(), allowance(sender, _msgSender()).sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function _transferWithTax(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool burnTax\\n    ) internal returns (bool) {\\n        uint256 taxAmount = amount.mul(taxRate).div(10000);\\n        uint256 amountAfterTax = amount.sub(taxAmount);\\n\\n        if(burnTax) {\\n            // Burn tax\\n            super.burnFrom(sender, taxAmount);\\n        } else {\\n            // Transfer tax to tax collector\\n            _transfer(sender, taxCollectorAddress, taxAmount);\\n        }\\n\\n        // Transfer amount after tax to recipient\\n        _transfer(sender, recipient, amountAfterTax);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice distribute to reward pool (only once)\\n     */\\n    function distributeReward(\\n        address _genesisPool,\\n        address _libraPool,\\n        address _airdropWallet\\n    ) external onlyOperator {\\n        require(!rewardPoolDistributed, \\\"only can distribute once\\\");\\n        require(_genesisPool != address(0), \\\"!_genesisPool\\\");\\n        require(_libraPool != address(0), \\\"!_libraPool\\\");\\n        require(_airdropWallet != address(0), \\\"!_airdropWallet\\\");\\n        rewardPoolDistributed = true;\\n        _mint(_genesisPool, INITIAL_GENESIS_POOL_DISTRIBUTION);\\n        _mint(_libraPool, INITIAL_LIBRA_POOL_DISTRIBUTION);\\n        _mint(_airdropWallet, INITIAL_AIRDROP_WALLET_DISTRIBUTION);\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        _token.transfer(_to, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IWrappedAstr.sol\": {\n      \"content\": \"pragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWrappedAstr is IERC20 {\\n    function deposit() external payable returns (uint256);\\n\\n    function withdraw(uint256 amount) external returns (uint256);\\n\\n}\\n\\n\"\n    },\n    \"contracts/distribution/LShareRewardPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// Note that this pool has no minter key of lSHARE (rewards).\\n// Instead, the governance will call lSHARE distributeReward method and send reward to this pool at the beginning.\\ncontract LShareRewardPool {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // governance\\n    address public operator;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 token; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. lSHAREs to distribute per block.\\n        uint256 lastRewardTime; // Last time that lSHAREs distribution occurs.\\n        uint256 accLSharePerShare; // Accumulated lSHAREs per share, times 1e18. See below.\\n        bool isStarted; // if lastRewardTime has passed\\n    }\\n\\n    IERC20 public lshare;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The time when lSHARE mining starts.\\n    uint256 public poolStartTime;\\n\\n    // The time when lSHARE mining ends.\\n    uint256 public poolEndTime;\\n\\n    uint256 public lSharePerSecond = 0.00187687 ether; // 60000 Lshare / (370 days * 24h * 60min * 60s)\\n    uint256 public runningTime = 370 days; // 370 days\\n    uint256 public constant TOTAL_REWARDS = 60000 ether;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 amount);\\n\\n    constructor(\\n        address _lshare,\\n        uint256 _poolStartTime\\n    ) public {\\n        require(block.timestamp < _poolStartTime, \\\"late\\\");\\n        if (_lshare != address(0)) lshare = IERC20(_lshare);\\n        poolStartTime = _poolStartTime;\\n        poolEndTime = poolStartTime + runningTime;\\n        operator = msg.sender;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"LShareRewardPool: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    function checkPoolDuplicate(IERC20 _token) internal view {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            require(poolInfo[pid].token != _token, \\\"LShareRewardPool: existing pool?\\\");\\n        }\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _token,\\n        bool _withUpdate,\\n        uint256 _lastRewardTime\\n    ) public onlyOperator {\\n        checkPoolDuplicate(_token);\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        if (block.timestamp < poolStartTime) {\\n            // chef is sleeping\\n            if (_lastRewardTime == 0) {\\n                _lastRewardTime = poolStartTime;\\n            } else {\\n                if (_lastRewardTime < poolStartTime) {\\n                    _lastRewardTime = poolStartTime;\\n                }\\n            }\\n        } else {\\n            // chef is cooking\\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\\n                _lastRewardTime = block.timestamp;\\n            }\\n        }\\n        bool _isStarted =\\n        (_lastRewardTime <= poolStartTime) ||\\n        (_lastRewardTime <= block.timestamp);\\n        poolInfo.push(PoolInfo({\\n            token : _token,\\n            allocPoint : _allocPoint,\\n            lastRewardTime : _lastRewardTime,\\n            accLSharePerShare : 0,\\n            isStarted : _isStarted\\n            }));\\n        if (_isStarted) {\\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        }\\n    }\\n\\n    // Update the given pool's lSHARE allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\\n        massUpdatePools();\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.isStarted) {\\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(\\n                _allocPoint\\n            );\\n        }\\n        pool.allocPoint = _allocPoint;\\n    }\\n\\n    // Return accumulate rewards over the given _from to _to block.\\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime) public view returns (uint256) {\\n        if (_fromTime >= _toTime) return 0;\\n        if (_toTime >= poolEndTime) {\\n            if (_fromTime >= poolEndTime) return 0;\\n            if (_fromTime <= poolStartTime) return poolEndTime.sub(poolStartTime).mul(lSharePerSecond);\\n            return poolEndTime.sub(_fromTime).mul(lSharePerSecond);\\n        } else {\\n            if (_toTime <= poolStartTime) return 0;\\n            if (_fromTime <= poolStartTime) return _toTime.sub(poolStartTime).mul(lSharePerSecond);\\n            return _toTime.sub(_fromTime).mul(lSharePerSecond);\\n        }\\n    }\\n\\n    // View function to see pending lSHAREs on frontend.\\n    function pendingShare(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accLSharePerShare = pool.accLSharePerShare;\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\\n            uint256 _lshareReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\\n            accLSharePerShare = accLSharePerShare.add(_lshareReward.mul(1e18).div(tokenSupply));\\n        }\\n        return user.amount.mul(accLSharePerShare).div(1e18).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (tokenSupply == 0) {\\n            pool.lastRewardTime = block.timestamp;\\n            return;\\n        }\\n        if (!pool.isStarted) {\\n            pool.isStarted = true;\\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\\n        }\\n        if (totalAllocPoint > 0) {\\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\\n            uint256 _lshareReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\\n            pool.accLSharePerShare = pool.accLSharePerShare.add(_lshareReward.mul(1e18).div(tokenSupply));\\n        }\\n        pool.lastRewardTime = block.timestamp;\\n    }\\n\\n    // Deposit LP tokens.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 _pending = user.amount.mul(pool.accLSharePerShare).div(1e18).sub(user.rewardDebt);\\n            if (_pending > 0) {\\n                safeLShareTransfer(_sender, _pending);\\n                emit RewardPaid(_sender, _pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.token.safeTransferFrom(_sender, address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accLSharePerShare).div(1e18);\\n        emit Deposit(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 _pending = user.amount.mul(pool.accLSharePerShare).div(1e18).sub(user.rewardDebt);\\n        if (_pending > 0) {\\n            safeLShareTransfer(_sender, _pending);\\n            emit RewardPaid(_sender, _pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.token.safeTransfer(_sender, _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accLSharePerShare).div(1e18);\\n        emit Withdraw(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 _amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.token.safeTransfer(msg.sender, _amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Safe lshare transfer function, just in case if rounding error causes pool to not have enough lSHAREs.\\n    function safeLShareTransfer(address _to, uint256 _amount) internal {\\n        uint256 _lshareBal = lshare.balanceOf(address(this));\\n        if (_lshareBal > 0) {\\n            if (_amount > _lshareBal) {\\n                lshare.safeTransfer(_to, _lshareBal);\\n            } else {\\n                lshare.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function governanceRecoverUnsupported(IERC20 _token, uint256 amount, address to) external onlyOperator {\\n        if (block.timestamp < poolEndTime + 90 days) {\\n            // do not allow to drain core token (lSHARE or lps) if less than 90 days after pool ends\\n            require(_token != lshare, \\\"lshare\\\");\\n            uint256 length = poolInfo.length;\\n            for (uint256 pid = 0; pid < length; ++pid) {\\n                PoolInfo storage pool = poolInfo[pid];\\n                require(_token != pool.token, \\\"pool.token\\\");\\n            }\\n        }\\n        _token.safeTransfer(to, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/distribution/LibraRewardPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// Note that this pool has no minter key of LIBRA (rewards).\\n// Instead, the governance will call TOLIBRAMB distributeReward method and send reward to this pool at the beginning.\\ncontract LibraRewardPool {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // governance\\n    address public operator;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 token; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. LIBRAs to distribute in the pool.\\n        uint256 lastRewardTime; // Last time that LIBRAs distribution occurred.\\n        uint256 accLibraPerShare; // Accumulated LIBRAs per share, times 1e18. See below.\\n        bool isStarted; // if lastRewardTime has passed\\n    }\\n\\n    IERC20 public libra;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The time when LIBRA mining starts.\\n    uint256 public poolStartTime;\\n\\n    uint256[] public epochTotalRewards = [80000 ether, 60000 ether];\\n\\n    // Time when each epoch ends.\\n    uint256[3] public epochEndTimes;\\n\\n    // Reward per second for each of 2 epochs (last item is equal to 0 - for sanity).\\n    uint256[3] public epochLibraPerSecond;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 amount);\\n\\n    constructor(address _libra, uint256 _poolStartTime) public {\\n        require(block.timestamp < _poolStartTime, \\\"late\\\");\\n        if (_libra != address(0)) libra = IERC20(_libra);\\n\\n        poolStartTime = _poolStartTime;\\n\\n        epochEndTimes[0] = poolStartTime + 4 days; // Day 2-5\\n        epochEndTimes[1] = epochEndTimes[0] + 5 days; // Day 6-10\\n\\n        epochLibraPerSecond[0] = epochTotalRewards[0].div(4 days);\\n        epochLibraPerSecond[1] = epochTotalRewards[1].div(5 days);\\n\\n        epochLibraPerSecond[2] = 0;\\n        operator = msg.sender;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"LibraRewardPool: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    function checkPoolDuplicate(IERC20 _token) internal view {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            require(poolInfo[pid].token != _token, \\\"LibraRewardPool: existing pool?\\\");\\n        }\\n    }\\n\\n    // Add a new token to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _token,\\n        bool _withUpdate,\\n        uint256 _lastRewardTime\\n    ) public onlyOperator {\\n        checkPoolDuplicate(_token);\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        if (block.timestamp < poolStartTime) {\\n            // chef is sleeping\\n            if (_lastRewardTime == 0) {\\n                _lastRewardTime = poolStartTime;\\n            } else {\\n                if (_lastRewardTime < poolStartTime) {\\n                    _lastRewardTime = poolStartTime;\\n                }\\n            }\\n        } else {\\n            // chef is cooking\\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\\n                _lastRewardTime = block.timestamp;\\n            }\\n        }\\n        bool _isStarted = (_lastRewardTime <= poolStartTime) || (_lastRewardTime <= block.timestamp);\\n        poolInfo.push(PoolInfo({token: _token, allocPoint: _allocPoint, lastRewardTime: _lastRewardTime, accLibraPerShare: 0, isStarted: _isStarted}));\\n        if (_isStarted) {\\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        }\\n    }\\n\\n    // Update the given pool's LIBRA allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\\n        massUpdatePools();\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.isStarted) {\\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(_allocPoint);\\n        }\\n        pool.allocPoint = _allocPoint;\\n    }\\n\\n    // Return accumulate rewards over the given _fromTime to _toTime.\\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime) public view returns (uint256) {\\n        for (uint8 epochId = 2; epochId >= 1; --epochId) {\\n            if (_toTime >= epochEndTimes[epochId - 1]) {\\n                if (_fromTime >= epochEndTimes[epochId - 1]) {\\n                    return _toTime.sub(_fromTime).mul(epochLibraPerSecond[epochId]);\\n                }\\n\\n                uint256 _generatedReward = _toTime.sub(epochEndTimes[epochId - 1]).mul(epochLibraPerSecond[epochId]);\\n                if (epochId == 1) {\\n                    return _generatedReward.add(epochEndTimes[0].sub(_fromTime).mul(epochLibraPerSecond[0]));\\n                }\\n                for (epochId = epochId - 1; epochId >= 1; --epochId) {\\n                    if (_fromTime >= epochEndTimes[epochId - 1]) {\\n                        return _generatedReward.add(epochEndTimes[epochId].sub(_fromTime).mul(epochLibraPerSecond[epochId]));\\n                    }\\n                    _generatedReward = _generatedReward.add(epochEndTimes[epochId].sub(epochEndTimes[epochId - 1]).mul(epochLibraPerSecond[epochId]));\\n                }\\n                return _generatedReward.add(epochEndTimes[0].sub(_fromTime).mul(epochLibraPerSecond[0]));\\n            }\\n        }\\n        return _toTime.sub(_fromTime).mul(epochLibraPerSecond[0]);\\n    }\\n\\n    // View function to see pending LIBRAs on frontend.\\n    function pendingLIBRA(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accLibraPerShare = pool.accLibraPerShare;\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\\n            uint256 _libraReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\\n            accLibraPerShare = accLibraPerShare.add(_libraReward.mul(1e18).div(tokenSupply));\\n        }\\n        return user.amount.mul(accLibraPerShare).div(1e18).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (tokenSupply == 0) {\\n            pool.lastRewardTime = block.timestamp;\\n            return;\\n        }\\n        if (!pool.isStarted) {\\n            pool.isStarted = true;\\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\\n        }\\n        if (totalAllocPoint > 0) {\\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\\n            uint256 _libraReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\\n            pool.accLibraPerShare = pool.accLibraPerShare.add(_libraReward.mul(1e18).div(tokenSupply));\\n        }\\n        pool.lastRewardTime = block.timestamp;\\n    }\\n\\n    // Deposit LP tokens.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 _pending = user.amount.mul(pool.accLibraPerShare).div(1e18).sub(user.rewardDebt);\\n            if (_pending > 0) {\\n                safeLibraTransfer(_sender, _pending);\\n                emit RewardPaid(_sender, _pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.token.safeTransferFrom(_sender, address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accLibraPerShare).div(1e18);\\n        emit Deposit(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 _pending = user.amount.mul(pool.accLibraPerShare).div(1e18).sub(user.rewardDebt);\\n        if (_pending > 0) {\\n            safeLibraTransfer(_sender, _pending);\\n            emit RewardPaid(_sender, _pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.token.safeTransfer(_sender, _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accLibraPerShare).div(1e18);\\n        emit Withdraw(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 _amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.token.safeTransfer(msg.sender, _amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Safe libra transfer function, just in case if rounding error causes pool to not have enough LIBRAs.\\n    function safeLibraTransfer(address _to, uint256 _amount) internal {\\n        uint256 _libraBal = libra.balanceOf(address(this));\\n        if (_libraBal > 0) {\\n            if (_amount > _libraBal) {\\n                libra.safeTransfer(_to, _libraBal);\\n            } else {\\n                libra.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 amount,\\n        address to\\n    ) external onlyOperator {\\n        if (block.timestamp < epochEndTimes[1] + 30 days) {\\n            // do not allow to drain token if less than 30 days after farming\\n            require(_token != libra, \\\"!libra\\\");\\n            uint256 length = poolInfo.length;\\n            for (uint256 pid = 0; pid < length; ++pid) {\\n                PoolInfo storage pool = poolInfo[pid];\\n                require(_token != pool.token, \\\"!pool.token\\\");\\n            }\\n        }\\n        _token.safeTransfer(to, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/distribution/LibraGenesisRewardPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// Note that this pool has no minter key of LIBRA (rewards).\\n// Instead, the governance will call LIBRA distributeReward method and send reward to this pool at the beginning.\\ncontract LibraGenesisRewardPool {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // governance\\n    address public operator;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 token; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. LIBRA to distribute.\\n        uint256 lastRewardTime; // Last time that LIBRA distribution occurs.\\n        uint256 accLibraPerShare; // Accumulated LIBRA per share, times 1e18. See below.\\n        bool isStarted; // if lastRewardBlock has passed\\n    }\\n\\n    IERC20 public libra;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The time when LIBRA mining starts.\\n    uint256 public poolStartTime;\\n\\n    // The time when LIBRA mining ends.\\n    uint256 public poolEndTime;\\n\\n    // MAINNET\\n    uint256 public libraPerSecond = 0.11574 ether; // 10000 LIBRA / (24h * 60min * 60s)\\n    uint256 public runningTime = 24 hours;\\n    uint256 public constant TOTAL_REWARDS = 10000 ether;\\n    // END MAINNET\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 amount);\\n\\n    constructor(\\n        address _libra, \\n        uint256 _poolStartTime\\n    ) public {\\n        require(block.timestamp < _poolStartTime, \\\"late\\\");\\n        if (_libra != address(0)) libra = IERC20(_libra);\\n        poolStartTime = _poolStartTime;\\n        poolEndTime = poolStartTime + runningTime;\\n        operator = msg.sender;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"AstarGenesisPool: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    function checkPoolDuplicate(IERC20 _token) internal view {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            require(poolInfo[pid].token != _token, \\\"AstarGenesisPool: existing pool?\\\");\\n        }\\n    }\\n\\n    // Add a new token to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _token,\\n        bool _withUpdate,\\n        uint256 _lastRewardTime\\n    ) public onlyOperator {\\n        checkPoolDuplicate(_token);\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        if (block.timestamp < poolStartTime) {\\n            // chef is sleeping\\n            if (_lastRewardTime == 0) {\\n                _lastRewardTime = poolStartTime;\\n            } else {\\n                if (_lastRewardTime < poolStartTime) {\\n                    _lastRewardTime = poolStartTime;\\n                }\\n            }\\n        } else {\\n            // chef is cooking\\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\\n                _lastRewardTime = block.timestamp;\\n            }\\n        }\\n        bool _isStarted =\\n        (_lastRewardTime <= poolStartTime) ||\\n        (_lastRewardTime <= block.timestamp);\\n        poolInfo.push(PoolInfo({\\n            token : _token,\\n            allocPoint : _allocPoint,\\n            lastRewardTime : _lastRewardTime,\\n            accLibraPerShare : 0,\\n            isStarted : _isStarted\\n        }));\\n        if (_isStarted) {\\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        }\\n    }\\n\\n    // Update the given pool's LIBRA allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\\n        massUpdatePools();\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.isStarted) {\\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(\\n                _allocPoint\\n            );\\n        }\\n        pool.allocPoint = _allocPoint;\\n    }\\n\\n    // Return accumulate rewards over the given _from to _to block.\\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime) public view returns (uint256) {\\n        if (_fromTime >= _toTime) return 0;\\n        if (_toTime >= poolEndTime) {\\n            if (_fromTime >= poolEndTime) return 0;\\n            if (_fromTime <= poolStartTime) return poolEndTime.sub(poolStartTime).mul(libraPerSecond);\\n            return poolEndTime.sub(_fromTime).mul(libraPerSecond);\\n        } else {\\n            if (_toTime <= poolStartTime) return 0;\\n            if (_fromTime <= poolStartTime) return _toTime.sub(poolStartTime).mul(libraPerSecond);\\n            return _toTime.sub(_fromTime).mul(libraPerSecond);\\n        }\\n    }\\n\\n    // View function to see pending LIBRA on frontend.\\n    function pendingLIBRA(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accLibraPerShare = pool.accLibraPerShare;\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\\n            uint256 _libraReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\\n            accLibraPerShare = accLibraPerShare.add(_libraReward.mul(1e18).div(tokenSupply));\\n        }\\n        return user.amount.mul(accLibraPerShare).div(1e18).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (tokenSupply == 0) {\\n            pool.lastRewardTime = block.timestamp;\\n            return;\\n        }\\n        if (!pool.isStarted) {\\n            pool.isStarted = true;\\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\\n        }\\n        if (totalAllocPoint > 0) {\\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\\n            uint256 _libraReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\\n            pool.accLibraPerShare = pool.accLibraPerShare.add(_libraReward.mul(1e18).div(tokenSupply));\\n        }\\n        pool.lastRewardTime = block.timestamp;\\n    }\\n\\n    // Deposit LP tokens.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 _pending = user.amount.mul(pool.accLibraPerShare).div(1e18).sub(user.rewardDebt);\\n            if (_pending > 0) {\\n                safeLibraTransfer(_sender, _pending);\\n                emit RewardPaid(_sender, _pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.token.safeTransferFrom(_sender, address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accLibraPerShare).div(1e18);\\n        emit Deposit(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 _pending = user.amount.mul(pool.accLibraPerShare).div(1e18).sub(user.rewardDebt);\\n        if (_pending > 0) {\\n            safeLibraTransfer(_sender, _pending);\\n            emit RewardPaid(_sender, _pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.token.safeTransfer(_sender, _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accLibraPerShare).div(1e18);\\n        emit Withdraw(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 _amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.token.safeTransfer(msg.sender, _amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Safe LIBRA transfer function, just in case if rounding error causes pool to not have enough LIBRAs.\\n    function safeLibraTransfer(address _to, uint256 _amount) internal {\\n        uint256 _libraBalance = libra.balanceOf(address(this));\\n        if (_libraBalance > 0) {\\n            if (_amount > _libraBalance) {\\n                libra.safeTransfer(_to, _libraBalance);\\n            } else {\\n                libra.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token, \\n        uint256 amount, \\n        address to\\n    ) external onlyOperator {\\n        if (block.timestamp < poolEndTime + 90 days) {\\n            // do not allow to drain core token (LIBRA or lps) if less than 90 days after pool ends\\n            require(_token != libra, \\\"libra\\\");\\n            uint256 length = poolInfo.length;\\n            for (uint256 pid = 0; pid < length; ++pid) {\\n                PoolInfo storage pool = poolInfo[pid];\\n                require(_token != pool.token, \\\"pool.token\\\");\\n            }\\n        }\\n        _token.safeTransfer(to, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/LBond.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\nimport \\\"./owner/Operator.sol\\\";\\n\\ncontract LBond is ERC20Burnable, Operator {\\n    /**\\n     * @notice Constructs the LIBRA Bond ERC-20 contract.\\n     */\\n    constructor() public ERC20(\\\"Libra Finance BOND\\\", \\\"LBOND\\\") {}\\n\\n    /**\\n     * @notice Operator mints basis bonds to a recipient\\n     * @param recipient_ The address of recipient\\n     * @param amount_ The amount of basis bonds to mint to\\n     * @return whether the process has been done\\n     */\\n    function mint(address recipient_, uint256 amount_) public onlyOperator returns (bool) {\\n        uint256 balanceBefore = balanceOf(recipient_);\\n        _mint(recipient_, amount_);\\n        uint256 balanceAfter = balanceOf(recipient_);\\n\\n        return balanceAfter > balanceBefore;\\n    }\\n\\n    function burn(uint256 amount) public override {\\n        super.burn(amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount) public override onlyOperator {\\n        super.burnFrom(account, amount);\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 5000\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "70c3bbf99781c462cbf83a558fe8cc07",
      "transactionHash": "0x65ee98beaced86ea35fd2dd65a107849c4a0b8c1fe7d756f6500616f226b4f86",
      "args": []
    },
    "rawTx": ""
  }
}